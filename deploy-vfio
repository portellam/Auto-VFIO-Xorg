#!/bin/bash/env bash

#
# Filename:       deploy-vfio
# Description:    Main executable. See README for details and usage.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [ ] create dicts for each source files args.
# - [ ] create functions to call main functions for each source.
#

#
# sources
#
  declare -g SCRIPT_DIR="/usr/local/bin/"
  declare -g SCRIPT_BIN_DIR="${SCRIPT_DIR}deploy-vfio.d/"

  source "${SCRIPT_BIN_DIR}src_print" "${0}"
  source "${SCRIPT_BIN_DIR}src_privileges"
  source "${SCRIPT_BIN_DIR}src_compatibility"
  source "${SCRIPT_BIN_DIR}src_isolcpu"
  source "${SCRIPT_BIN_DIR}src_hugepages"
  source "${SCRIPT_BIN_DIR}src_vfio_setup"
  source "${SCRIPT_BIN_DIR}src_network"
  source "${SCRIPT_BIN_DIR}src_auto_xorg"
  source "${SCRIPT_BIN_DIR}src_libvirt_hooks"
  source "${SCRIPT_BIN_DIR}src_looking_glass"
  source "${SCRIPT_BIN_DIR}src_scream"
  source "${SCRIPT_BIN_DIR}src_zram_swap"

#
# params
#
  declare -ir INT_FREE_MAX_MEMORY_KILOBYTES=$( \
    cat /proc/meminfo | grep --ignore-case MemTotal | \
    cut --delimiter ":" --fields 2 | awk 'END {print $1}' \
  )

  #
  # DESC: Compatibility checks
  #
    BOOL_COMPATIBILITY_SKIP=false

  #
  # DESC: Pre setup
  #
    BOOL_PRE_SETUP_SKIP=false

    declare -A DICT_HUGEPAGES_ARGS=(
      ["COUNT"]="",
      ["COUNT_MAX_KILOBYTES"]=""
      ["COUNT_KILOBYTES"]="",
      ["FREE_MAX_MEMORY_KILOBYTES"]="${INT_FREE_MAX_MEMORY_KILOBYTES}"
      ["SIZE"]="",
      ["SIZE_KILOBYTES"]="",
      ["SKIP"]=false,
    )

    declare -A DICT_ISOLCPU_ARGS=(
      ["SKIP"]=false,
      ["THREAD_SETS"]="",
    )

  #
  # DESC: Main setup
  #
    BOOL_SKIP_MAIN_SETUP=false

    declare -A DICT_IOMMU_ARGS=(
      ["IOMMU_GROUPS"]="",
      ["SELECT_ALL"]=true,
      ["SELECT_ALL_NON_VGA"]=false,
      ["SKIP"]=false,
      ["USE_DEFAULT_XML"]="",
      ["XML_FILE_NAME"]="",
    )

    declare -A DICT_VFIO_ARGS=(
      # TODO: validate in src_vfio_setup for CMDLINE args (ex: hugepages, isolcpu, devices)
      ["CUSTOM_CMDLINE_STRING"]="",
      ["HUGEPAGES_COUNT"]="",
      ["HUGEPAGES_SIZE"]="",
      ["IOMMU_GROUPS"]="",
      ["ISOLCPU_THREAD_SETS"]="",
      ["MULTI_BOOT_SETUP"]=true
      ["SKIP"]=false,
      ["STATIC_SETUP"]=false
    )

  #
  # DESC: Post setup
  #
    BOOL_SKIP_POST_SETUP=false

    declare -A DICT_AUTO_XORG_ARGS=(
      ["ARGS"]=""
      ["INSTALL"]=false,
      ["SKIP"]=false,
      ["UNINSTALL"]=false,
      ["UPDATE"]=false,
    )

    declare -A DICT_GENERATE_EVDEV_ARGS=(
      ["ARGS"]=""
      ["HUGEPAGES_ENABLED"]=false
      ["INSTALL"]=false,
      ["SKIP"]=false,
      ["UNINSTALL"]=false,
      ["UPDATE"]=false,
    )

    declare -A DICT_LIBVIRT_HOOKS_ARGS=(
      ["INSTALL"]=false,
      ["SKIP"]=false,
      ["UNINSTALL"]=false,
      ["UPDATE"]=false,
    )

    declare -A DICT_LOOKING_GLASS_ARGS=(
      ["BUFFER_SIZE"]="",
      ["INSTALL"]=false,
      ["SKIP"]=false,
      ["UPDATE"]=false,
      ["USE_DEFAULTS"]=true,
    )

    declare -A DICT_ZRAM_SWAP_ARGS=(
      ["FORCE_RESTART"]=false,
      ["HUGEPAGES_COUNT_MAX_KILOBYTES"]="",
      ["INSTALL"]=false,
      ["MODIFY"]=false,
      ["RESERVED_MEMORY_FRACTION"]="",
      ["RESTART"]=false,
      ["SKIP"]=false,
      ["UPDATE"]=false,
      ["USE_CALCULATION"]=false,
      ["USE_DEFAULTS"]=true,
    )

#
# logic
#
  #
  # DESC:   Main function.
  # $*:     the command line arguments as an array.
  # RETURN: If script executes successfully, return 0.
  #         If not, return 1.
  #
    function main
    {
      return 1

      if ! src_privileges_is_user_superuser \
        || ! is_system_supported; then
        return 1
      fi

      print_and_log_work "Executing pre setup..."

      if ! hugepages \
        || ! isolcpu; then
        print_and_log_fail "Pre setup failed."
        return 1
      fi

      print_and_log_pass "Pre setup complete."
      print_and_log_work "Executing main setup..."

      if ! iommu \
        || ! vfio_setup; then
        print_and_log_fail "Main setup failed."
        return 1
      fi

      print_and_log_pass "Main setup complete."
      print_and_log_work "Executing post setup..."

      if ! auto_xorg \
        || ! libvirt_hooks \
        || ! looking_glass \
        || ! scream \
        || ! zram_swap; then
        print_and_log_fail "Post setup failed."
        return 1
      fi

      print_and_log_pass "Post setup complete."
      print_and_log_pass
    }

  #
  # DESC:   Parse arguments.
  # $*:     the command line arguments as an array.
  # RETURN: If all arguments are valid, or none are passed, return 0
  #         If one or more arguments are not valid, return 1.
  #         If an exception occurs, return 2.
  #
    function parse_args
    {
      # TODO: develop!
      # NOTE: dicts will be populated here.
      return 1
    }

  #
  # DESC: Pre setup
  #
    function hugepages
    {
      if ! src_hugepages_main \
          "${DICT_HUGEPAGES_ARGS["SKIP"]}" \
          "${DICT_HUGEPAGES_ARGS["SIZE"]}" \
          "DICT_HUGEPAGES_ARGS[\"SIZE_KILOBYTES\"]" \
          "DICT_HUGEPAGES_ARGS[\"COUNT\"]" \
          "DICT_HUGEPAGES_ARGS[\"COUNT_KILOBYTES\"]" \
          "${DICT_HUGEPAGES_ARGS["FREE_MAX_MEMORY_KILOBYTES"]}"
          "DICT_HUGEPAGES_ARGS[\"COUNT_MAX_KILOBYTES\"]"; then
        DICT_GENERATE_EVDEV_ARGS["HUGEPAGES_ENABLED"]=false
        return 1
      fi

      DICT_GENERATE_EVDEV_ARGS["HUGEPAGES_ENABLED"]=true
      return 0
    }

    function isolcpu
    {
      # if ! src_isolcpu_main; then
      #   return 1
      # fi

      return 0
    }

  #
  # DESC: Main setup
  #
    function iommu
    {
      # if ! src_iommu_main; then
      #   return 1
      # fi

      return 0
    }

    function vfio_setup
    {
      DICT_VFIO_ARGS["HUGEPAGES_COUNT"]="${DICT_HUGEPAGES_ARGS["COUNT"]}"
      DICT_VFIO_ARGS["HUGEPAGES_SIZE"]="${DICT_HUGEPAGES_ARGS["SIZE"]}"
      DICT_VFIO_ARGS["ISOLCPU_THREAD_SETS"]="${DICT_ISOLCPU_ARGS["THREAD_SETS"]}"
      DICT_VFIO_ARGS["IOMMU_GROUPS"]="${DICT_IOMMU_ARGS["IOMMU_GROUPS"]}"

      # if ! src_vfio_setup_main; then
      #   return 1
      # fi

      return 0
    }

  #
  # DESC: Post setup
  #
    function auto_xorg
    {
      if ! src_auto_xorg_main \
          "${DICT_AUTO_XORG_ARGS["SKIP"]}" \
          "${DICT_AUTO_XORG_ARGS["INSTALL"]}" \
          "${DICT_AUTO_XORG_ARGS["UNINSTALL"]}" \
          "${DICT_AUTO_XORG_ARGS["UPDATE"]}" \
          "DICT_AUTO_XORG_ARGS[\"ARGS\"]"; then
        return 1
      fi

      return 0
    }

    function generate_evdev
    {
      local -r str_hugepages_argument=" --hugepages "

      if DICT_GENERATE_EVDEV_ARGS["HUGEPAGES_ENABLED"] \
        && ! array_contains_value \
          "DICT_GENERATE_EVDEV_ARGS[\"ARGS\"]" \
          "${str_hugepages_argument}"; then
        DICT_GENERATE_EVDEV_ARGS["ARGS"]+="${str_hugepages_argument}"
      fi

      if ! src_generate_evdev_main \
          "${DICT_GENERATE_EVDEV_ARGS["SKIP"]}" \
          "${DICT_GENERATE_EVDEV_ARGS["INSTALL"]}" \
          "${DICT_GENERATE_EVDEV_ARGS["UNINSTALL"]}" \
          "${DICT_GENERATE_EVDEV_ARGS["UPDATE"]}" \
          "DICT_GENERATE_EVDEV_ARGS[\"ARGS\"]"; then    # TODO: test if this will work!
        return 1
      fi

      return 0
    }

    function libvirt_hooks
    {
      if ! src_libvirt_hooks_main \
          "${DICT_LIBVIRT_HOOKS_ARGS["SKIP"]}" \
          "${DICT_LIBVIRT_HOOKS_ARGS["INSTALL"]}" \
          "${DICT_LIBVIRT_HOOKS_ARGS["UNINSTALL"]}" \
          "${DICT_LIBVIRT_HOOKS_ARGS["UPDATE"]}"; then
        return 1
      fi

      return 0
    }

    function looking_glass
    {
      # if ! src_looking_glass_main; then
      #   return 1
      # fi

      return 0
    }

    function scream
    {
      # if ! src_scream_main; then
      #   return 1
      # fi

      return 0
    }

    function zram_swap
    {
      DICT_ZRAM_SWAP_ARGS["HUGEPAGES_COUNT_MAX_KILOBYTES"]="${DICT_HUGEPAGES_ARGS["COUNT_MAX_KILOBYTES"]}"

      if ! src_zram_swap_main \
          "${DICT_ZRAM_SWAP_ARGS["SKIP"]}" \
          "${DICT_ZRAM_SWAP_ARGS["MODIFY"]}" \
          "${DICT_ZRAM_SWAP_ARGS["INSTALL"]}" \
          "${DICT_ZRAM_SWAP_ARGS["UNINSTALL"]}" \
          "${DICT_ZRAM_SWAP_ARGS["UPDATE"]}" \
          "${DICT_ZRAM_SWAP_ARGS["RESTART"]}" \
          "${DICT_ZRAM_SWAP_ARGS["USE_CALCULATION"]}" \
          "${DICT_ZRAM_SWAP_ARGS["USE_DEFAULTS"]}" \
          "${DICT_ZRAM_SWAP_ARGS["RESERVED_MEMORY_FRACTION"]}" \
          "${DICT_ZRAM_SWAP_ARGS["HUGEPAGES_COUNT_MAX_KILOBYTES"]}"; then
        return 1
      fi

      return 0
    }

#
# main logic
#
  parse_args "$@"
  main