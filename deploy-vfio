#!/bin/bash/env bash

#
# Filename:       deploy-vfio
# Description:    Main executable. See README for details and usage.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [ ] create dicts for each source files args.
# - [ ] maintain "high-level" execution here.
# - [ ] maintain readability such that the user may create his own "deploy-vfio".
# - [ ] pre-setup
#   - [ ] create src_isolcpu.
# - [ ] add repos
#   - [ ] "Audio Loopback"  "github.com/portellam/audio-loopback"
#   - [ ] "Scream"          "github.com/duncanthrax/scream"
#

#
# sources
#
  declare -g SCRIPT_DIR="/usr/local/bin/"
  declare -g SCRIPT_BIN_DIR="${SCRIPT_DIR}deploy-vfio.d/"

  source "${SCRIPT_BIN_DIR}src_print" "${0}"
  source "${SCRIPT_BIN_DIR}src_privileges"
  source "${SCRIPT_BIN_DIR}src_compatibility"
  #source "${SCRIPT_BIN_DIR}src_isolcpu"
  source "${SCRIPT_BIN_DIR}src_hugepages"
  source "${SCRIPT_BIN_DIR}src_vfio_setup"
  source "${SCRIPT_BIN_DIR}src_network"
  #source "${SCRIPT_BIN_DIR}src_audio_loopback"
  source "${SCRIPT_BIN_DIR}src_auto_xorg"
  source "${SCRIPT_BIN_DIR}src_libvirt_hooks"
  source "${SCRIPT_BIN_DIR}src_looking_glass"
  #source "${SCRIPT_BIN_DIR}src_scream"
  source "${SCRIPT_BIN_DIR}src_zram_swap"

#
# params
#
  #
  # DESC: Compatibility checks
  #
    BOOL_COMPATIBILITY_SKIP=false

  #
  # DESC: Pre setup
  #
    BOOL_PRE_SETUP_SKIP=false

    declare -A DICT_HUGEPAGES_ARGS=(
      ["COUNT"]="",
      ["SIZE"]="",
      ["SKIP"]=false,
    )

    declare -A DICT_ISOLCPU_ARGS=(
      ["SKIP"]=false,
      ["THREAD_SETS"]="",
    )

  #
  # DESC: Main setup
  #
    BOOL_SKIP_MAIN_SETUP=false

    declare -A DICT_PARSE_ARGS=(
      ["SELECT_ALL"]=true,
      ["SELECT_ALL_NON_VGA"]=false,
      ["SKIP"]=false,
      ["USE_DEFAULT_XML"]="",
      ["XML_FILE_NAME"]="",
    )

    declare -A DICT_VFIO_ARGS=(
      ["CUSTOM_CMDLINE_STRING"]="",           # TODO: validate in src_vfio_setup for CMDLINE args (ex: hugepages, isolcpu, devices)
      ["HUGEPAGES_COUNT"]="",
      ["HUGEPAGES_SIZE"]="",
      ["IOMMU_GROUPS"]="",
      ["ISOLCPU_THREAD_SETS"]="",
      ["MULTI_BOOT_SETUP"]=true
      ["SKIP"]=false,
      ["STATIC_SETUP"]=false
    )

  #
  # DESC: Post setup
  #
    BOOL_SKIP_POST_SETUP=false

    declare -A DICT_AUTO_XORG_ARGS=(
      ["ARGS"]=""
      ["INSTALL"]=false,
      ["SKIP"]=false,
      ["UNINSTALL"]=false,
      ["UPDATE"]=false,
    )

    declare -A DICT_LIBVIRT_HOOKS_ARGS=(
      ["ARGS"]="",
      ["INSTALL"]=false,
      ["SKIP"]=false,
      ["UPDATE"]=false,
    )

    declare -A DICT_LOOKING_GLASS_ARGS=(
      ["BUFFER_SIZE"]="",
      ["INSTALL"]=false,
      ["SKIP"]=false,
      ["UPDATE"]=false,
      ["USE_DEFAULTS"]=true,
    )

    declare -A DICT_ZRAM_SWAP_ARGS=(
      ["FORCE_RESTART"]=false,
      ["FRACTION_OF_MEMORY_TOTAL"]="",
      ["HUGEPAGES_COUNT"]="",
      ["HUGEPAGES_SIZE"]="",
      ["INSTALL"]=false,
      ["SKIP"]=false,
      ["UPDATE"]=false,
      ["USE_CALCULATION"]=false,
      ["USE_DEFAULTS"]=true,
    )

#
# logic
#
  #
  # DESC:   Main function.
  # $*:     the command line arguments as an array.
  # RETURN: If script executes successfully, return 0.
  #         If not, return 1.
  #
    function main
    {
      # TODO: develop!
      return 1

      if ! is_user_superuser \
        || ! is_system_supported; then
        return 1
      fi

      # TODO: add pre setup.

      # TODO: add main setup.

      # TODO: add remaining.
      if ! auto_xorg; then
        print_and_log_fail "Post setup failed."
        return 1
      fi

      print_and_log_pass "Post setup complete."
      print_and_log_pass
    }

  #
  # DESC:   Parse arguments.
  # $*:     the command line arguments as an array.
  # RETURN: If all arguments are valid, or none are passed, return 0
  #         If one or more arguments are not valid, return 1.
  #         If an exception occurs, return 2.
  #
    function parse_args
    {
      # TODO: develop!
      return 1
    }

  #
  # DESC: Pre setup
  #

  #
  # DESC: Main setup
  #

  #
  # DESC: Post setup
  #
    #
    # DESC:   Call src_auto_xorg_main.
    # RETURN: If successful, return 0.
    #         If not, return 1.
    #
      function auto_xorg
      {
        local -a arr_args="${DICT_AUTO_XORG_ARGS["ARGS"]}"

        if ! src_auto_xorg_main \
            "${DICT_AUTO_XORG_ARGS["SKIP"]}" \
            "${DICT_AUTO_XORG_ARGS["INSTALL"]}" \
            "${DICT_AUTO_XORG_ARGS["UNINSTALL"]}" \
            "${DICT_AUTO_XORG_ARGS["UPDATE"]}" \
            "arr_args"; then
          return 1
        fi

        return 0
      }

#
# main logic
#
  parse_args "$@"
  main