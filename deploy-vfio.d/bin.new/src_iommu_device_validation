#!/bin/false

#
# Filename:       src_iommu_device_validation
# Description:    Logic for device validation.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [ ] test.
# - [x] develop.
#

#
# sources
#
  declare -g SRC_STR_SCRIPT_DIR="/usr/local/bin/"
  declare -g SRC_STR_SCRIPT_BIN_DIR="${SRC_STR_SCRIPT_DIR}deploy-vfio.d/"

  source "${SRC_STR_SCRIPT_BIN_DIR}src_print"

#
# logic
#
  #
  # DESC:   Is device driver not blacklisted.
  # $1:     the device driver as a string.
  # RETURN: If device driver is not 'vfio-pci', return 0.
  #         If device driver is 'vfio-pci', return 1.
  #         If an exception occurs, return 2.
  #
    function is_device_driver_not_blacklisted
    {
      log_stdout "${0}: ${FUNCNAME}"

      local -r str_device_slot_id="${1}"

      if ! is_string "${str_device_slot_id}"; then
        log_invalid_parameter "str_device_slot_id"
        return 2
      fi

      local -r str_device_driver="${1}"

      local -ar arr_excluded_drivers=(
        "snd_hda_intel"
      )

      if array_contains_value "arr_excluded_drivers" "${str_device_driver}"; then
        log_stderr "Device is blacklisted."
        return 1
      fi

      log_stdout "Device is not blacklisted."
      return 0
    }

  #
  # DESC:   Is device driver not 'vfio-pci'.
  # $1:     the device driver as a string.
  # RETURN: If device driver is not 'vfio-pci', return 0.
  #         If device driver is 'vfio-pci', return 1.
  #         If an exception occurs, return 2.
  #
    function is_device_driver_not_vfio
    {
      log_stdout "${0}: ${FUNCNAME}"

      local -r str_device_driver="${1}"

      if ! is_string "${str_device_driver}"; then
        log_invalid_parameter "str_device_driver"
        return 2
      fi
      local -r str_matched_driver="vfio-pci"

      case "${str_device_driver}" in
        *"${str_matched_driver}"* )
          log_stderr "Device is binded to '${str_matched_driver}'."
          return 1 ;;
      esac

      log_stdout "Device is not binded to '${str_matched_driver}'."
      return 0
    }

  #
  # DESC:   Is device external (example: a PCIE expansion card)?
  # $1:     the device slot ID as a string.
  # RETURN: If device is external, return 0.
  #         If device is not external, return 1.
  #         If an exception occurs, return 2.
  #
    function is_device_external
    {
      log_stdout "${0}: ${FUNCNAME}"

      local -r str_device_slot_id="${1}"

      if ! is_string "${str_device_slot_id}"; then
        log_invalid_parameter "str_device_slot_id"
        return 2
      fi

      local -r str_device="${1}"
      local -r str_regex_get_domain_id='^[0-9A-F][1-9A-F]$'

      local -ru str_domain_id=$( \
        echo "${str_device}" | cut --delimiter ':' --fields 2 \
      )

      if ! echo "${str_domain_id}" | \
        grep --extended-regexp --quiet "${str_regex_get_domain_id}"; then
        log_stderr "Device is not external."
        return 1
      fi

      log_stdout "Device is external."
      return 0
    }

  #
  # DESC:   Is device preferred by 'pci-stub' driver.
  # $1:     the device slot ID as a string.
  # RETURN: If device is preferred, return 0.
  #         If device is not preferred, return 1.
  #         If an exception occurs, return 2.
  #
    function is_device_for_pci_stub
    {
      log_stdout "${0}: ${FUNCNAME}"

      local -r str_device_slot_id="${1}"

      if ! is_string "${str_device_slot_id}"; then
        log_invalid_parameter "str_device_slot_id"
        return 2
      fi

      local -lr str_device_class="$( \
        lspci -ms ${str_device_slot_id} | cut --delimiter '"' --fields 2 \
      )"

      case "${str_device_class}" in
        *"usb"* )
          log_stdout "Device class is valid."
          return 0 ;;
      esac

      log_stderr "Device class is not valid."
      return 1
    }

  #
  # DESC:   Is device (lspci) ID is valid.
  # $1:     the device slot ID as a string.
  # RETURN: If device ID is valid, return 0.
  #         If device ID is not valid, return 1.
  #         If an exception occurs, return 2.
  #
    function is_device_id_valid
    {
      log_stdout "${0}: ${FUNCNAME}"

      local -r str_device_slot_id="${1}"

      if ! is_string "${str_device_slot_id}"; then
        log_invalid_parameter "str_device_slot_id"
        return 2
      fi

      local -r str_output="$( lspci -s "${str_device}" )"

      if ! is_string "${str_output}"; then
        log_stderr "Device ID is not valid."
        return 1
      fi

      log_stdout "Device ID is valid."
      return 0
    }

  #
  # DESC:   Is device not binded to 'vfio-pci' (the driver is not binded).
  # $1:     the device slot ID as a string.
  # RETURN: If device is not binded, return 0.
  #         If device is binded, return 1.
  #         If an exception occurs, return 2.
  #
    function is_device_not_binded_to_vfio
    {
      log_stdout "${0}: ${FUNCNAME}"

      local -r str_device_slot_id="${1}"

      if ! is_string "${str_device_slot_id}"; then
        log_invalid_parameter "str_device_slot_id"
        return 2
      fi

      local str_device_driver=""
      get_device_driver "${str_device_slot_id}" "str_device_driver"

      if ! is_device_driver_not_vfio "${str_device_driver}"; then
        return 1
      fi

      return 0
    }

  #
  # DESC:   Is device not blacklisted (the driver is not available)?
  # $1:     the device slot ID as a string.
  # RETURN: If device is not excluded, return 0.
  #         If device is external, return 1.
  #         If an exception occurs, return 2.
  #
    function is_device_not_blacklisted
    {
      log_stdout "${0}: ${FUNCNAME}"

      local -r str_device_slot_id="${1}"

      if ! is_string "${str_device_slot_id}"; then
        log_invalid_parameter "str_device_slot_id"
        return 2
      fi

      local str_device_driver=""
      get_device_driver "${str_device_slot_id}" "str_device_driver"

      if ! is_device_driver_not_blacklisted "${str_device_driver}"; then
        return 1
      fi

      return 0
    }

  #
  # DESC:   Is device not external (example: memory bus, integrated sound chip)?
  # $1:     the device slot ID as a string.
  # RETURN: If device is external, return 0.
  #         If device is not external, return 1.
  #         If an exception occurs, return 2.
  #
    function is_device_not_external
    {
      log_stdout "${0}: ${FUNCNAME}"

      local -r str_device_slot_id="${1}"

      if ! is_string "${str_device_slot_id}"; then
        log_invalid_parameter "str_device_slot_id"
        return 2
      fi

      if ! is_device_external "${str_device_slot_id}"; then
        return 1
      fi

      return 0
    }

  #
  # DESC:   Is device a video graphics array (VGA)?
  # $1:     the device slot ID as a string.
  # RETURN: If device is VGA, return 0.
  #         If device is not VGA, return 1.
  #         If an exception occurs, return 2.
  #
    function is_device_vga
    {
      log_stdout "${0}: ${FUNCNAME}"

      local -r str_device_slot_id="${1}"

      if ! is_string "${str_device_slot_id}"; then
        log_invalid_parameter "str_device_slot_id"
        return 2
      fi

      local -lr str_device_class_lowercase="$( \
        lspci -ms ${str_device_slot_id} | cut --delimiter '"' --fields 2 \
      )"

      case "${str_device_class_lowercase}" in
        *"vga"* | *"graphic"* | *"display"* )
          log_stdout "Device is VGA."
          return 0 ;;
      esac

      log_stderr "Device is not VGA."
      return 1
    }