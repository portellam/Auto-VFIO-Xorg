#!/bin/false

#
# Filename:       src_iommu_device_validation
# Description:    Logic for device validation.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [ ] test.
#

#
# sources
#
  declare -g SRC_STR_SCRIPT_DIR="/usr/local/bin/"
  declare -g SRC_STR_SCRIPT_BIN_DIR="${SRC_STR_SCRIPT_DIR}deploy-vfio.d/"

  source "${SRC_STR_SCRIPT_BIN_DIR}src_print"

#
# logic
#
  #
  # DESC:   Is device driver not blacklisted.
  # $1:     the device info as a string.
  # RETURN: If device driver is not 'vfio-pci', return 0.
  #         If device driver is 'vfio-pci', return 1.
  #         If device driver is not valid, return 2.
  #
    function is_device_driver_not_blacklisted
    {
      log_stdout "${0}: ${FUNCNAME}"

      if ! is_string "${1}" &> /dev/null; then
        log_stderr "Cannot determine if device driver is not blacklisted, given "\
          "invalid device driver."

        return 2
      fi

      local -r str_driver="${1}"
      local -r str_excluded_driver="snd_hda_intel"

      case "${str_driver}" in
        *"${str_excluded_driver}"* )
          return 1 ;;
      esac

      return 0
    }

  #
  # DESC:   Is device driver not 'vfio-pci'.
  # $1:     the device info as a string.
  # RETURN: If device driver is not 'vfio-pci', return 0.
  #         If device driver is 'vfio-pci', return 1.
  #         If device driver is not valid, return 2.
  #
    function is_device_driver_not_vfio
    {
      log_stdout "${0}: ${FUNCNAME}"

      if ! is_string "${1}" &> /dev/null; then
        log_stderr "Cannot determine if device driver is not 'vfio-pci', given "\
          "invalid device driver."

        return 2
      fi

      local -r str_driver="${1}"
      local -r str_matched_driver="vfio-pci"

      case "${str_driver}" in
        *"${str_matched_driver}"* )
          return 1 ;;
      esac

      return 0
    }

  #
  # DESC:   Is device external.
  # $1:     the device info as a string.
  # RETURN: If device is external, return 0.
  #         If device is not external, return 1.
  #         If device is not valid, return 2.
  #
    function is_device_external
    {
      log_stdout "${0}: ${FUNCNAME}"

      if ! is_string "${1}" &> /dev/null; then
        log_stderr "Cannot determine if device is external, given invalid device."

        return 2
      fi

      local -r str_device="${1}"
      local -r str_regex_get_domain_id='^[0-9A-F][1-9A-F]$'

      local -ru str_domain_id=$( \
        echo "${str_device}" | cut --delimiter ':' --fields 2 \
      )

      echo "${str_domain_id}" | \
        grep --extended-regexp --quiet "${str_regex_get_domain_id}"
    }

  #
  # DESC:   Is device preferred by 'pci-stub' driver.
  # $1:     the device info as a string.
  # RETURN: If device is preferred, return 0.
  #         If device is not preferred, return 1.
  #         If device is not valid, return 2.
  #
    function is_device_for_pci_stub
    {
      log_stdout "${0}: ${FUNCNAME}"

      if ! is_string "${1}" &> /dev/null; then
        log_stderr "Cannot determine if device driver is preferred by "\
          "'pci-stub,' given invalid device."

        return 2
      fi

      local -r str_device="${1}"

      local -lr str_class="$( \
        lspci -ms ${str_device} | cut --delimiter '"' --fields 2 \
      )"

      case "${str_class}" in
        *"usb"* )
          return 0 ;;
      esac

      return 1
    }

  #
  # DESC:   Is device ID is valid.
  # $1:     the device info as a string.
  # RETURN: If device ID is valid, return 0.
  #         If device ID is not valid, return 1.
  #         If device is not valid, return 2.
  #
    function is_device_id_valid
    {
      log_stdout "${0}: ${FUNCNAME}"

      if ! is_string "${1}" &> /dev/null; then
        log_stderr "Cannot determine if device ID is valid, "\
          "given invalid device."

        return 2
      fi

      local -r str_device="${1}"
      local -r str_output="$( lspci -s "${str_device}" )"

      if ! is_string "${str_output}" &> /dev/null; then
        log_stderr "Device ID is not valid."
        return 1
      fi

      return 0
    }

  #
  # DESC:   Is device not binded to 'vfio-pci'.
  # $1:     the device info as a string.
  # RETURN: If device is not binded, return 0.
  #         If device is binded, return 1.
  #         If device is not valid, return 2.
  #
    function is_device_not_binded_to_vfio
    {
      log_stdout "${0}: ${FUNCNAME}"

      if ! is_string "${1}" &> /dev/null; then
        print_error_to_log "Cannot determine if device is not binded to 'vfio'pci' "\
          "given invalid device."

        return 2
      fi

      local -r str_device="${1}"
      local str_driver=""
      get_device_driver "${str_device}" "str_driver"
      is_device_driver_not_vfio "${str_driver}"
    }


  #
  # DESC:   Is device not blacklisted.
  # $1:     the device info as a string.
  # RETURN: If device is not excluded, return 0.
  #         If device is external, return 1.
  #         If device is not valid, return 2.
  #
    function is_device_not_blacklisted
    {
      log_stdout "${0}: ${FUNCNAME}"

      if ! is_string "${1}" &> /dev/null; then
        print_error_to_log "Cannot determine if device is not blacklisted, "\
          "given invalid device."

        return 21
      fi

      local -r str_device="${1}"
      local str_driver=""
      get_device_driver "${str_device}" "str_driver"
      is_device_driver_not_blacklisted "${str_driver}"
    }

  #
  # DESC:   Is device external.
  # $1:     the device info as a string.
  # RETURN: If device is external, return 0.
  #         If device is not external, return 1.
  #         If device is not valid, return 2.
  #
    function is_device_not_external
    {
      log_stdout "${0}: ${FUNCNAME}"

      if ! is_string "${1}" &> /dev/null; then
        print_error_to_log "Cannot determine if device is not external, "\
          "given invalid device."

        return 2
      fi

      local -r str_device="${1}"
      local str_driver=""
      get_device_driver "${str_device}" "str_driver"
      is_device_external "${str_device}"
    }

  #
  # DESC:   Is device VGA.
  # $1:     the device info as a string.
  # RETURN: If device is VGA, return 0.
  #         If device is not VGA, return 1.
  #         If device is not valid, return 2.
  #
    function is_device_vga
    {
      log_stdout "${0}: ${FUNCNAME}"

      if ! is_string "${1}" &> /dev/null; then
        print_error_to_log "Cannot determine if device is VGA, given invalid device."
        return 2
      fi

      local -r str_device="${1}"

      local -lr str_class="$( \
        lspci -ms ${str_device} | cut --delimiter '"' --fields 2 \
      )"

      case "${str_class}" in
        *"vga"* | *"graphic"* | *"display"* )
          return 0 ;;
      esac

      return 1
    }