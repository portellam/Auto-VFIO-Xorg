#!/bin/false

#
# Filename:       src_iommu_group_validation
# Description:    Logic to validate IOMMU groups.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [ ] rename params.
# - [ ] double-check external class params are named properly.
# - [ ] refactor.
# - [ ] add comments.
# - [x] develop.
#

#
# sources
#
  declare -g SRC_STR_SCRIPT_DIR="/usr/local/bin/"
  declare -g SRC_STR_SCRIPT_BIN_DIR="${SRC_STR_SCRIPT_DIR}deploy-vfio.d/"

  source "${SRC_STR_SCRIPT_BIN_DIR}src_print"
  source "${SRC_STR_SCRIPT_BIN_DIR}src_iommu_device_validation"
  source "${SRC_STR_SCRIPT_BIN_DIR}src_iommu_xml"

#
# logic
#
  #
  # DESC:   Add all valid IOMMU groups to either Host or VFIO arrays.
  # $1:     the IOMMU group ID as an int.
  # $2:     the reserved IOMMU groups for Host as an array reference.
  # $3:     the reserved IOMMU groups with VGA for Host as an array reference.
  # $4:     the reserved IOMMU groups for VFIO as an array reference.
  # $5:     the reserved IOMMU groups with VGA for VFIO as an array reference.
  # RETURN: If IOMMU group ID is valid, referenced arrays are valid, and IOMMU group
  #         is added, return 0.
  #         If else, return 1.
  #         If an exception occurs, return 2.
  #
    function add_all_iommu_groups_to_either_host_or_vfio_collections
    {
      local -r str_warn="Could not add all IOMMU groups to Host or VFIO collection."
      local -ir int_iommu_group_id="${1}"

      if ! is_array "${5}"; then
        log_invalid_parameter "5"
        log_warn "${str_warn}"
        return 2
      fi

      if ! is_array "${4}"; then
        log_invalid_parameter "4"
        log_warn "${str_warn}"
        return 2
      fi

      if ! is_array "${3}"; then
        log_invalid_parameter "3"
        log_warn "${str_warn}"
        return 2
      fi

      if ! is_array "${2}"; then
        log_invalid_parameter "2"
        log_warn "${str_warn}"
        return 2
      fi

      if ! is_iommu_group_id_valid "${int_iommu_group_id}"; then
        log_warn "${str_warn}"
        return 1
      fi

      for int_iommu_group_id in $( ls /sys/kernel/iommu_groups/ | \
        sort --numeric-sort ); do
          if ! add_iommu_group_to_either_host_or_vfio_array \
            "${int_iommu_group_id}" "${2}" "${3}" "${4}" "${5}"; then
            log_warn "Could not add IOMMU group ID '${int_iommu_group_id}' to "\
              "collections."

            return 1
          fi
      done

      log_output "Added IOMMU group ID '${int_iommu_group_id}' to collections."
      return 0
    }

  #
  # DESC:   Add IOMMU group to either Host or VFIO array.
  # $1:     the IOMMU group ID as an int.
  # $2:     the reserved IOMMU groups for Host as an array reference.
  # $3:     the reserved IOMMU groups with VGA for Host as an array reference.
  # $4:     the reserved IOMMU groups for VFIO as an array reference.
  # $5:     the reserved IOMMU groups with VGA for VFIO as an array reference.
  # RETURN: If IOMMU group ID is valid, referenced arrays are valid, and IOMMU group
  #         is added, return 0.
  #         If else, return 1.
  #         If an exception occurs, return 2.
  #
    function add_iommu_group_to_either_host_or_vfio_array
    {
      local -r str_warn="Could not add IOMMU group to Host or VFIO collection."

      local -ir int_iommu_group_id="${1}"

      if ! is_array "${5}"; then
        log_invalid_parameter "5"
        log_warn "${str_warn}"
        return 2
      fi

      if ! is_array "${4}"; then
        log_invalid_parameter "4"
        log_warn "${str_warn}"
        return 2
      fi

      if ! is_array "${3}"; then
        log_invalid_parameter "3"
        log_warn "${str_warn}"
        return 2
      fi

      if ! is_array "${2}"; then
        log_invalid_parameter "2"
        log_warn "${str_warn}"
        return 2
      fi

      if ! is_iommu_group_id_valid "${int_iommu_group_id}"; then
        log_warn "${str_warn}"
        return 2
      fi

      if does_iommu_group_have_vga_device "${int_iommu_group_id}"; then
        if ! add_iommu_group_to_either_with_or_without_vga_array \
            "${int_iommu_group_id}" "${2}" "${3}"; then
          log_warn "Could not add IOMMU group ID '${int_iommu_group_id}' to Host "\
            "collections."

          return 1
        fi

        log_output "Added IOMMU group ID '${int_iommu_group_id}' to Host collections."
      else
        if ! add_iommu_group_to_either_with_or_without_vga_array \
            "${int_iommu_group_id}" "${4}" "${5}"; then
          log_warn "Could not add IOMMU group ID '${int_iommu_group_id}' to VFIO "\
            "collections."

          return 1
        fi

        log_output "Added IOMMU group ID '${int_iommu_group_id}' to VFIO collections."
      fi

      return 0
    }

  #
  # DESC:   Add IOMMU group ID to array(s) with or without VGA.
  # $1:     the IOMMU group ID as an int.
  # $2:     the reference of the array of IOMMU groups.
  # $2:     the reference of the array of IOMMU groups with VGA.
  # RETURN: If IOMMU group ID is valid, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function add_iommu_group_to_either_with_or_without_vga_array
    {
      local -r str_warn="Could not add IOMMU group to collection."

      if ! is_array "${3}"; then
        log_invalid_parameter "3"
        log_warn "${str_warn}"
        return 2
      fi

      if ! is_array "${2}"; then
        log_invalid_parameter "2"
        log_warn "${str_warn}"
        return 2
      fi

      local -ir int_iommu_group_id="${1}"

      if ! is_iommu_group_id_valid "${int_iommu_group_id}"; then
        log_invalid_parameter "int_iommu_group_id"
        log_warn "${str_warn}"
        return 2
      fi

      if does_iommu_group_have_vga_device "${int_iommu_group_id}" \
        && ! add_to_array "${2}" "${int_iommu_group_id}"; then
        log_warn "Could not add IOMMU group ID '${int_iommu_group_id}' to VGA "\
          "collection."

        return 1
      fi

      log_output "Added IOMMU group ID '${int_iommu_group_id}' to VGA collection."

      if ! add_to_array "${1}" "${int_iommu_group_id}"; then
        log_warn "Could not add IOMMU group ID '${int_iommu_group_id}' to collection."
        return 1
      fi

      log_output "Added IOMMU group ID '${int_iommu_group_id}' to collection."
      return 0
    }

  #
  # DESC:   Add IOMMU group to either Host or VFIO array.
  # $1:     the IOMMU group ID as an int.
  # $2:     the reserved IOMMU groups for Host as an array reference.
  # $3:     the reserved IOMMU groups with VGA for Host as an array reference.
  # $4:     the reserved IOMMU groups for VFIO as an array reference.
  # $5:     the reserved IOMMU groups with VGA for VFIO as an array reference.
  # RETURN: If IOMMU group ID is valid, referenced arrays are valid, and IOMMU group
  #         is added, return 0.
  #         If else, return 1.
  #         If an exception occurs, return 2.
  #
    function add_some_iommu_groups_to_array
    {
      local -r str_warn="Could not add IOMMU groups to collection."

      if ! is_array "${5}"; then
        log_invalid_parameter "5"
        log_warn "${str_warn}"
        return 2
      fi

      if ! is_array "${4}"; then
        log_invalid_parameter "4"
        log_warn "${str_warn}"
        return 2
      fi

      if ! is_array "${3}"; then
        log_invalid_parameter "3"
        log_warn "${str_warn}"
        return 2
      fi

      if ! is_array "${2}"; then
        log_invalid_parameter "2"
        log_warn "${str_warn}"
        return 2
      fi

      local -ir int_iommu_group_id="${1}"
      local -a arr_iommu_groups_temp=( )

      if ! is_iommu_group_id_parsable "${int_iommu_group_id}" \
        "arr_iommu_groups_temp"; then
        log_invalid_parameter "int_iommu_group_id"
        log_warn "${str_warn}"
        return 2
      fi

      arr_iommu_groups_temp=( \
        $( sort --human-numeric-sort --unique <<<"${arr_iommu_groups_temp[*]}" ) \
      )

      for int_iommu_group_id in ${arr_iommu_groups_temp[@]}; do
        if ! add_unspecified_iommu_group_to_either_host_or_vfio_array \
          "${int_iommu_group_id}" "${2}" "${3}" "${4}" "${5}"; then
          log_warn "Could not add IOMMU groups to collection."
          return 1
        fi
      done

      log_output "Added IOMMU group IDs to collection."
      return 0
    }

  #
  # DESC:   Add IOMMU group to either Host or VFIO array if not specified.
  # $1:     the IOMMU group ID as an int.
  # $2:     the reserved IOMMU groups for Host as an array reference.
  # $3:     the reserved IOMMU groups with VGA for Host as an array reference.
  # $4:     the reserved IOMMU groups for VFIO as an array reference.
  # $5:     the reserved IOMMU groups with VGA for VFIO as an array reference.
  # RETURN: If IOMMU group ID is valid, referenced arrays are valid, and IOMMU group
  #         is added, return 0.
  #         If else, return 1.
  #         If an exception occurs, return 2.
  #
    function add_unspecified_iommu_group_to_either_host_or_vfio_array
    {
      local -r str_warn="Could not add IOMMU group to collection."

      if ! is_array "${5}"; then
        log_invalid_parameter "5"
        log_warn "${str_warn}"
        return 2
      fi

      if ! is_array "${4}"; then
        log_invalid_parameter "4"
        log_warn "${str_warn}"
        return 2
      fi

      if ! is_array "${3}"; then
        log_invalid_parameter "3"
        log_warn "${str_warn}"
        return 2
      fi

      if ! is_array "${2}"; then
        log_invalid_parameter "2"
        log_warn "${str_warn}"
        return 2
      fi

      local -ir int_iommu_group_id="${1}"

      if ! is_iommu_group_id_valid "${int_iommu_group_id}"; then
        log_invalid_parameter "int_iommu_group_id"
        log_warn "${str_warn}"
        return 2
      fi

      for int_this_iommu_group_id in $( ls /sys/kernel/iommu_groups/ | \
        sort --numeric-sort ); do
        if [[ "${int_this_iommu_group_id}" -ne "${int_iommu_group_id}" ]]; then
          if ! add_iommu_group_to_either_with_or_without_vga_array \
            "${int_iommu_group_id}" "${2}" "${3}"; then
            log_warn "Could not add IOMMU group ID '${int_iommu_group_id}' to Host"\
              "collections."

            return 1
          fi

          log_output "Added IOMMU group ID '${int_iommu_group_id}' to Host collections."
        else
          if ! add_iommu_group_to_either_with_or_without_vga_array \
            "${int_iommu_group_id}" "${4}" "${5}"; then
            log_warn "Could not add IOMMU group ID '${int_iommu_group_id}' to VFIO"\
              "collections."

            return 1
          fi

          log_output "Added IOMMU group ID '${int_iommu_group_id}' to VFIO collections."
        fi
      done

      return 0
    }

  #
  # DESC:   Does Host machine not have an existing VFIO setup.
  # RETURN: If true, return 0.
  #         If false, return 1.
  #
    function does_host_not_have_existing_vfio_setup
    {
      for int_iommu_group_id in $( ls /sys/kernel/iommu_groups/ | \
        sort --numeric-sort ); do
        if ! is_iommu_group_not_binded_to_vfio "${int_iommu_group_id}"; then
          print_and_log_warn "Host machine does have an existing VFIO setup."
          return 1
        fi
      done

      log_output "Host machine does not have an existing VFIO setup."
      return 0
    }

  #
  # DESC:   Does IOMMU group contain any external devices.
  # $1:     the IOMMU group ID as an int.
  # RETURN: If IOMMU group contains one or more external devices, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function does_iommu_group_have_external_devices
    {
      local -r str_warn="Could not determine if IOMMU group has an external device."
      local -ir int_iommu_group_id="${1}"

      if ! is_iommu_group_id_valid "${int_iommu_group_id}"; then
        log_invalid_parameter "int_iommu_group_id"
        log_warn "${str_warn}"
        return 2
      fi

      local -a arr_device_slot_id="$( \
        ls "/sys/kernel/iommu_groups/${int_iommu_group_id}/devices" \
      )"

      for str_device_slot_id in ${arr_device_slot_id[@]}; do
        if is_device_external "${str_device_slot_id}"; then
          log_output "IOMMU group '${int_iommu_group_id}' contains external devices."
          return 0
        fi
      done

      log_warn "IOMMU group '${int_iommu_group_id}' does not contain external "\
        "devices."

      return 1
    }

  #
  # DESC:   Does IOMMU group contain any VGA devices.
  # $1:     the IOMMU group ID as an int.
  # RETURN: If IOMMU group contains one or more VGA devices, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function does_iommu_group_have_vga_device
    {
      local -r str_warn="Could not determine if IOMMU group has a VGA device."
      local -ir int_iommu_group_id="${1}"

      if ! is_iommu_group_id_valid "${int_iommu_group_id}"; then
        log_invalid_parameter "int_iommu_group_id"
        log_warn "${str_warn}"
        return 2
      fi

      local -a arr_device_slot_id="$( \
        ls "/sys/kernel/iommu_groups/${int_iommu_group_id}/devices" \
      )"

      for str_device_slot_id in ${arr_device_slot_id[@]}; do
        if is_device_vga "${str_device_slot_id}"; then
          return 0
        fi
      done

      log_warn "Please enter a valid IOMMU group ID which contains one or more VGA "\
        "devices."

      return 1
    }

  #
  # DESC:   Is IOMMU group ID parsable.
  # $1:     the IOMMU group ID range as a string or the IOMMU group ID as an int.
  # $2:     the reference of an array of IOMMU group IDs.
  # RETURN: If IOMMU group ID(s) can be parsed, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function is_iommu_group_id_parsable
    {
      local -n ref_arr_iommu_group_id_parsable="${2}"
      local -i int_iommu_group_id=0
      local str_iommu_group_id_range=""

      if ! is_array "${ref_arr_iommu_group_id_parsable}"; then
        log_invalid_parameter "int_iommu_group_id"
        log_warn "Cannot parse IOMMU group collection."
        return 2
      fi

      if is_iommu_group_id_valid "${1}"; then
        int_iommu_group_id="${1}"
      else
        str_iommu_group_id_range="${1}"
      fi

      local -r str_regex_numbers_range='^[0-9]+[-][0-9]+$'

      if echo "${str_iommu_group_id_range}" | \
        grep --extended-regexp --quiet "${str_regex_numbers_range}"; then

        local -i int_range_start=$( \
          echo "${str_iommu_group_id_range}" \| cut --delimiter '-' --fields 1 \
        )

        local -i int_range_stop=$( \
          echo "${str_iommu_group_id_range}" | cut --delimiter '-' --fields 2 \
        )

        if ! is_iommu_group_id_valid "${int_range_start}" \
          || ! is_iommu_group_id_valid "${int_range_stop}"; then
          log_warn "Invalid IOMMU group ID range."
          return 1
        fi

        ref_arr_iommu_group_id_parsable+=( $( seq "${range_start}" "${range_stop}" ) )
        log_output "Parsed IOMMU group ID range."

      elif is_int "${int_iommu_group_id}"; then
        if ! is_iommu_group_id_valid "${int_iommu_group_id}"; then
          log_warn "Cannot parse IOMMU group ID '${int_iommu_group_id}'."
          return 1
        fi

        ref_arr_iommu_group_id_parsable+=( "${int_iommu_group_id}" )
        log_output "Parsed IOMMU group ID."

      else
        log_warn "Invalid IOMMU group ID(s)."
        return 1
      fi

      return 0
    }

  #
  # DESC:   Are all devices within IOMMU group not binded to VFIO.
  # $1:     the IOMMU group ID as an int.
  # RETURN: If all devices are not binded to VFIO, return 0.
  #         If any device is binded to VFIO, return 1.
  #         If an exception occurs, return 2.
  #
    function is_iommu_group_not_binded_to_vfio
    {
      local -ir int_iommu_group_id="${1}"

      if ! is_iommu_group_id_valid "${int_iommu_group_id}"; then
        log_invalid_parameter "int_iommu_group_id"
        log_warn "Could not determine if IOMMU group is binded to VFIO."
        return 2
      fi

      local -a arr_device_slot_id="$( \
        ls "/sys/kernel/iommu_groups/${int_iommu_group_id}/devices" \
      )"

      for str_device_slot_id in ${arr_device_slot_id[@]}; do
        if is_device_not_binded_to_vfio "${str_device_slot_id}"; then
          log_warn "IOMMU group '${int_iommu_group_id}' is binded to VFIO."
          return 1
        fi
      done

      log_output "IOMMU group '${int_iommu_group_id}' is not binded to VFIO."
      return 0
    }

  #
  # DESC:   Is IOMMU group ID valid.
  # $1:     the IOMMU group ID as an int.
  # RETURN: If the IOMMU group ID is an int and between 0 and the max value, return 0.
  #         If else, return 1.
  #         If an exception occurs, return 2.
  #
    function is_iommu_group_id_valid
    {
      local -ir int_iommu_group_id="${1}"

      if ! is_int "${int_iommu_group_id}" \
        || [[ "${int_iommu_group_id}" -lt 0 ]]; then
        log_invalid_parameter "int_iommu_group_id"
        log_warn "Value is not a valid IOMMU group ID."
        return 2
      fi

      local -i int_last_iommu_group_id="$( \
        ls "/sys/kernel/iommu_groups/" | sort --numeric-sort --reverse | head --lines 1
      )"

      if [[ "${int_iommu_group_id}" -gt "${int_last_iommu_group_id}" ]]; then
        log_warn "Value '${int_iommu_group_id}' is not a valid IOMMU group "\
          "ID. Values must be between '0' and '${int_last_iommu_group_id}'."

        return 1
      fi

      log_output "Value '${int_iommu_group_id}' is a valid IOMMU group ID."
      return 0
    }

  #
  # DESC:   Is valid array of IOMMU groups.
  # $1:     the IOMMU groups as an array reference.
  # RETURN: If the array is valid, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function is_iommu_group_id_array_valid
    {
      local -n ref_arr_iommu_group_id_valid="${1}"

      if ! is_array "${ref_arr_iommu_group_id_valid}"; then
        log_invalid_parameter "ref_arr_iommu_group_id_valid"
        log_warn "Cannot determine if IOMMU group collection is valid."
        return 2
      fi

      for var_iommu_group_id in ${ref_arr_iommu_group_id_valid[@]}; do
        if ! is_iommu_group_id_valid "${var_iommu_group_id}"; then
          log_warn "IOMMU group collection is not valid."
          return 1
        fi
      done

      log_output "IOMMU group collection is valid."
      return 0
    }