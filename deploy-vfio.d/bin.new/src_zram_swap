#!/bin/false

#
# Filename:       src_zram_swap
# Description:    Logic to update and install ZRAM Swap.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [x] develop.
# - [ ] test.
#

#
# sources
#
  declare -g SRC_STR_SCRIPT_DIR="/usr/local/bin/"
  declare -g SRC_STR_SCRIPT_BIN_DIR="${SRC_STR_SCRIPT_DIR}deploy-vfio.d/"

  source "${SRC_STR_SCRIPT_BIN_DIR}src_print"
  source "${SRC_STR_SCRIPT_BIN_DIR}src_memory"

#
# logic
#
  #
  # DESC:   Checks if git repo exists.
  # RETURN: If repo exists, return 0.
  #         If not, return 1.
  #
    function does_zram_swap_repo_exist
    {
      log_stdout "${0}: ${FUNCNAME}"

      local -r str_last_dir="$( pwd )"
      does_this_git_repo_exist "ZRAM Swap" "github.com/foundObjects/zram-swap"
      cd "${str_last_dir}"
    }

  #
  # DESC:   Install ZRAM Swap
  # $1:     do force restart all ZRAM Swap devices.
  # RETURN: If ZRAM Swap installed successfully, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function install_zram_swap
    {
      log_stdout "${0}: ${FUNCNAME}"

      local bool_do_force_restart="${1}"

      if ! is_bool "${bool_do_force_restart}"; then
        log_invalid_parameter "bool_do_force_restart"
        return 1
      fi

      if ! does_zram_swap_repo_exist; then
        print_output_to_log "Install skipped."
        return 2
      fi

      local -r str_project_path="${STR_GIT_STR_REPO_PARENT_PATH}/zram-swap"

      cd "${str_project_path}"
      print "Installing ZRAM Swap...\n"
      sudo bash install.sh --install

      local -i int_code="${?}"

      echo

      if [[ "${int_code}" -ne 0 ]] \
        || ! modify_zram_swap_configuration \
          "${bool_do_force_restart}" \
          "${bool_do_force_restart}" \
          "${bool_do_force_restart}" \
        || ! enable_zram_swap_device "${bool_do_force_restart}"; then
        print_error_to_log "Install failed."
        return "${int_code}"
      fi

      print_output_to_log "Install successful."
      return 0
    }

  #
  # DESC:   Set ZRAM Swap fraction size.
  # $1:     the fraction as a string reference.
  # $2:     do use the default fraction value.
  # RETURN: If ZRAM Swap fraction size is valid, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function set_zram_swap_fraction
    {
      log_stdout "${0}: ${FUNCNAME}"

      local -n ref_beta_str_fraction="${1}"
      local bool_do_use_default="${2}"
      local -r str_default_fraction="1/2"

      if ! is_bool "${bool_do_use_default}"; then
        log_invalid_parameter "bool_do_use_default"
        return 2
      fi

      if ! is_host_memory_sufficient_for_zram_swap; then
        return 2
      fi

      if "${bool_do_use_default}"; then
        ref_beta_str_fraction="${str_default_fraction}"
        print_output_to_log "Set fraction to default: ${str_default_fraction}"
        return 0
      fi

      if ! is_absolute_of_fraction_less_than_one "${ref_beta_str_fraction}"; then
        return 1
      fi

      log_stdout "Fraction: ${ref_beta_str_fraction}"
      return 0
    }

  #
  # DESC:   Get ZRAM Swap value by user input.
  # $1:     the fraction as a string reference.
  # $2:     do use the default fraction value.
  # RETURN: If ZRAM Swap value is valid, return 0.
  #         If not, return 1.
  #
    function set_zram_swap_fraction_prompt
    {
      log_stdout "${0}: ${FUNCNAME}"

      local -n ref_alpha_str_fraction="${1}"
      local bool_do_use_default="${2}"
      local -r str_default_fraction="1/2"

      if ! is_bool "${bool_do_use_default}"; then
        log_invalid_parameter "bool_do_use_default"
        return 2
      fi

      if ! is_string "${1}"; then
        log_invalid_parameter "1"
        return 2
      fi

      if "${bool_do_use_default}"; then
        set_zram_swap_fraction "${ref_alpha_str_fraction}" "${ref_alpha_str_fraction}"
        return 0
      fi

      for int_counter in $( seq 0 2 ); do
        read -r -p "Set fraction of total memory for zram-swap to use " \
          "(to calculate default, enter 'default'): " \
          ref_alpha_str_fraction

        if [[ "${ref_alpha_str_fraction}" == "default" ]]; then
          bool_do_use_default=true
        fi

        if set_zram_swap_fraction "${ref_alpha_str_fraction}" \
          "${bool_do_use_default}"; then
          return 0
        fi
      done

      print_error_to_log "Not a fraction or invalid input."
      return 1
    }

  #
  # DESC:   Modify configuration files for ZRAM Swap.
  # $1:     do use the default fraction value.
  # $2:     do force restart all ZRAM Swap devices.
  # $3:     do use calculated fraction value.
  # $4:     the fraction as a string.
  # RETURN: If output is valid and file is written, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function modify_zram_swap_configuration
    {
      log_stdout "${0}: ${FUNCNAME}"

      local str_fraction="${4}"
      local bool_do_force_restart="${1}"
      local bool_do_use_default_fraction="${2}"
      local bool_do_use_calculated_fraction="${3}"

      if is_string "${str_fraction}" \
        && ! is_fraction "${str_fraction}"; then
        log_invalid_parameter "str_fraction"
        return 2
      fi

      if ! is_bool "${bool_do_use_calculated_fraction}"; then
        log_invalid_parameter "bool_do_use_calculated_fraction"
        return 2
      fi

      if ! is_bool "${bool_do_use_default_fraction}"; then
        log_invalid_parameter "bool_do_use_default_fraction"
        return 2
      fi

      if ! is_bool "${bool_do_force_restart}"; then
        log_invalid_parameter "bool_do_force_restart"
        return 2
      fi

      local -r str_failed_output="Could not write output to ZRAM Swap configuration"\
        "file."

      if ! is_fraction "${str_fraction}"; then
        if "${bool_do_use_calculated_fraction}"; then
          if ! get_calulated_fraction "${str_fraction}"; then
            print_error_to_log "${str_failed_output}"
            return 1
          fi

        else
          if ! set_zram_swap_fraction_prompt "str_fraction" \
            "${bool_do_use_default_fraction}"; then
            print_error_to_log "${str_failed_output}"
            return 2
          fi
        fi

      else
        if ! is_absolute_of_fraction_less_than_one "${str_fraction}"; then
          print_error_to_log "${str_failed_output}"
          return 2
        fi
      fi

      local -r str_file_path="/etc/default/zram-swap"
      local str_line_to_match="_zram_fraction="

      if ! sed -i \
        '/'${str_line_to_match}'"*"/c\'${str_line_to_match}'"'${str_fraction}'"' \
        "${str_file_path}"; then
        print_error_to_log "${str_failed_output}"
        return 1
      fi

      print_output_to_log "Wrote output to ZRAM Swap configuration file."
      return 0
    }

  #
  # DESC:   Enable ZRAM Swap device.
  # $1:     do force restart all ZRAM Swap devices.
  # RETURN: If ZRAM Swap device is enabled, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function enable_zram_swap_device
    {
      log_stdout "${0}: ${FUNCNAME}"

      local bool_do_force_restart="${1}"

      if ! is_bool "${bool_do_force_restart}"; then
        log_invalid_parameter "bool_do_force_restart"
        return 1
      fi

      if ! "${bool_do_force_restart}" \
        && sudo swapon --verbose | grep zram &> /dev/null \
        && sudo swapon --verbose | grep zram &> /dev/null \
        && ! sudo swapon --verbose | grep zram | grep 0B &> /dev/null; then
        print_output_to_log "ZRAM Swap device(s) already in use. "\
          "Restart system to save changes."

        return 0
      fi

      if sudo swapon --verbose | grep zram &> /dev/null \
        && ! sudo swapoff /dev/zram* &> /dev/null; then
        print_error_to_log "Could not disable ZRAM Swap device(s)."
        return 2
      fi

      log_stdout "Disabled ZRAM Swap device(s)."

      if ! sudo systemctl daemon-reload &> /dev/null; then
        print_error_to_log "Could not update Systemd."
        return 2
      fi

      log_stdout "Updated Systemd."

      if ! sudo systemctl restart zram-swap &> /dev/null; then
        print_error_to_log "Could not restart ZRAM Swap service."
        return 2
      fi

      log_stdout "Restarted ZRAM Swap service."

      if ! sudo swapon --verbose | grep zram &> /dev/null; then
        print_error_to_log "Could not enable ZRAM Swap device(s)."
        return 1
      fi

      log_stdout "Enabled ZRAM Swap device(s)."
      return 0
    }

  #
  # DESC:   Get the calculated fraction.
  # $1:     the fraction as a string reference.
  # RETURN: If fraction is valid, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function get_calulated_fraction
    {
      log_stdout "${0}: ${FUNCNAME}"
      log_stdout "Calculating fraction value."

      local -n ref_alpha_str_fraction="${1}"

      if ! is_reference "${1}"; then
        log_invalid_parameter "1"
        return 2
      fi

      local -ir int_zram_swap_available_memory=$(( \
        SRC_MEMORY_INT_CURRENT_FREE_MEMORY_BYTES / 2 \
      ))

        #
        # NOTE: First evaluate the ratio of max system memory to the zram-swap
        # available memory, as a decimal to the hundredths place.
        # Then truncate the decimal and return an integer.
        #
        local -r str_max_and_available_memory_fraction=""\
          "${SRC_MEMORY_INT_MAX_FREE_MEMORY_BYTES}/${int_zram_swap_available_memory}"

        local -i int_denominator=$( printf "%.0f" \
          $( echo "scale=2;${str_max_and_available_memory_fraction}" | bc ) \
        )

        #
        # NOTE: If denominator is odd, subtract one.
        #
        if [[ $( expr ${int_denominator} % 2 ) -eq 1 ]]; then
          (( int_denominator-- ))
        fi

        log_stdout "Denominator: ${int_denominator}"

        if [[ "${int_denominator}" -le 1 ]]; then
          log_stderr "Denominator is less than or equal to one."
          return 1
        fi

        ref_alpha_str_fraction="1/${int_denominator}"
        return 0
    }