#!/bin/false

#
# Filename:       src_iommu_parse
# Description:    Getters for IOMMU group device information.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# sources
#
  declare -g SRC_STR_SCRIPT_DIR="/usr/local/bin/"
  declare -g SRC_STR_SCRIPT_BIN_DIR="${SRC_STR_SCRIPT_DIR}deploy-vfio.d/"

  source "${SRC_STR_SCRIPT_BIN_DIR}src_print"

#
# logic
#
  #
  # DESC:   Get device class.
  # $1:     the device info as a string.
  # $2:     the reference variable.
  # RETURN: If device class is found, return 0.
  #         If not, return 1.
  #
    function get_device_class
    {
      local -r str_device="${1}"
      local -n ref="${2}"

      ref="$( lspci -ms ${str_device} | cut --delimiter '"' --fields 2 )"
    }

  #
  # DESC:   Get the device driver.
  # $1:     the device info as a string.
  # $2:     the reference variable.
  # $3:     the reference of dictionary of device drivers from XML file.
  # RETURN: If device driver is found, return 0.
  #         If not, return 1.
  #
    function get_device_driver
    {
      local bool_do_parse_from_xml_file=false

      if ! is_dict "${3}"; then
        bool_do_parse_from_xml_file=false

        print_output_to_log "Missing dictionary of device drivers from XML file."\
          "Parsing from internal database."
      else
        bool_do_parse_from_xml_file=true

        print_output_to_log "Parsing from XML file."
      fi

      if ! is_string "${2}"; then
        print_error_to_log "Invalid reference."
        return 1
      fi

      if ! is_string "${1}"; then
        print_error_to_log "Invalid device."
        return 1
      fi

      local -r str_device="${1}"
      local -n ref="${2}"
      local -n ref_dict_device_drivers_from_xml_file="${3}"

      if "${bool_do_parse_from_xml_file}"; then
        ref="${ref_dict_device_drivers_from_xml_file["${str_device}"]}"

        if ! dict_contains_key "ref_dict_device_drivers_from_xml_file" \
          "${str_device}" &> /dev/null; then
          print_error_to_log "Could not find device driver from XML file."
          return 1
        fi

      else
        ref="$( \
          lspci -ks "${str_device}" | grep --ignore-case "driver" | \
          awk 'END {print $5}' \
        )"
      fi

      return 0
    }

  #
  # DESC:   Get device hardware ID.
  # $1:     the device info as a string.
  # $2:     the reference variable.
  # RETURN: If device hardware ID is found, return 0.
  #         If not, return 1.
  #
    function get_device_hardware_id
    {
      local -r str_device="${1}"
      local -n ref="${2}"

      ref="$( lspci -ns ${str_device} | cut --delimiter ' ' --fields 3 )"
    }

  #
  # DESC:   Get device name.
  # $1:     the device info as a string.
  # $2:     the reference variable.
  # RETURN: If device name is found, return 0.
  #         If not, return 1.
  #
    function get_device_name
    {
      local -r str_device="${1}"
      local -n ref="${2}"

      ref="$( lspci -ms ${str_device}  | cut --delimiter '"' --fields 6 )"
    }

  #
  # DESC:   Get device vendor.
  # $1:     the device info as a string.
  # $2:     the reference variable.
  # RETURN: If device vendor is found, return 0.
  #         If not, return 1.
  #
    function get_device_vendor
    {
      local -r str_device="${1}"
      local -n ref="${2}"

      ref="$( lspci -ms ${str_device} | cut --delimiter '"' --fields 4 )"
    }

  #
  # DESC:   
  # $1:     
  # $2:     
  # RETURN: 
  #
    function get_enums_for_selection
    {
      local -n reference="${1}"
      local -n driver_reference="${2}"
      local -n stud_hwid_reference="${3}"
      local -n vfio_hwid_reference="${4}"

      for iommu_group_id in ${reference[@]}; do
        local -a device_list="$( eval "${SRC_IOMMU_STR_GET_DEVICES_FOR_IOMMU_GROUP}" )"

        for device in ${device_list[@]}; do
          local driver=""
          local hwid=""

          get_device_driver "${device}" "driver"
          get_device_hardware_id "${device}" "hwid"

          if [[ ! -z "${driver}" ]] \
            && is_device_not_excluded "${device}"; then
            driver_reference+=( "${driver}" )
          fi

          if [[ ! -z "${hwid}" ]]; then
            if is_device_for_pci_stub "${device}"; then
              stud_hwid_reference+=( "${hwid}" )
            else
              vfio_hwid_reference+=( "${hwid}" )
            fi
          fi
        done
      done

      driver_reference=( $( sort --unique <<<"${driver_reference[*]}" ) )
      stud_hwid_reference=( $( sort --unique <<<"${stud_hwid_reference[*]}" ) )
      vfio_hwid_reference=( $( sort --unique <<<"${vfio_hwid_reference[*]}" ) )

      if is_enum_not_empty "driver_reference"; then
        return 0
      fi

      if ! is_enum_not_empty "stud_hwid_reference" \
        && ! is_enum_not_empty "vfio_hwid_reference"; then
        return 0
      fi

      print_error_to_log "No drivers or hardware IDs found for selection."
      return 1
    }

  #
  # DESC:   
  # $1:     
  # $2:     
  # RETURN: 
  #
    function get_name_for_first_vga_device_in_iommu_group
    {
      if [[ -z "${2}" ]] \
        || ! is_int "${1}" &> /dev/null; then
        return 1
      fi

      local -ir int_iommu_group_id="${1}"
      local -n device_name="${2}"
      local -ar device_list="$( eval "${SRC_IOMMU_STR_GET_DEVICES_FOR_IOMMU_GROUP}" )"
      local name=""

      for device in ${device_list[@]}; do
        if ! is_device_vga "${device}"; then
          continue
        fi

        get_device_name "${device}" "device_name" && break
      done

      if [[ -z "${NAME}" ]]; then
        print_error_to_log "Could not find device name of any VGA device in IOMMU group ${IOMMU_GROUP_ID}."
        return 1
      fi

      device_name="${NAME}"
    }