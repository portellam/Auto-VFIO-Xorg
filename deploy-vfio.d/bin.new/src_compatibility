#!/bin/false

#
# Filename:       src_compatibility
# Description:    System checks and validation.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [ ] test.
#

#
# sources
#
  declare -g SRC_STR_SCRIPT_DIR="/usr/local/bin/"
  declare -g SRC_STR_SCRIPT_BIN_DIR="${SRC_STR_SCRIPT_DIR}deploy-vfio.d/"

  source "${SRC_STR_SCRIPT_BIN_DIR}src_print"

#
# setter logic
#
  #
  # DESC: globals
  #
    function set_globals
    {
      log_stdout "${0}: ${FUNCNAME}"

      if [[ "${SRC_COMPATIBILITY_BOOL_SET_GLOBALS}" == true ]]; then
        return 0
      fi

      declare -g SRC_COMPATIBILITY_BOOL_SET_GLOBALS=true

      declare SRC_COMPATIBILITY_BOOL_DO_IGNORE_DISTRO="${HOME}/git"
    }

#
# Argument logic
#
  #
  # DESC:   Set flag to true if argument is passed.
  # RETURN: If true, return 0. If false, return 1.
  #
    function is_option_ignore_distro
    {
      log_stdout "${0}: ${FUNCNAME}"

      if [[ "${1}" != "--ignore-distro" ]]; then
        SRC_COMPATIBILITY_BOOL_DO_IGNORE_DISTRO=false
        print_output_to_log "Enabled system distribution check."
        return 1
      fi

      print_output_to_log "Disabled system distribution check."
      SRC_COMPATIBILITY_BOOL_DO_IGNORE_DISTRO=true
      return 0
    }

  #
  # DESC:   Call option logic.
  # RETURN: If true, return 0. If false, return 1.
  #
    function is_option_of_compatibility
    {
      log_stdout "${0}: ${FUNCNAME}"

      is_option_ignore_distro || return 1
      return 0
    }

#
# Logic
#
  #
  # DESC:   Is Linux distribution supported.
  # RETURN: If true, return 0. If false, return 1.
  #
    function is_distribution_supported
    {
      log_stdout "${0}: ${FUNCNAME}"

      if "${SRC_COMPATIBILITY_BOOL_DO_IGNORE_DISTRO}"; then
        print_output_to_log "Skipped system distribution check."
        return 0
      fi

      local -r str_operating_system="$( lsb_release --id --short )"
      local -lr str_operating_system_lowercase="${str_operating_system}"

      if [[ "${str_operating_system_lowercase}" != *"debian"* ]] \
        && [[ "${str_operating_system_lowercase}" != *"ubuntu"* ]]; then
        print_error_to_log "System distribution " \
          "'${str_operating_system_lowercase}' is not explicitly supported."

        return 1
      fi
    }

  #
  # DESC:   Is IOMMU support groups supported by the Host machine.
  # RETURN: If true, return 0. If false, return 1.
  #
    function is_iommu_enabled
    {
      log_stdout "${0}: ${FUNCNAME}"

      if ! compgen -G "/sys/kernel/iommu_groups/*/devices/*" &> /dev/null; then
        print_error_to_log "System does not support IOMMU groups."
        return 1
      fi

      print_output_to_log "System does support IOMMU groups."
      return 0
    }

  #
  # DESC:   Is given package installed as a command or in the APT package manager.
  # $1:     the package name as a string
  # RETURN: If true, return 0. If false, return 1.
  #
    function is_package_installed
    {
      log_stdout "${0}: ${FUNCNAME}"

      local str_package_name="${1}"

      if command -v "${str_package_name}" &> /dev/null; then
        return 0
      fi

      if ! sudo apt list --installed "${str_package_name}" | \
        grep "${str_package_name}" &> /dev/null; then
        return 1
      fi

      return 0
    }

  #
  # DESC:   Is the Host machine supported in general.
  # RETURN: If true, return 0. If false, return 1.
  #
    function is_system_supported
    {
      log_stdout "${0}: ${FUNCNAME}"

      if ! is_virtualization_enabled \
        || ! is_iommu_enabled \
        || ! is_systemd_installed \
        || ! is_xml_library_installed \
        || ! is_distribution_supported; then
        print_error_to_log "System is not supported."
        exit 1
      fi

      print_pass_to_log "System is supported."
      return 0
    }

  #
  # DESC:   Is Systemd installed (yuck!).
  # RETURN: If true, return 0. If false, return 1.
  #
    function is_systemd_installed
    {
      log_stdout "${0}: ${FUNCNAME}"

      if ! command -v systemd &> /dev/null; then
        print_error_to_log "'systemd' is not installed."
        return 1
      fi

      print_output_to_log "'systemd' is installed."
      return 0
    }

  #
  # DESC:   Is Virtualization enabled on the Host machine.
  # RETURN: If true, return 0. If false, return 1.
  #
    function is_virtualization_enabled
    {
      log_stdout "${0}: ${FUNCNAME}"

      if ! LC_ALL=C lscpu | grep --ignore-case Virtualization &> /dev/null \
        && ! grep --extended-regexp --quiet --color=auto 'vmx|svm|0xc0f' \
          /proc/cpuinfo &> /dev/null; then
        print_error_to_log "System does not or cannot support hardware " \
          "virtualization."

        return 1
      fi

      print_output_to_log "System supports hardware virtualization."
      return 0
    }

  #
  # DESC:   Is the required libraries installed.
  # RETURN: If true, return 0. If false, return 1.
  #
    function is_xml_library_installed
    {
      log_stdout "${0}: ${FUNCNAME}"

      if ! command -v "xmlstarlet" &> /dev/null; then
        print_error_to_log "Required XML libraries are not installed."

        print_output_to_log "To install, execute 'sudo apt install -y  \
          xmlstarlet'."

        return 1
      fi

      print_output_to_log "Required XML libraries are installed."
      return 0
    }

#
# main logic
#
  set_globals
  unset set_globals