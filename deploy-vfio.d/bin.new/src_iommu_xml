#!/bin/false

#
# Filename:       src_iommu_xml
# Description:    Parse IOMMU groups from XML file.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [ ] test.
# - [!] call functions in this class or src_iommu.
# - [x] redo comments.
# - [x] develop.
#

#
# sources
#
  declare -g SRC_STR_SCRIPT_DIR="/usr/local/bin/"
  declare -g SRC_STR_SCRIPT_BIN_DIR="${SRC_STR_SCRIPT_DIR}deploy-vfio.d/"

  source "${SRC_STR_SCRIPT_BIN_DIR}src_print"

#
# setter logic
#
  #
  # DESC:   Set the XML file name. If valid, set the boolean flag accordingly.
  # $1:     the XML file path as a string.
  # RETURN: If set, return 0.
  #         If false, return 1.
  #
    function set_iommu_groups_xml_file
    {
      local -r str_xml_file_path="${1}"

      if ! is_string "${str_xml_file_path}"; then
        print_and_log_warn "XML file is not set."
        return 1
      fi

      log_pass "XML file '${str_xml_file_path}' is set."
      return 0
    }

  #
  # DESC:   Set the XML file path to default.
  # $1:     the XML file path as a string reference.
  # RETURN: If set, return 0.
  #         If false, return 1.
  #
    function set_iommu_groups_xml_file_to_default
    {
      log_work "Setting XML file to default."

      local -n ref_str_xml_file_path="${1}"

      if ! is_not_readonly "${ref_str_xml_file_path}"; then
        print_and_log_warn "Cannot set XML file to default."
        return 1
      fi

      ref_str_xml_file_path="${SRC_BACKUPS_ETC_PATH}parse.xml"
      log_output "Set XML file to default."
      return 0
    }

#
# logic
#
  #
  # DESC:   Clean up the IOMMU database.
  # $1:     the XML file path as a string.
  # RETURN: If clean up is successful, return 1.
  #         If failed, return 1.
  #
    function cleanup_iommu_groups_xml_file
    {
      log_work "Cleaning-up XML file..."

      local -r str_warn="Could not clean-up XML file."
      local -r str_xml_file_path="${1}"

      if ! is_string "${str_xml_file_path}"; then
        log_invalid_parameter "str_xml_file_path"
        print_and_log_warn "${str_warn}"
        return 2
      fi

      if ! restore_temp_files_for_iommu_groups_xml_file "${str_xml_file_path}" \
        || ! delete_temp_files_for_iommu_groups_xml_file "${str_xml_file_path}"; then
        print_and_log_warn "${str_warn}"
        return 1
      fi

      print_and_log_warn "Clean-up of XML file '${str_xml_file_path}' successful."
      return 0
    }

  #
  # DESC:   Create temp files for IOMMU groups XML file.
  # $1:     the XML file path as a string.
  # RETURN: If temp files are created, return 0.
  #         If false, return 1.
  #
    function create_temp_files_for_iommu_groups_xml_file
    {
      log_work "Creating temp files for XML file..."

      local -r str_warn="Could not create temp files for XML file."
      local -r str_xml_file_path="${1}"

      if ! is_string "${str_xml_file_path}"; then
        log_invalid_parameter "str_xml_file_path"
        print_and_log_warn "${str_warn}"
        return 2
      fi

      if ! create_temp_file_of_file "${str_xml_file_path}"; then
        print_and_log_warn "${str_warn}"
        return 1
      fi

      log_pass "Created temp files for XML file '${str_xml_file_path}'."
      return 0
    }

  #
  # DESC:   Delete temp files for IOMMU groups XML file.
  # $1:     the XML file path as a string.
  # RETURN: If temp files are deleted, return 0.
  #         If false, return 1.
  #
    function delete_temp_files_for_iommu_groups_xml_file
    {
      log_work "Deleting temp files for XML file..."

      local -r str_warn="Could not delete temp files for XML file."
      local -r str_xml_file_path="${1}"

      if ! is_string "${str_xml_file_path}"; then
        log_invalid_parameter "str_xml_file_path"
        print_and_log_warn "${str_warn}"
        return 2
      fi

      if ! delete_temp_file_of_file "${str_xml_file_path}"; then
        print_and_log_warn "${str_warn}"
        return 1
      fi

      log_pass "Deleted temp files for XML file '${str_xml_file_path}'."
      return 0
    }

  #
  # DESC:   Export IOMMU database to XML file.
  # $1:     the XML file name as a string.
  # RETURN: If export is successful, return 0.
  #         If else, return 1.
  #         If an exception occurs, return 2.
  #
    function export_iommu_groups_to_xml_file
    {
      log_work "Exporting IOMMU groups from to file..."

      local -r str_warn="Cannot export IOMMU groups to XML file."
      local -r str_xml_file_name="${1}"

      if ! is_string "${str_xml_file_name}"; then
        log_invalid_parameter "str_xml_file_name"
        print_and_log_warn "${str_warn}"
        return 2
      fi

      local -r str_device_tag="device"
      local -r str_device_driver_tag="driver"
      local -r str_device_id_tag="device_id"
      local -r str_iommu_id_tag="iommu_id"

      local -a arr_xml_output=( )
      local -a arr_devices_output=( )

      local -r str_iommu_groups_path="/sys/kernel/iommu_groups/"

      for int_iommu_group_id in $( \
          ls -1v "${str_iommu_groups_path}" | sort --human-numeric-sort
        ); do

        local -a arr_this_device_output=( )

        local str_line_iommu_id="<${str_iommu_id_tag}>${int_iommu_group_id}"\
          "</${str_iommu_id_tag}>"

        for str_device in \
          $( ls "${str_iommu_groups_path}${int_iommu_group_id}/devices" ); do
          local str_device_driver="$( \
            lspci -ks ${str_device} | \grep --ignore-case "driver" | \
            cut --delimiter ' ' --fields 5 \
          )"

          local str_line_device_id="<${str_device_id_tag}>${str_device}"\
            "</${str_device_id_tag}>"

          local str_line_device_driver="<${str_device_driver_tag}>"\
            "${str_device_driver}</${str_device_driver_tag}>"

          arr_this_device_output+=(
            "\t<${str_device_tag}>"
            "\t\t${str_line_iommu_id}"
            "\t\t${str_line_device_id}"
            "\t\t${str_line_device_driver}"
            "\t</${str_device_tag}>"
          )
        done

        arr_devices_output+=( "${arr_this_device_output[@]}" )
      done

      local -r str_xml_tag="xml"

      arr_xml_output=(
        "<${str_xml_tag}>"
        "${arr_devices_output[@]}"
        "</xml>"
      )

      if ! overwrite_file "arr_xml_output" "${str_xml_file_name}"; then
        print_and_log_warn "${str_warn}"
        return 1
      fi

      print_and_log_output "Exported IOMMU groups to XML file '${str_xml_file_path}'."
      return 0
    }

  #
  # DESC:   Import IOMMU database from XML file.
  # $1:     the XML file path as a string.
  # $2:     the XML file device ID and driver dictionary.
  # RETURN: If import is successful or skipped, return 0.
  #         If file does not exist, or is empty, or does not contain valid XML,
  #         return 1.
  #
    function import_iommu_groups_from_xml_file
    {
      log_work "Importing IOMMU groups from XML file..."

      local -r str_warn="Cannot import IOMMU groups from XML file."
      local -n ref_dict_device_id_and_driver="${2}"

      if ! is_dict "${ref_dict_device_id_and_driver}"; then
        log_invalid_parameter "ref_dict_device_id_and_driver"
        print_and_log_warn "${str_warn}"
        return 2
      fi

      local -r str_xml_file_path="${1}"

      if ! is_string "${str_xml_file_path}"; then
        log_invalid_parameter "str_xml_file_path"
        print_and_log_warn "${str_warn}"
        return 2
      fi

      if ! is_file "${str_xml_file_path}"; then
        print_and_log_output "XML file does not exist."
        print_and_log_warn "${str_warn}"
        return 2
      fi

      if ! is_file_not_empty "${str_xml_file_path}"; then
        print_and_log_output "XML file is empty."
        print_and_log_warn "${str_warn}"
        return 2
      fi

      local -i int_counter=1

      while true; do
        local str_device_id=$( \
          xmlstarlet select --template --match \
          "//xml/device[${int_counter}]/str_device_id" --value-of . --nl \
          "${str_xml_file_path}" | awk 'END {print $1}'
        )

        local -l str_driver=$( \
          xmlstarlet select --template --match "//xml/device[${int_counter}]/driver" \
          --value-of . --nl "${str_xml_file_path}" | awk 'END {print $1}' \
        )

        if [[ "${str_driver}" == "vfio-pci" ]]; then
          print_and_log_output "Detected VFIO drivers in XML file."
          print_and_log_warn "${str_warn}"
          return 1
        fi

        if ! is_device_id_valid "${str_device_id}" &> /dev/null \
          || ! is_string "${str_device_id}" &> /dev/null; then
          break
        fi

        ref_dict_device_id_and_driver+=( \
          ["${str_device_id}"]="${str_driver}" \
        )

        (( int_counter++ ))
      done

      if ! is_dict_not_empty "ref_dict_device_id_and_driver" &> /dev/null; then
        print_and_log_warn "${str_warn}"
        return 1
      fi

      print_and_log_output "Imported IOMMU groups from XML file "\
        "'${str_xml_file_path}'."

      return 0
    }

  #
  # DESC:   Is IOMMU groups XML file created.
  # $1:     the XML file path as a string.
  # RETURN: If file is created, return 0.
  #         If false, return 1.
  #
    function is_iommu_groups_xml_file_created
    {
      local -r str_xml_file_path="${1}"

      if ! is_file "${str_xml_file_path}" \
        && ! sudo touch "${str_xml_file_path}"; then
        print_and_log_warn "Could not create IOMMU groups XML file "\
          "'${str_xml_file_path}'."

        return 1
      fi

      log_output "IOMMU groups XML file '${str_xml_file_path}' exists."
      return 0
    }

  #
  # DESC:   Is given XML file valid or not.
  # $1:     the XML file path as a string.
  # RETURN: If given XML file is valid, return 0.
  #         If false, return 1.'
  #         If any exception occurs, return 2.
  #
    function is_iommu_groups_xml_file_valid
    {
      local -r str_xml_file_path="${1}"

      if ! is_file "${str_xml_file_path}"; then
        print_and_log_warn "XML file does not exist."
        return 1
      fi

      if ! is_file_not_empty "${str_xml_file_path}"; then
        print_and_log_warn "XML file is empty."
        return 1
      fi

      if ! is_xmllint_installed; then
        print_and_log_warn "Cannot validate XML file."
        return 2
      fi

      if ! xmllint "${str_xml_file_path}" &> /dev/null; then
        print_and_log_warn "XML file is not valid."
        return 1
      fi

      log_output "XML file '${str_xml_file_path}' is valid."
      return 0
    }

  #
  # DESC:   Is given dependency installed.
  # RETURN: If given XML file is valid, return 0.
  #         If false, return 1.
  #
    function is_xmllint_installed
    {
      if is_package_installed "xmllint"; then
        return 1
      fi

      return 0
    }

  #
  # DESC:   Set flag to cross-reference the IOMMU groups from XML file.
  # $1:     do parse the XML file as bool reference.
  # RETURN: If flag is set already, return 0.
  #         If failed, return 1.
  #
    function set_flag_to_parse_iommu_groups_from_xml_file
    {
      local -n ref_bool_do_parse_xml_file="${1}"

      if ! is_bool "${1}"; then
        log_invalid_parameter "1"
        print_and_log_warn "IOMMU groups will not be parsed."
        return 2
      fi

      if ! ask_yes_or_no "Cross-reference database with XML file?"; then
        ref_bool_do_parse_xml_file=false
      else
        ref_bool_do_parse_xml_file=true
      fi

      if ! "${ref_bool_do_parse_xml_file}"; then
        print_and_log_output "IOMMU groups will be cross-referenced by XML file."
      else
        print_and_log_output "IOMMU groups will be not cross-referenced by XML file."
      fi

      return 0
    }

  #
  # DESC:   Prompt to specify existing XML file name.
  # $1:     the XML file path as a string reference.
  # RETURN: If specified file name is blank, return 0.
  #         If specified file exists, return 0.
  #         If else, return 1.
  #
    function specify_existing_iommu_groups_xml_file_prompt
    {
      local -r str_warn="XML file path is not specified."
      local -n ref_prompt_str_xml_file_path="${1}"

      if ! is_string "${1}"; then
        log_invalid_parameter "1"
        print_and_log_warn "${str_warn}"
        return 2
      fi

      local -r str_output="Enter XML file name (leave blank for default): "
      local -ir int_max_tries=2

      for int_counter in $( seq 0 "${int_max_tries}" ); do
          read -r -p "${str_output}" ref_prompt_str_xml_file_path

          if ! is_string "${ref_prompt_str_xml_file_path}"; then
            set_iommu_groups_xml_file_to_default "ref_prompt_str_xml_file_path"

            log_pass "XML file '${ref_prompt_str_xml_file_path}' is "\
              "specified and selected to be parsed."

            return 0
          fi

          if ! is_file "${ref_prompt_str_xml_file_path}" \
            || ! is_file_not_empty "${ref_prompt_str_xml_file_path}"; then
            continue
          fi

          set_iommu_groups_xml_file "${ref_prompt_str_xml_file_path}"

          log_pass "XML file '${ref_prompt_str_xml_file_path}' is "\
              "specified and selected to be parsed."

          return 0
        done

      print_and_log_warn "${str_warn}"
      return 1
    }

  #
  # DESC:   Parse the IOMMU database from XML file.
  # $1:     the XML file path as a string reference.
  # $2:     do parse from XML file.
  # RETURN: If file is specified and selected, return 0.
  #         If false, return 1.
  #
    function specify_iommu_groups_xml_file
    {
      local -r str_warn="XML file path is not specified."

      log_output "Specifying XML file path."

      local bool_do_parse_xml_file="${2}"

      if ! is_bool "${bool_do_parse_xml_file}" \
        && ! set_flag_to_parse_iommu_groups_from_xml_file "bool_do_parse_xml_file"
        then
        log_invalid_parameter "bool_do_parse_xml_file"
        print_and_log_warn "${str_warn}"
        return 2
      fi

      local -n ref_str_xml_file_path="${1}"

      if ! is_string "${1}"; then
        log_invalid_parameter "1"
        print_and_log_warn "${str_warn}"
        return 2
      fi

      if "${bool_do_parse_xml_file}" \
        && is_iommu_groups_xml_file_valid "${ref_str_xml_file_path}"; then
        print_and_log_output "XML file '${ref_str_xml_file_path}' is specified and "\
          "selected to be parsed."

        return 0
      fi

      if ! "${bool_do_parse_xml_file}" \
        && ! is_iommu_groups_xml_file_valid "${ref_str_xml_file_path}"; then
        set_iommu_groups_xml_file "${ref_str_xml_file_path}"

        print_and_log_output "The default XML file "\
          "'${ref_str_xml_file_path}'is selected to be parsed."

        return 0
      fi

      if ! specify_existing_iommu_groups_xml_file_prompt "ref_str_xml_file_path"; then
        return 1
      fi

      return 0
    }

  #
  # DESC:   Restore IOMMU groups XML file from temp file.
  # $1:     the XML file path as a string.
  # RETURN: If file is restored, return 0.
  #         If false, return 1.
  #
    function restore_temp_files_for_iommu_groups_xml_file
    {
      local -r str_xml_file_path="${1}"

      if ! copy_temp_file_to_file "${str_xml_file_path}"; then
        print_and_log_warn "Could not restore XML file '${str_xml_file_path}' from "\
          "temp file."

        return 1
      fi

      log_output "Restored XML file '${str_xml_file_path}' from temp file."
      return 0
    }