#!/bin/false

#
# Filename:       src_iommu_xml
# Description:    Parse IOMMU groups from XML file.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [ ] test.
# - [ ] call functions in this class or src_iommu.
# - [ ] redo comments.
#

#
# sources
#
  declare -g SRC_STR_SCRIPT_DIR="/usr/local/bin/"
  declare -g SRC_STR_SCRIPT_BIN_DIR="${SRC_STR_SCRIPT_DIR}deploy-vfio.d/"

  source "${SRC_STR_SCRIPT_BIN_DIR}src_print"

#
# setter logic
#
  #
  # DESC: globals
  #
    function set_globals
    {
      log_stdout "${0}: ${FUNCNAME}"

      if [[ "${SRC_IOMMU_XML_BOOL_SET_GLOBALS}" == true ]]; then
        return 0
      fi

      declare -g SRC_IOMMU_XML_BOOL_SET_GLOBALS=true

      declare -g SRC_IOMMU_XML_BOOL_DO_PARSE_IOMMU_GROUPS_FROM_XML_FILE=false
      declare -g SRC_IOMMU_XML_BOOL_XML_FILE_IS_SPECIFIED=false

      declare -gA SRC_IOMMU_XML_DICT_DEVICE_DRIVERS_FROM_XML_FILE

      declare -gr SRC_IOMMU_XML_STR_DEFAULT_XML_FILE=""\
        "${SRC_BACKUPS_ETC_PATH}parse.xml"                                            # TODO: create source file and define this!

      declare -g SRC_IOMMU_XML_STR_XML_FILE=""
    }

  #
  # DESC:   Set the XML file name. If valid, set the boolean flag accordingly.
  # $1:     the XML file name as a string.
  # RETURN: If specified, return 0. If false, return 1.
  #
    function set_iommu_groups_xml_file
    {
      log_stdout "${0}: ${FUNCNAME}"

      SRC_IOMMU_XML_STR_XML_FILE="${1}"

      if ! is_string "${SRC_IOMMU_XML_STR_XML_FILE}"; then
        SRC_IOMMU_XML_BOOL_XML_FILE_IS_SPECIFIED=false
        print_output_to_log "XML file is not specifed."
        return 1
      fi

      SRC_IOMMU_XML_BOOL_XML_FILE_IS_SPECIFIED=true
      print_output_to_log "XML file '${SRC_IOMMU_XML_STR_XML_FILE}' is specifed."
      return 0
    }

  #
  # DESC:   Set the XML file name to default.
  # $1:     the XML file name as a string.
  # RETURN: If specified, return 0. If false, return 1.
  #
    function set_iommu_groups_xml_file_to_default
    {
      log_stdout "${0}: ${FUNCNAME}"

      set_iommu_groups_xml_file "${SRC_IOMMU_XML_STR_DEFAULT_XML_FILE}"
    }

#
# logic
#
  #
  # DESC:   Clean up the IOMMU database.
  # RETURN: If clean up is successful, return 1.
  #         If failed, return 1.
  #
    function cleanup_iommu_groups_xml_file
    {
      log_stdout "${0}: ${FUNCNAME}"

      if ! restore_temp_files_for_iommu_groups_xml_file \
        || ! delete_temp_files_for_iommu_groups_xml_file; then
        print_error_to_log "Clean-up of XML file failed."
        return 1
      fi

      print_error_to_log "Clean-up of XML file successful."
      return 0
    }

  #
  # DESC:   Create temp files for IOMMU groups XML file.
  # RETURN: If temp files are created, return 0.
  #         If false, return 1.
  #
    function create_temp_files_for_iommu_groups_xml_file
    {
      log_stdout "${0}: ${FUNCNAME}"

      if ! create_temp_file_of_file "${SRC_IOMMU_XML_STR_XML_FILE}" &> /dev/null; then
        print_error_to_log "Could not create temp file for IOMMU groups XML file "\
          "'${SRC_IOMMU_XML_STR_XML_FILE}'".

        return 1
      fi

      log_stdout "Created temp file for IOMMU groups XML file "\
        "'${SRC_IOMMU_XML_STR_XML_FILE}'".
    }

  #
  # DESC:   Delete temp files for IOMMU groups XML file.
  # RETURN: If temp files are deleted, return 0.
  #         If false, return 1.
  #
    function delete_temp_files_for_iommu_groups_xml_file
    {
      log_stdout "${0}: ${FUNCNAME}"

      if ! delete_temp_file_of_file "${SRC_IOMMU_XML_STR_XML_FILE}" &> /dev/null; then
        print_error_to_log "Could not delete temp files for IOMMU groups XML file "\
          "'${SRC_IOMMU_XML_STR_XML_FILE}'".

        return 1
      fi

      log_stdout "Deleted temp files for IOMMU groups XML file "\
        "'${SRC_IOMMU_XML_STR_XML_FILE}'".
    }

  #
  # DESC:   Export IOMMU database to XML file.
  # $1:     the XML file name as a string.
  # RETURN: If export is successful, return 0.
  #         If else, return 1.
  #
    function export_iommu_groups_to_xml_file
    {
      log_stdout "${0}: ${FUNCNAME}"

      local -r str_xml_file_name="${1}"

      local -r str_device_tag="device"
      local -r str_device_driver_tag="driver"
      local -r str_device_id_tag="device_id"
      local -r str_iommu_id_tag="iommu_id"

      local -a arr_xml_output=( )
      local -a arr_devices_output=( )

      for int_iommu_group_id in $( \
          ls -1v /sys/kernel/iommu_groups/ | \
          sort --human-numeric-sort
        ); do

        local -a arr_this_device_output=( )

        local str_line_iommu_id="<${str_iommu_id_tag}>${int_iommu_group_id}"\
          "</${str_iommu_id_tag}>"

        for str_device in $( \
            eval "${SRC_IOMMU_XML_STR_SRC_IOMMU_STR_GET_DEVICES_FOR_IOMMU_GROUP}" \
          ); do
          local str_device_driver="$( \
            lspci -ks ${str_device} | \grep --ignore-case "driver" | \
            cut --delimiter ' ' --fields 5 \
          )"

          local str_line_device_id="<${str_device_id_tag}>${str_device}"\
            "</${str_device_id_tag}>"

          local str_line_device_driver="<${str_device_driver_tag}>"\
            "${str_device_driver}</${str_device_driver_tag}>"

          arr_this_device_output+=(
            "\t<${str_device_tag}>"
            "\t\t${str_line_iommu_id}"
            "\t\t${str_line_device_id}"
            "\t\t${str_line_device_driver}"
            "\t</${str_device_tag}>"
          )
        done

        arr_devices_output+=( "${arr_this_device_output[@]}" )
      done

      local -r str_xml_tag="xml"

      arr_xml_output=(
        "<${str_xml_tag}>"
        "${arr_devices_output[@]}"
        "</xml>"
      )

      if ! sudo echo -e "${arr_xml_output[*]}" > "${str_xml_file_name}"; then
        print_error_to_log "Could not write to file '${str_xml_file_name}'."
        return 1
      fi

      log_stdout "Wrote to file '${str_xml_file_name}'."
      return 0
    }

  #
  # DESC:   Import IOMMU database from XML file.
  # $1:     the XML file name as a string.
  # RETURN: If import is successful or skipped, return 0.
  #         If file does not exist, or is empty, or does not contain valid XML,
  #         return 1.
  #
    function import_iommu_groups_from_xml_file
    {
      log_stdout "${0}: ${FUNCNAME}"

      local -r str_xml_file_name="${1}"

      if ! is_file "${str_xml_file_name}" &> /dev/null; then
        print_error_to_log "XML file does not exist."
        return 1
      fi

      if ! is_file_not_empty "${str_xml_file_name}" &> /dev/null; then
        print_error_to_log "XML file is empty."
        return 1
      fi

      local -i int_counter=1

      while true; do
        local str_device_id=$( \
          xmlstarlet select --template --match \
          "//xml/device[${int_counter}]/str_device_id" --value-of . --nl \
          "${str_xml_file_name}" | awk 'END {print $1}'
        )

        local -l str_driver=$( \
          xmlstarlet select --template --match "//xml/device[${int_counter}]/driver" \
          --value-of . --nl "${str_xml_file_name}" | awk 'END {print $1}' \
        )

        if [[ "${str_driver}" == "vfio-pci" ]]; then
          print_error_to_log "Detected VFIO drivers in XML file."
          return 1
        fi

        if ! is_device_id_valid "${str_device_id}" &> /dev/null \
          || ! is_string "${str_device_id}" &> /dev/null; then
          break
        fi

        SRC_IOMMU_XML_DICT_DEVICE_DRIVERS_FROM_XML_FILE+=( \
          ["${str_device_id}"]="${str_driver}" \
        )

        (( int_counter++ ))
      done

      if ! is_enum_not_empty "SRC_IOMMU_XML_DICT_DEVICE_DRIVERS_FROM_XML_FILE" \
        &> /dev/null; then
        print_error_to_log "XML file is empty."
        return 1
      fi

      log_stdout "Parsed XML file."
      return 0
    }

  #
  # DESC:   Is IOMMU groups XML file created.
  # RETURN: If file is created, return 0.
  #         If false, return 1.
  #
    function is_iommu_groups_xml_file_created
    {
      log_stdout "${0}: ${FUNCNAME}"

      if ! is_file "${SRC_IOMMU_XML_STR_XML_FILE}" &> /dev/null \
        && ! sudo touch "${SRC_IOMMU_XML_STR_XML_FILE}"; then
        print_error_to_log "Could not create IOMMU groups XML file "\
          "'${SRC_IOMMU_XML_STR_XML_FILE}'".

        return 1
      fi

      log_stdout "IOMMU groups XML file '${SRC_IOMMU_XML_STR_XML_FILE}' exists".
      return 0
    }

  #
  # DESC:   Is given XML file valid or not.
  # $1:     the XML file name as a string.
  # RETURN: If given XML file is valid, return 0.
  #         If false, return 1.
  #
    function is_iommu_groups_xml_file_valid
    {
      log_stdout "${0}: ${FUNCNAME}"

      local -r str_xml_file_name="${1}"

      if ! is_file "${str_xml_file_name}" &> /dev/null; then
        print_error_to_log "XML file does not exist."
        return 1
      fi

      if ! is_file_not_empty "${str_xml_file_name}" &> /dev/null; then
        print_error_to_log "XML file is empty."
        return 1
      fi

      if ! xmllint "${str_xml_file_name}" &> /dev/null; then
        print_error_to_log "XML file is not valid."
        return 1
      fi

      log_stdout "XML file is valid."
      return 0
    }

  #
  # DESC:   Set flag to cross-reference the IOMMU groups from XML file.
  # $1:     do parse the XML file.
  # RETURN: If flag is set already, return 0.
  #         If failed, return 1.
  #
    function set_flag_to_parse_iommu_groups_from_xml_file
    {
      log_stdout "${0}: ${FUNCNAME}"

      if is_bool "${1}" &> /dev/null; then
        SRC_IOMMU_XML_BOOL_DO_PARSE_IOMMU_GROUPS_FROM_XML_FILE="${1}"

        if "${SRC_IOMMU_XML_BOOL_DO_PARSE_IOMMU_GROUPS_FROM_XML_FILE}"; then
          print_output_to_log "IOMMU groups will be cross-referenced by XML file."
        else
          print_output_to_log "IOMMU groups will be not cross-referenced by XML file."
        fi

        return 0
      fi

      if ! ask_yes_or_no "Cross-reference database with XML file?"; then
        SRC_IOMMU_XML_BOOL_DO_PARSE_IOMMU_GROUPS_FROM_XML_FILE=false
        return 1
      fi

      SRC_IOMMU_XML_BOOL_DO_PARSE_IOMMU_GROUPS_FROM_XML_FILE=true
      return 0
    }

  #
  # DESC:   Prompt to specify existing XML file name.
  # RETURN: If specified file name is blank, return 0.
  #         If specified file exists, return 0.
  #         If else, return 1.
  #
    function specify_existing_iommu_groups_xml_file_prompt
    {
      log_stdout "${0}: ${FUNCNAME}"

      local -r str_output="Enter XML file name (leave blank for default): "

      for int_counter in $( seq 0 2 ); do
          read -r -p "${str_output}" str_answer

          if ! is_string "${str_answer}" &> /dev/null; then
            set_iommu_groups_xml_file_to_default
            return 0
          fi

          if ! is_file "${str_answer}" \
            || ! is_file_not_empty "${str_answer}"; then
            continue
          fi

          set_iommu_groups_xml_file "${str_answer}"
          return 0
        done

      print_error_to_log "XML file name is not specified."
      return 1
    }

  #
  # DESC:   Parse the IOMMU database from XML file.
  # $1:     does XML file exist.
  # $2:     do parse from XML file.
  # RETURN: If file is specified and selected, return 0.
  #         If false, return 1.
  #
    function specify_iommu_groups_xml_file
    {
      log_stdout "${0}: ${FUNCNAME}"

      local bool_does_xml_file_exist \
        bool_do_parse_from_xml_file

      if ! is_bool "${1}" &> /dev/null; then
        bool_does_xml_file_exist=false
      fi

      if ! is_bool "${2}" &> /dev/null; then
        bool_do_parse_from_xml_file=false
      fi

      if "${bool_does_xml_file_exist}" \
        && "${bool_do_parse_from_xml_file}"; then
        print_output_to_log "XML file '${SRC_IOMMU_XML_STR_XML_FILE}'"\
          "is specified and selected to be parsed."

        return 0
      fi

      if ! "${var_does_xml_file_exist}" \
        && ! "${var_do_parse_from_xml_file}"; then
        set_iommu_groups_xml_file "${SRC_IOMMU_XML_STR_DEFAULT_XML_FILE}"

        print_output_to_log "The default XML file "\
          "'${SRC_IOMMU_XML_STR_DEFAULT_XML_FILE}'is selected to be parsed."

        return 0
      fi

      print_output_to_log "XML file name is not specified."

      if ! specify_existing_iommu_groups_xml_file_prompt; then
        return 1
      fi

      return 0
    }

  #
  # DESC:   Restore IOMMU groups XML file from temp file.
  # RETURN: If file is restored, return 0.
  #         If false, return 1.
  #
    function restore_temp_files_for_iommu_groups_xml_file
    {
      log_stdout "${0}: ${FUNCNAME}"

      if ! copy_temp_file_to_file "${SRC_IOMMU_XML_STR_XML_FILE}"; then
        print_error_to_log "Could not restore XML file "\
          "'${SRC_IOMMU_XML_STR_XML_FILE}' from temp file".

        return 1
      fi

      log_stdout "Restored XML file "\
        "'${SRC_IOMMU_XML_STR_XML_FILE}' from temp file".
    }

#
# main logic
#
  set_globals
  unset set_globals