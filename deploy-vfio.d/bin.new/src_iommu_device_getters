#!/bin/false

#
# Filename:       src_iommu_device_getters
# Description:    Getters for IOMMU group device information.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [ ] test.
# - [x] develop.
#

#
# sources
#
  declare -g SRC_STR_SCRIPT_DIR="/usr/local/bin/"
  declare -g SRC_STR_SCRIPT_BIN_DIR="${SRC_STR_SCRIPT_DIR}deploy-vfio.d/"

  source "${SRC_STR_SCRIPT_BIN_DIR}src_print"
  source "${SRC_STR_SCRIPT_BIN_DIR}src_iommu_device_validation"

#
# logic
#
  #
  # DESC:   Get device class.
  # $1:     the device slot ID as a string.
  # $2:     the device class as a string reference.
  # RETURN: If device class is found, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function get_device_class
    {
      local -r str_warn="Could not determine device's class."
      local -n ref_str_device_class="${2}"

      if ! is_string "${ref_str_device_class}"; then
        log_invalid_parameter "ref_str_device_class"
        log_warn "${str_warn}"
        return 2
      fi

      local -r str_device_slot_id="${1}"

      if ! is_string "${str_device_slot_id}"; then
        log_invalid_parameter "str_device_slot_id"
        log_warn "${str_warn}"
        return 2
      fi

      ref_str_device_class="$( \
        lspci -ms ${str_device_slot_id} | cut --delimiter '"' --fields 2 \
      )"

      if ! is_string "${ref_str_device_class}"; then
        log_warn "Did not find device class."
        return 1
      fi

      log_output "Found device class."
      return 0
    }

  #
  # DESC:   Get the device driver.
  # $1:     the device slot ID as a string.
  # $2:     the device driver as a string reference.
  # $3:     the reference of dictionary of device drivers from XML file.
  # RETURN: If device driver is found, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function get_device_driver
    {
      local -r str_warn="Could not find device driver."
      local -n ref_dict_device_slot_id_and_driver="${3}"
      local bool_do_parse_from_xml_file=false

      if ! is_dict "${ref_dict_device_slot_id_and_driver}"; then
        bool_do_parse_from_xml_file=false
        log_invalid_parameter "ref_dict_device_slot_id_and_driver."
        log_output "Not parsing from XML file."
      else
        bool_do_parse_from_xml_file=true
        log_output "Parsing from XML file."
      fi

      local -n ref_str_device_driver="${2}"

      if ! is_string "${ref_str_device_driver}"; then
        log_invalid_parameter "ref_str_device_driver"
        log_warn "${str_warn}"
        return 2
      fi

      local str_device_slot_id="${1}"

      if ! is_string "${str_device_slot_id}"; then
        log_invalid_parameter "str_device_slot_id"
        log_warn "${str_warn}"
        return 2
      fi

      if ! "${bool_do_parse_from_xml_file}"; then
        ref_str_device_driver="$( \
          lspci -ks "${str_device_slot_id}" | grep --ignore-case "driver" | \
            awk 'END {print $5}' \
        )"

        log_output "Found device driver."
        return 0
      fi

      ref_str_device_driver="${ref_dict_device_slot_id_and_driver["${str_device}"]}"

      if ! dict_contains_key "ref_dict_device_slot_id_and_driver" \
          "${str_device_slot_id}"; then
        log_warn "Could not find device driver from XML file."
        return 1
      fi

      log_output "Found device driver from XML file."
      return 0
    }

  #
  # DESC:   Get device hardware ID.
  # $1:     the device slot ID as a string.
  # $2:     the device hardware ID as a string reference.
  # RETURN: If device hardware ID is found, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function get_device_hardware_id
    {
      local -r str_warn="Could not find device hardware ID."
      local -n ref_str_device_hardware_id="${2}"

      if ! is_string "${ref_str_device_hardware_id}"; then
        log_invalid_parameter "ref_str_device_hardware_id"
        log_warn "${str_warn}"
        return 2
      fi

      local -r str_device_slot_id="${1}"

      if ! is_string "${str_device_slot_id}"; then
        log_invalid_parameter "str_device_slot_id"
        log_warn "${str_warn}"
        return 2
      fi

      ref_str_device_hardware_id="$( \
        lspci -ns ${str_device_slot_id} | cut --delimiter ' ' --fields 3 \
      )"

      if ! is_string "${ref_str_device_hardware_id}"; then
        log_warn "Did not find device hardware ID."
        return 1
      fi

      log_output "Found device hardware ID."
      return 0
    }

  #
  # DESC:   Get device name.
  # $1:     the device slot ID as a string.
  # $2:     the device name as a string reference.
  # RETURN: If device name is found, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function get_device_name
    {
      local -r str_warn="Could not find device name."
      local -n ref_str_device_name="${2}"

      if ! is_string "${ref_str_device_name}"; then
        log_invalid_parameter "ref_str_device_name"
        log_warn "${str_warn}"
        return 2
      fi

      local -r str_device_slot_id="${1}"

      if ! is_string "${str_device_slot_id}"; then
        log_invalid_parameter "str_device_slot_id"
        log_warn "${str_warn}"
        return 2
      fi

      ref_str_device_name="$( \
        lspci -ms ${str_device_slot_id}  | cut --delimiter '"' --fields 6 \
      )"

      if ! is_string "${ref_str_device_hardware_id}"; then
        log_warn "Did not find device name."
        return 1
      fi

      log_output "Found device name."
      return 0
    }

  #
  # DESC:   Get device vendor.
  # $1:     the device slot ID as a string.
  # $2:     the device vendor as a string reference.
  # RETURN: If device vendor is found, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function get_device_vendor
    {
      local -r str_warn="Could not find device vendor."
      local -n ref_str_device_vendor="${2}"

      if ! is_string "${ref_str_device_vendor}"; then
        log_invalid_parameter "ref_str_device_vendor"
        log_warn "${str_warn}"
        return 2
      fi

      local -r str_device_slot_id="${1}"

      if ! is_string "${str_device_slot_id}"; then
        log_invalid_parameter "str_device_slot_id"
        log_warn "${str_warn}"
        return 2
      fi

      ref_str_device_vendor="$( \
        lspci -ms ${str_device_slot_id}  | cut --delimiter '"' --fields 4 \
      )"

      if ! is_string "${ref_str_device_vendor}"; then
        log_warn "Did not find device vendor."
        return 1
      fi

      log_output "Found device vendor."
      return 0
    }

  #
  # DESC:   Get device info as arrays given selection.
  # $1:     the reference of IOMMU group IDs array.
  # $2:     the reference of the device driver array.
  # $3:     the reference of the device pci-stub hardware ID array.
  # $4:     the reference of the device vfio-pci hardware ID array.
  # RETURN: If drivers and/or hardware IDs are found, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function get_device_arrays_for_iommu_groups
    {
      local -r str_warn="Could not get device collections for IOMMU group collection."
      local -n ref_arr_vfio_hardware_id="${4}"

      if ! is_array "${ref_arr_vfio_hardware_id}"; then
        log_invalid_parameter "${ref_arr_vfio_hardware_id}"
        log_warn "${str_warn}"
        return 2
      fi

      local -n ref_arr_stub_hardware_id="${3}"

      if ! is_array "${ref_arr_stub_hardware_id}"; then
        log_invalid_parameter "${ref_arr_stub_hardware_id}"
        log_warn "${str_warn}"
        return 2
      fi

      local -n ref_arr_device_driver="${2}"

      if ! is_array "${ref_arr_device_driver}"; then
        log_invalid_parameter "${ref_arr_device_driver}"
        log_warn "${str_warn}"
        return 2
      fi

      local -n ref_arr_iommu_group_id="${1}"

      if ! is_array "${ref_arr_iommu_group_id}"; then
        log_invalid_parameter "${ref_arr_iommu_group_id}"
        log_warn "${str_warn}"
        return 2
      fi

      for int_iommu_group_id in ${ref_arr_iommu_group_id[@]}; do
        local -a arr_device_slot_id="$( \
          ls "/sys/kernel/iommu_groups/${int_iommu_group_id}/devices" \
        )"

        for str_device_slot_id in ${arr_device_slot_id[@]}; do
          local str_device_driver=""
          local str_device_hardware_id=""

          get_device_driver       "${str_device_slot_id}" "str_device_driver"
          get_device_hardware_id  "${str_device_slot_id}" "str_device_hardware_id"

          if is_string "${str_device_slot_id}" \
            && is_device_not_excluded "${str_device_slot_id}"; then
            ref_arr_device_driver+=( "${str_device_driver}" )
          fi

          if is_string "${str_device_hardware_id}"; then
            if is_device_for_pci_stub "${str_device_slot_id}"; then
              ref_arr_stub_hardware_id+=( "${str_device_hardware_id}" )
            else
              ref_arr_vfio_hardware_id+=( "${str_device_hardware_id}" )
            fi
          fi
        done
      done

      ref_arr_device_driver=( $( sort --unique <<<"${ref_arr_device_driver[*]}" ) )

      ref_arr_stub_hardware_id=( \
        $( sort --unique <<<"${ref_arr_stub_hardware_id[*]}" ) \
      )

      ref_arr_vfio_hardware_id=( \
        $( sort --unique <<<"${ref_arr_vfio_hardware_id[*]}" ) \
      )

      if ! is_enum_not_empty "ref_arr_device_driver"; then
        log_output "Could not find device drivers."
        return 1
      fi

      if ! is_enum_not_empty "ref_arr_stub_hardware_id" \
        && ! is_enum_not_empty "ref_arr_vfio_hardware_id"; then
        log_warn "Could not find device hardware IDs."
        return 1
      fi

      log_output "Found device drivers and hardware IDs."
      return 0
    }

  #
  # DESC:   Get name for fist VGA device in IOMMU group.
  # $1:     the IOMMU group ID as an int.
  # $2:     the device name as a string reference.
  # RETURN: If the device name is found, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function get_name_for_first_vga_device_in_iommu_group
    {
      local -r str_warn="Could not find device name of any VGA device in IOMMU group."
      local -n ref_str_device_name="${2}"

      if ! is_string "${ref_str_device_name}"; then
        log_invalid_parameter "${ref_str_device_name}"
        log_warn "${str_warn}"
        return 2
      fi

      local -ir int_iommu_group_id="${1}"

      if ! is_int "${int_iommu_group_id}"; then
        log_invalid_parameter "${int_iommu_group_id}"
        log_warn "${str_warn}"
        return 2
      fi

      local -ar arr_device_slot_id="$( \
        ls "/sys/kernel/iommu_groups/${int_iommu_group_id}/devices" \
      )"

      for str_device_slot_id in ${arr_device_slot_id[@]}; do
        if ! is_device_vga "${str_device_slot_id}"; then
          continue
        fi

        if get_device_name "${str_device_slot_id}" "ref_str_device_name"; then
          break
        fi
      done

      if ! is_string "${ref_str_device_name}"; then
        log_warn "Did not find device name of any VGA device in IOMMU group "\
          "${int_iommu_group_id}."

        return 1
      fi

      log_output "Found device name of any VGA device in IOMMU group "\
        "${int_iommu_group_id}."

      return 0
    }