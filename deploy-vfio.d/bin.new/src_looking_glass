#!/bin/false

#
# Filename:       src_looking_glass
# Description:    Logic to update and install Looking Glass.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [ ] develop.
# - [ ] test.
#


#
# sources
#
  declare -g SRC_STR_SCRIPT_DIR="/usr/local/bin/"
  declare -g SRC_STR_SCRIPT_BIN_DIR="${SRC_STR_SCRIPT_DIR}deploy-vfio.d/"

  source "${SRC_STR_SCRIPT_BIN_DIR}src_print"
  source "${SRC_STR_SCRIPT_BIN_DIR}src_git"
  source "${SRC_STR_SCRIPT_BIN_DIR}src_compatibility"

#
# logic
#
  #
  # DESC:   Check if all required build dependencies are installed.
  # RETURN: If dependencies are installed, return 0.
  #         If false, return 1.
  #
    function are_looking_glass_dependencies_installed
    {
      local -r str_pass="Installed required build dependencies."

      log_work "Installing required build dependencies..."

      local -a arr_dependencies=( \
        "cmake" \
        "gcc" "g++" "clang" \
        "libegl-dev" \
        "libgl-dev" \
        "libfontconfig-dev" \
        "libgmp-dev" \
        "libspice-protocol-dev" \
        "make" \
        "nettle-dev"
        "pkg-config"
      )

      local str_packages_to_install=""

      for var_key in "${!arr_dependencies[@]}"; do
        local -l str_dependency="${arr_dependencies["${var_key}"]}"

        if ! is_package_installed "${str_dependency}" &> /dev/null; then
          if is_string "str_packages_to_install" &> /dev/null; then
            str_packages_to_install+=" ${str_dependency}"
          else
            str_packages_to_install+="${str_dependency}"
          fi
        fi
      done

      if ! is_string "str_packages_to_install" &> /dev/null; then
        log_pass "${str_pass}"
        return 0
      fi

      if ! sudo apt install -y "${str_packages_to_install}" &> /dev/null; then
        print_and_log_warn "Could not install required build dependencies."
        return 1
      fi

      log_pass "${str_pass}"
      return 0
    }

  #
  # DESC:   Execute cmake. If any dependency fails, disable and try again.
  # $1:     the argument for cmake as a string
  # RETURN: If cmake execute, return 0.
  #         If false, return 1.
  #
    function execute_cmake
    {
      local -r str_pass="Execute 'cmake' successful."
      local -r str_warn="Execute 'cmake' failed."

      log_work "Executing 'cmake'..."

      local str_argument="${1}"

      if cmake "${str_argument}" &> /dev/null; then
        log_pass "${str_pass}"
        return 0
      fi

      local -r str_disable_backtrace="-DENABLE_BACKTRACE=no binutils-dev"

      log_warn "${str_warn}"
      log_work "Executing 'cmake' with disabled backtrace dependencies..."

      if cmake "${str_disable_backtrace}" "${str_argument}" &> /dev/null; then
        log_pass "${str_pass}"
        return 0
      fi

      local -r str_disable_x11="-DENABLE_X11=no libx11-dev libxfixes-dev libxi-dev " \
        "libxinerama-dev libxss-dev libxcursor-dev libxpresent-dev"

      log_warn "${str_warn}"
      log_work "Executing 'cmake' with disabled X11 dependencies..."

      if cmake "${str_disable_x11}" "${str_argument}" &> /dev/null; then
        log_pass "${str_pass}"
        return 0
      fi

      local -r str_disable_wayland="-DENABLE_WAYLAND=no libxkbcommon-dev " \
        "libwayland-bin libwayland-dev wayland-protocols"

      log_warn "${str_warn}"
      log_work "Executing 'cmake' with disabled Wayland dependencies..."

      if cmake cmake "${str_disable_wayland}" "${str_argument}" &> /dev/null; then
        log_pass "${str_pass}"
        return 0
      fi

      local -r str_disable_pipewire="-DENABLE_PIPEWIRE=no libpipewire-0.3-dev " \
        "libsamplerate0-dev"

      log_warn "${str_warn}"
      log_work "Executing 'cmake' with disabled Pipe Wire dependencies..."

      if cmake cmake "${str_disable_pipewire}" "${str_argument}" &> /dev/null; then
        log_pass "${str_pass}"
        return 0
      fi

      local -r str_disable_pulseaudio="-DENABLE_PULSEAUDIO=no libpulse-dev " \
        "libsamplerate0-dev"

      log_warn "${str_warn}"
      log_work "Executing 'cmake' with disabled Pulse Audio dependencies..."

      if cmake cmake "${str_disable_pulseaudio}" "${str_argument}" &> /dev/null; then
        log_pass "${str_pass}"
        return 0
      fi

      log_warn "${str_warn}"
      log_work "Executing 'cmake' with all disabled dependencies..."

      if ! cmake \
        "${str_disable_backtrace}" \
        "${str_disable_x11}" \
        "${str_disable_wayland}" \
        "${str_disable_pipewire}" \
        "${str_disable_pulseaudio}" \
        "${str_argument}" &> /dev/null; then
        print_and_log_warn "${str_warn}"
        return 1
      fi

      log_pass "${str_pass}"
      return 0
    }

  #
  # DESC:   Checks if git repo exists.
  # $1:     do force download repo.
  # RETURN: If repo exists, return 0.
  #         If false, return 1.
  #         If any exception occurs, return 2.
  #
    function does_looking_glass_repo_exist
    {
      local -r str_repo_name="Looking Glass"
      local -r str_warn="Could not determine if ${str_repo_name} repository exists."

      log_work "Determining if ${str_repo_name} repository exists..."

      local -r str_last_dir="$( pwd )"
      local -r bool_do_force_download="${1}"

      if ! is_bool "${bool_do_force_download_repo}"; then
        log_invalid_parameter "bool_do_force_download_repo"
        print_and_log_warn "${str_warn}"
        return 2
      fi

      does_this_git_repo_exist \
        "${str_repo_name}" \
        "github.com/gnif/LookingGlass" \
        "${bool_do_force_download}"

      local -ir int_return_code="${?}"

      if ! change_directory "${str_last_dir}"; then
        print_and_log_warn "${str_warn}"
        return 2
      fi

      if [[ "${int_return_code}" -ne 0 ]]; then
        print_and_log_warn "${str_warn}"
        return "${int_return_code}"
      fi

      log_pass "${str_repo_name} repository exists."
      return 0
    }

  #
  # DESC:   Install Looking Glass.
  # RETURN: If install is successful, return 0.
  #         If false, return 1.
  #         If any exceptions occur, return 2.
  #
    function install_looking_glass
    {
      local -r str_repo_name="Looking Glass"
      local -r str_fail="Could not install ${str_repo_name}."

      print_and_log_work "Installing ${str_repo_name}..."

      local -r str_arguments="${*}"

      if ! does_looking_glass_repo_exist; then
        print_and_log_fail "${str_fail}"
        return 2
      fi

      if ! go_to_parent_path \
        || ! change_directory "LookingGlass"; then
        print_and_log_fail "${str_fail}"
        return 2
      fi

      local -r str_build_dir="client/build"

      if ! mkdir --parent "${str_build_dir}" &> /dev/null; then
        log_warn "Could not create build folder."
        print_and_log_fail "${str_fail}"
        return 2
      fi

      if ! change_directory "${str_build_dir}"; then
        print_and_log_fail "${str_fail}"
        return 2
      fi

      if ! execute_cmake "../"; then
        print_and_log_fail "${str_fail}"
        return 1
      fi

      log_work "Executing 'make'..."

      if ! make &> /dev/null; then
        log_warn "'make' failed."
        print_and_log_fail "${str_fail}"
        return 1
      fi

      log_output "'make' sucessful."

      local -r str_arguments="${*}"
      # TODO: execute libvirt here, or inform user how to execute.

      # TODO: follow all advice in install documentations
      # (clipboard, vm setup, tuning, memory calculating)
      # https://looking-glass.io/docs/B6/install/#client-install
      # https://looking-glass.io/docs/B6/usage/

      # TODO: create libvirt hook to execute Looking glass at start of Guest!

      print_and_log_pass "Installed ${str_repo_name}."

      print_and_log_output "For usage on how to run ${str_repo_name}, execute: " \
        "'looking-glass-client --help"

      return 0
    }