#!/bin/false

#
# Filename:       src_libvirt_hooks
# Description:    Logic to update and install Libvirt hooks.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [ ] test.
# - [x] develop.
#


#
# sources
#
  declare -g SRC_STR_SCRIPT_DIR="/usr/local/bin/"
  declare -g SRC_STR_SCRIPT_BIN_DIR="${SRC_STR_SCRIPT_DIR}deploy-vfio.d/"

  source "${SRC_STR_SCRIPT_BIN_DIR}src_print"
  source "${SRC_STR_SCRIPT_BIN_DIR}src_git"

#
# logic
#
  #
  # DESC:   Checks if git repo exists.
  # $1:     do force download repo.
  # RETURN: If repo exists, return 0.
  #         If false, return 1.
  #         If any exception occurs, return 2.
  #
    function does_libvirt_hooks_repo_exist
    {
      local -r str_repo_name="Libvirt Hooks"
      local -r str_warn="Could not determine if ${str_repo_name} repository exists."

      log_work "Determining if ${str_repo_name} repository exists..."

      local -r str_last_dir="$( pwd )"
      local -r bool_do_force_download="${1}"

      if ! is_bool "${bool_do_force_download_repo}"; then
        log_invalid_parameter "bool_do_force_download_repo"
        log_warn "${str_warn}"
        return 2
      fi

      does_this_git_repo_exist \
        "${str_repo_name}" \
        "github.com/portellam/libvirt-hooks" \
        "${bool_do_force_download}"

      local -ir int_return_code="${?}"

      if ! change_directory "${str_last_dir}"; then
        log_warn "${str_warn}"
        return 2
      fi

      if [[ "${int_return_code}" -ne 0 ]]; then
        log_warn "${str_warn}"
        return "${int_return_code}"
      fi

      log_pass "${str_repo_name} repository exists."
      return 0
    }

  #
  # DESC:   Execute Libvirt Hooks installer.
  # $1:     the command line arguments
  # RETURN: If execution is successful, return 0.
  #         If false, return 1.
    function execute_libvirt_hooks_installer
    {
      if ! does_libvirt_hooks_repo_exist; then
        return 1
      fi

      if ! go_to_parent_path \
        || ! change_directory "libvirt-hooks"; then
        return 2
      fi

      local -r str_repo_name="Libvirt Hooks"
      local -r str_arguments="${*}"
      log_work "Executing ${str_repo_name} installer...\n"
      sudo bash installer.bash "${str_arguments}"

      local -i int_code="${?}"

      echo

      if [[ "${int_code}" -ne 0 ]]; then
        print_and_log_warn "Could not execute ${str_repo_name} installer."
        return "${int_code}"
      fi

      log_pass "Executed ${str_repo_name} installer."
      return 0
    }

  #
  # DESC:   Install Libvirt Hooks.
  # RETURN: If install is successful, return 0.
  #         If false, return 1.
  #
    function install_libvirt_hooks
    {
      local -r str_repo_name="Libvirt Hooks"

      print_and_log_work "Installing ${str_repo_name}..."

      if ! execute_libvirt_hooks_installer "--install"; then
        print_and_log_fail "Could not install ${str_repo_name}."
        return 1
      fi

      print_and_log_pass "Installed ${str_repo_name}."
      return 0
    }

  #
  # DESC:   Uninstall Libvirt Hooks.
  # RETURN: If uninstall is successful, return 0.
  #         If false, return 1.
  #
    function uninstall_libvirt_hooks
    {
      local -r str_repo_name="Libvirt Hooks"

      print_and_log_work "Uninstalling ${str_repo_name}..."

      if ! execute_libvirt_hooks_installer "--uninstall"; then
        print_and_log_fail "Could not uninstall ${str_repo_name}."
        return 1
      fi

      print_and_log_pass "Uninstalled ${str_repo_name}"
      return 0
    }