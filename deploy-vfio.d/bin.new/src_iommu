#!/bin/false

#
# Filename:       src_iommu
# Description:    Logic to parse and select IOMMU groups.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [x] migrate logic and params into separate source files.
# - [!] double-check external class params are named properly.
# - [x] refactor.
# - [x] add comments.
# - [x] add bools,
# - [ ] test.
# - [x] develop.
#

#
# sources
#
  declare -g SRC_STR_SCRIPT_DIR="/usr/local/bin/"
  declare -g SRC_STR_SCRIPT_BIN_DIR="${SRC_STR_SCRIPT_DIR}deploy-vfio.d/"

  source "${SRC_STR_SCRIPT_BIN_DIR}src_print"
  source "${SRC_STR_SCRIPT_BIN_DIR}src_iommu_presentation"
  source "${SRC_STR_SCRIPT_BIN_DIR}src_iommu_xml"

#
# logic
#
  #
  # DESC:   Do parse the IOMMU database.
  # $1:     the IOMMU groups as an array reference.
  # $2:     the reserved IOMMU groups for Host as an array reference.
  # $3:     the reserved IOMMU groups with VGA for Host as an array reference.
  # $4:     the reserved IOMMU groups for VFIO as an array reference.
  # $5:     the reserved IOMMU groups with VGA for VFIO as an array reference.
  # $6:     do parse IOMMU groups.
  # $7:     the XML file path as a string.
  # $8:     do parse IOMMU groups from XML file.
  # RETURN: If parse is successful or skipped, return 0.
  #         If failed, return 1.
  #         If an exception occurs, return 2.
  #
    function parse_iommu_database
    {
      local bool_do_parse_iommu_groups="${6}"
      local str_xml_path="${7}"
      local bool_do_parse_iommu_groups_from_xml_file="${8}"

      if ! is_bool "${bool_do_parse_iommu_groups_from_xml_file}"; then
        log_invalid_parameter "bool_do_parse_iommu_groups_from_xml_file"
        return 2
      fi

      if ! is_string "${str_xml_path}"; then
        log_invalid_parameter "str_xml_path"
        return 2
      fi

      if ! is_bool "${bool_do_parse_iommu_groups}"; then
        log_invalid_parameter "bool_do_parse_iommu_groups"
        return 2
      fi

      if ! is_array "${5}"; then
        log_invalid_parameter "5"
        return 2
      fi

      if ! is_array "${4}"; then
        log_invalid_parameter "4"
        return 2
      fi

      if ! is_array "${3}"; then
        log_invalid_parameter "3"
        return 2
      fi

      if ! is_array "${2}"; then
        log_invalid_parameter "2"
        return 2
      fi

      if ! is_array "${1}"; then
        log_invalid_parameter "1"
        return 2
      fi

      if ! "${bool_do_parse_iommu_groups}" \
        || ! parse_iommu_database_prompt; then
        print_and_log_output "Parse of IOMMU groups skipped."
        return 0
      fi

      if ! create_temp_files_for_database \
        || ! try_to_parse_iommu_database "${1}" "${2}" "${3}" "${4}" "${5}" \
          "${bool_do_parse_iommu_groups}" "${str_xml_path}" \
          "${bool_do_parse_iommu_groups_from_xml_file}"; then
        cleanup_iommu_groups_xml_file
        print_and_log_warn "Parse of IOMMU groups failed."
        return 1
      fi

      cleanup_iommu_groups_xml_file
      log_to_stdout "Parse of IOMMU groups successful."
    }

  #
  # DESC:   Try to parse the IOMMU database.
  # $1:     the IOMMU groups as an array reference.
  # $2:     the reserved IOMMU groups for Host as an array reference.
  # $3:     the reserved IOMMU groups with VGA for Host as an array reference.
  # $4:     the reserved IOMMU groups for VFIO as an array reference.
  # $5:     the reserved IOMMU groups with VGA for VFIO as an array reference.
  # $6:     do parse IOMMU groups.
  # $7:     the XML file path as a string.
  # $8:     do parse IOMMU groups from XML file.
  # RETURN: If parse is successful, return 0.
  #         If false, return 1.
  #         If an exception occurs, return 2.
  #
    function try_to_parse_iommu_database
    {
      local bool_do_parse_iommu_groups="${6}"
      local str_xml_path="${7}"
      local bool_do_parse_iommu_groups_from_xml_file="${8}"

      if ! is_bool "${bool_do_parse_iommu_groups_from_xml_file}"; then
        log_invalid_parameter "bool_do_parse_iommu_groups_from_xml_file"
        return 2
      fi

      if ! is_string "${str_xml_path}"; then
        log_invalid_parameter "str_xml_path"
        return 2
      fi

      if ! is_bool "${bool_do_parse_iommu_groups}"; then
        log_invalid_parameter "bool_do_parse_iommu_groups"
        return 2
      fi

      if ! is_array "${5}"; then
        log_invalid_parameter "5"
        return 2
      fi

      if ! is_array "${4}"; then
        log_invalid_parameter "4"
        return 2
      fi

      if ! is_array "${3}"; then
        log_invalid_parameter "3"
        return 2
      fi

      if ! is_array "${2}"; then
        log_invalid_parameter "2"
        return 2
      fi

      if ! is_array "${1}"; then
        log_invalid_parameter "1"
        return 2
      fi

      if ! specify_iommu_groups_xml_file "${str_xml_path}"; then
        return 1
      fi

      if ! is_iommu_groups_xml_file_valid "${str_xml_path}"; then
        if ! does_host_not_have_existing_vfio_setup \
          || ! export_iommu_groups_to_xml_file "${str_xml_path}"; then
          return 1
        fi

      else
        if ! does_host_not_have_existing_vfio_setup; then
          return 1
        fi

        if "${bool_do_parse_iommu_groups_from_xml_file}" \
          || ! import_iommu_groups_from_xml_file; then
          return 1
        fi
      fi

      if ! do_select_iommu_group_collection "${1}" "${2}" "${3}" "${4}" "${5}"; then
        return 1
      fi

      return 0
    }

  #
  # DESC:   Prompt to parse IOMMU database.
  # RETURN: If flag is specified, skip and return 0.
  #         If prompt is answered yes, return 0.
  #         If false, return 1.
  #
    function parse_iommu_database_prompt
    {
      if ! ask_yes_or_no "Parse IOMMU groups?"; then
        return 1
      fi

      return 0
    }