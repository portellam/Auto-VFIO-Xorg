#!/bin/false

#
# Filename:       src_zram_swap
# Description:    Logic to update and install ZRAM Swap.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [X] develop.
# - [ ] test.
#

#
# sources
#
  declare -g SRC_STR_SCRIPT_DIR="/usr/local/bin/"
  declare -g SRC_STR_SCRIPT_BIN_DIR="${SRC_STR_SCRIPT_DIR}deploy-vfio.d/"

  source "${SRC_STR_SCRIPT_BIN_DIR}src_print"
  source "${SRC_STR_SCRIPT_BIN_DIR}src_git"
  source "${SRC_STR_SCRIPT_BIN_DIR}src_memory"

#
# logic
#
  #
  # DESC:   Checks if git repo exists.
  # $1:     do force download repo.
  # RETURN: If repo exists, return 0.
  #         If false, return 1.
  #         If any exception occurs, return 2.
  #
    function src_zram_swap_does_repo_exist
    {
      local -r str_repo_name="ZRAM Swap"
      local -r str_warn="Could not determine if ${str_repo_name} repository exists."

      log_work "Determining if ${str_repo_name} repository exists..."

      local -r str_last_dir="$( pwd )"
      local -r bool_do_force_download="${1}"

      if ! is_bool "${bool_do_force_download_repo}"; then
        log_invalid_parameter "bool_do_force_download_repo"
        print_and_log_warn "${str_warn}"
        return 2
      fi

      does_this_git_repo_exist \
        "${str_repo_name}" \
        "github.com/foundObjects/zram-swap" \
        "${bool_do_force_download}"

      local -ir int_return_code="${?}"

      if ! change_directory "${str_last_dir}"; then
        print_and_log_warn "${str_warn}"
        return 2
      fi

      if [[ "${int_return_code}" -ne 0 ]]; then
        print_and_log_warn "${str_warn}"
        return "${int_return_code}"
      fi

      log_pass "${str_repo_name} repository exists."
      return 0
    }

  #
  # DESC:   Execute ZRAM Swap installer.
  # $*:     the command line arguments as a string.
  # RETURN: If execution is successful, return 0.
  #         If false, return 1.
  #
    function src_zram_swap_execute_installer
    {
      local -r str_repo_name="ZRAM Swap"
      local -r str_warn="Could not execute ${str_repo_name} installer."

      if ! src_zram_swap_does_repo_exist "false"; then
        print_and_log_warn "${str_warn}"
        return 1
      fi

      local -a arr_arguments="$@"
      local str_arguments

      if ! get_delimited_string_from_array "arr_arguments" "str_arguments" " "; then
        print_and_log_warn "${str_warn}"
        return 1
      fi

      if ! go_to_parent_path \
        || ! change_directory "zram-swap"; then
        print_and_log_warn "${str_warn}"
        return 2
      fi

      log_work "Executing ${str_repo_name} installer...\n"
      sudo bash install.sh "${str_arguments}"

      local -i int_code="${?}"

      echo

      if [[ "${int_code}" -ne 0 ]]; then
        print_and_log_warn "${str_warn}"
        return "${int_code}"
      fi

      log_pass "Executed ${str_repo_name} installer."
      return 0
    }

  #
  # DESC:   Install ZRAM Swap.
  # $1:     do ignore reinstall.
  # $2:     do force restart all ZRAM Swap devices.
  # $3:     do use the default fraction value.
  # $4:     do use calculated fraction value.
  # $5:     the fraction as a string.
  # RETURN: If ZRAM Swap installed successfully, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function src_zram_swap_install
    {
      local -r str_repo_name="ZRAM Swap"
      local -r str_fail="Could not install ${str_repo_name}."

      print_and_log_work "Installing ${str_repo_name}..."

      local str_fraction="${5}"

      if is_string "${str_fraction}" \
        && ! is_fraction "${str_fraction}"; then
        log_invalid_parameter "str_fraction"
        print_and_log_fail "${str_fail}"
        return 2
      fi

      local bool_do_use_calculated_fraction="${4}"

      if ! is_bool "${bool_do_use_calculated_fraction}"; then
        log_invalid_parameter "bool_do_use_calculated_fraction"
        print_and_log_fail "${str_fail}"
        return 2
      fi

      local bool_do_use_default_fraction="${3}"

      if ! is_bool "${bool_do_use_default_fraction}"; then
        log_invalid_parameter "bool_do_use_default_fraction"
        print_and_log_fail "${str_fail}"
        return 2
      fi

      local bool_do_force_restart="${2}"

      if ! is_bool "${bool_do_force_restart}"; then
        log_invalid_parameter "bool_do_force_restart"
        print_and_log_fail "${str_fail}"
        return 2
      fi

      local bool_do_ignore_reinstall="${1}"

      if ! is_bool "${bool_do_ignore_reinstall}"; then
        log_invalid_parameter "bool_do_ignore_reinstall"
        print_and_log_fail "${str_fail}"
        return 2
      fi

      if ! "${bool_do_ignore_reinstall}" \
        && ! src_zram_swap_execute_installer "--install"; then
        print_and_log_fail "${str_fail}"
        return 1
      fi

      if ! src_zram_modify_configuration \
          "${bool_do_force_restart}" \
          "${bool_do_use_default_fraction}" \
          "${str_fraction}" \
        || ! src_zram_enable_device \
          "${bool_do_force_restart}"; then
        print_and_log_fail "${str_fail}"
        return "${?}"
      fi

      print_and_log_pass "Installed ${str_repo_name}."
      return 0
    }

  #
  # DESC:   Prompt to install ZRAM Swap.
  # $1:     do ignore reinstall.
  # $2:     do force restart all ZRAM Swap devices.
  # $3:     do use the default fraction value.
  # $4:     do use calculated fraction value.
  # $5:     the fraction as a string.
  # RETURN: If install is successful, return 0.
  #         If install has failed, return 1.
  #         If install is skipped, return 2.
  #
    function src_zram_swap_install_prompt
    {
      local -r str_arguments="${*}"
      local -r str_repo_name="ZRAM Swap"

      if ! ask_yes_no_question "Install ${str_repo_name}?"; then
        print_and_log_output "Skipped install of ${str_repo_name}."
        return 2
      fi

      if ! src_zram_swap_install "${1}" "${2}" "${3}" "${4}" "${5}"; then
        return 1
      fi

      return 0
    }

  #
  # DESC:   Set ZRAM Swap fraction size.
  # $1:     the fraction as a string reference.
  # $2:     do use the default fraction value.
  # RETURN: If ZRAM Swap fraction size is valid, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function src_zram_set_fraction
    {
      local -r str_repo_name="ZRAM Swap"
      local -r str_warn="Could not set ${str_repo_name} fraction value."

      print_and_log_work "Setting ${str_repo_name} fraction value..."

      if ! is_any_host_memory_available; then
        print_and_log_warn "${str_warn}"
        return 2
      fi

      local bool_do_use_default="${2}"

      if ! is_bool "${bool_do_use_default}"; then
        log_invalid_parameter "bool_do_use_default"
        print_and_log_warn "${str_warn}"
        return 2
      fi

      local -n ref_beta_str_fraction="${1}"

      if ! is_string "${ref_beta_str_fraction}"; then
        log_invalid_parameter "ref_beta_str_fraction"
        print_and_log_warn "${str_warn}"
        return 2
      fi

      local -r str_default_fraction="1/2"

      if "${bool_do_use_default}"; then
        ref_beta_str_fraction="${str_default_fraction}"
        log_pass "Set fraction to default: ${str_default_fraction}"
        return 0
      fi

      if ! is_absolute_value_of_fraction_less_than_one \
        "${ref_beta_str_fraction}"; then
        print_and_log_warn "${str_warn}"
        return 1
      fi

      log_pass "Set fraction: ${ref_beta_str_fraction}"
      return 0
    }

  #
  # DESC:   Set ZRAM Swap value by user input.
  # $1:     the fraction as a string reference.
  # $2:     do use the default fraction value.
  # RETURN: If ZRAM Swap value is valid, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function src_zram_set_fraction_prompt
    {
      local -r str_repo_name="ZRAM Swap"

      local bool_do_use_default="${2}"

      if ! is_bool "${bool_do_use_default}"; then
        log_invalid_parameter "bool_do_use_default"
        return 2
      fi

      local -n ref_alpha_str_fraction="${1}"

      if ! is_string "${1}"; then
        log_invalid_parameter "1"
        return 2
      fi

      local -r str_default_fraction="1/2"

      if "${bool_do_use_default}"; then
        src_zram_set_fraction "${ref_alpha_str_fraction}" "${ref_alpha_str_fraction}"
        return 0
      fi

      local -i int_max_tries=2

      for int_count in $( seq 0 "${int_max_tries}" ); do
        read -r -p "Set fraction of total memory for ${str_repo_name} to use " \
          "(to calculate default, enter 'default'): " \
          ref_alpha_str_fraction

        if [[ "${ref_alpha_str_fraction}" == "default" ]]; then
          bool_do_use_default=true
        fi

        if src_zram_set_fraction "${ref_alpha_str_fraction}" \
          "${bool_do_use_default}"; then
          return 0
        fi
      done

      print_and_log_warn "Not a fraction or invalid input."
      return 1
    }

  #
  # DESC:   Modify configuration files for ZRAM Swap.
  # $1:     do force restart all ZRAM Swap devices.
  # $2:     do use the default fraction value.
  # $3:     do use calculated fraction value.
  # $4:     the fraction as a string.
  # RETURN: If output is valid and file is written, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function src_zram_modify_configuration
    {
      local -r str_repo_name="ZRAM Swap"
      local -r str_warn="Could not modify ${str_repo_name} configuration."

      log_work "Modifying ${str_repo_name} configuration..."

      local str_fraction="${4}"

      if is_string "${str_fraction}" \
        && ! is_fraction "${str_fraction}"; then
        log_invalid_parameter "str_fraction"
        print_and_log_warn "${str_warn}"
        return 2
      fi

      local bool_do_use_calculated_fraction="${3}"

      if ! is_bool "${bool_do_use_calculated_fraction}"; then
        log_invalid_parameter "bool_do_use_calculated_fraction"
        print_and_log_warn "${str_warn}"
        return 2
      fi

      local bool_do_use_default_fraction="${2}"

      if ! is_bool "${bool_do_use_default_fraction}"; then
        log_invalid_parameter "bool_do_use_default_fraction"
        print_and_log_warn "${str_warn}"
        return 2
      fi

      local bool_do_force_restart="${1}"

      if ! is_bool "${bool_do_force_restart}"; then
        log_invalid_parameter "bool_do_force_restart"
        print_and_log_warn "${str_warn}"
        return 2
      fi

      if ! is_fraction "${str_fraction}"; then
        if "${bool_do_use_calculated_fraction}"; then
          if ! src_zram_calculate_fraction "${str_fraction}"; then
            print_and_log_warn "${str_warn}"
            return 1
          fi

        else
          if ! src_zram_set_fraction_prompt \
            "str_fraction" \
            "${bool_do_use_default_fraction}"; then
            print_and_log_warn "${str_warn}"
            return 2
          fi
        fi

      else
        if ! is_absolute_value_of_fraction_less_than_one "${str_fraction}"; then
          print_and_log_warn "${str_warn}"
          return 2
        fi
      fi

      local -r str_file_path="/etc/default/zram-swap"
      local -r str_line_to_match="_zram_fraction="

      if ! sed -i \
        '/'${str_line_to_match}'"*"/c\'${str_line_to_match}'"'${str_fraction}'"' \
        "${str_file_path}"; then
        print_and_log_warn "${str_warn}"
        return 1
      fi

      log_pass "Modified ${str_repo_name} configuration."
      return 0
    }

  #
  # DESC:   Enable ZRAM Swap device.
  # $1:     do force restart all ZRAM Swap devices.
  # RETURN: If ZRAM Swap device is enabled, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function src_zram_enable_device
    {
      local -r str_repo_name="ZRAM Swap"
      log_work "Enabling ${str_repo_name} device(s)..."

      local -r str_warn="Could not enable ${str_repo_name} device(s)."
      local -r bool_do_force_restart="${1}"

      if ! is_bool "${bool_do_force_restart}"; then
        log_invalid_parameter "bool_do_force_restart"
        print_and_log_warn "${str_warn}"
        return 2
      fi

      if ! "${bool_do_force_restart}" \
        && sudo swapon --verbose | grep zram &> /dev/null \
        && sudo swapon --verbose | grep zram &> /dev/null \
        && ! sudo swapon --verbose | grep zram | grep 0B &> /dev/null; then
        print_and_log_output "Skipped enabling ${str_repo_name} device(s)\n"\
          "${str_repo_name} device(s) already in use. Restart system to save changes."

        return 0
      fi

      if sudo swapon --verbose | grep zram &> /dev/null \
        && ! sudo swapoff /dev/zram* &> /dev/null; then
        log_output "Failed to disable ${str_repo_name} device(s)."
        print_and_log_warn "${str_warn}"
        return 1
      fi

      log_pass "Disabled ${str_repo_name} device(s)."

      if ! sudo systemctl daemon-reload &> /dev/null; then
        log_output "Could not update Systemd."
        print_and_log_warn "${str_warn}"
        return 1
      fi

      log_pass "Updated Systemd."

      if ! sudo systemctl restart zram-swap &> /dev/null; then
        log_output "Could not restart ${str_repo_name} service."
        print_and_log_warn "${str_warn}"
        return 1
      fi

      log_pass "Restarted ${str_repo_name} service."

      if ! sudo swapon --verbose | grep zram &> /dev/null; then
        print_and_log_warn "${str_warn}"
        return 1
      fi

      log_pass "Enabled ${str_repo_name} device(s)."
      return 0
    }

  #
  # DESC:   Get the calculated fraction.
  # $1:     the fraction as a string reference.
  # RETURN: If fraction is valid, return 0.
  #         If not, return 1.
  #         If an exception occurs, return 2.
  #
    function src_zram_calculate_fraction
    {
      log_work "Getting calculated fraction..."

      local -n ref_alpha_str_fraction="${1}"

      if ! is_string "${ref_alpha_str_fraction}"; then
        log_invalid_parameter "ref_alpha_str_fraction"
        print_and_log_warn "Could not get fraction."
        return 2
      fi

      local -ir int_zram_swap_available_memory=$(( \
        SRC_MEMORY_INT_CURRENT_FREE_MEMORY_BYTES / 2 \
      ))

        #
        # NOTE: First evaluate the ratio of max system memory to the zram-swap
        # available memory, as a decimal to the hundredths place.
        # Then truncate the decimal and return an integer.
        #
        local -r str_max_and_available_memory_fraction=""\
          "${SRC_MEMORY_INT_MAX_FREE_MEMORY_BYTES}/${int_zram_swap_available_memory}"

        local -i int_denominator=$( printf "%.0f" \
          $( echo "scale=2;${str_max_and_available_memory_fraction}" | bc ) \
        )

        #
        # NOTE: If denominator is odd, subtract one.
        #
        if [[ $( expr ${int_denominator} % 2 ) -eq 1 ]]; then
          (( int_denominator-- ))
        fi

        log_output "Denominator: ${int_denominator}"

        if [[ "${int_denominator}" -le 1 ]]; then
          print_and_log_warn "Denominator is less than or equal to one."
          return 1
        fi

        ref_alpha_str_fraction="1/${int_denominator}"
        log_pass "Fraction: ${ref_alpha_str_fraction}"
        return 0
    }

  #
  # DESC:   Prompt to uninstall ZRAM Swap.
  # RETURN: If uninstall is successful, return 0.
  #         If uninstall has failed, return 1.
  #         If uninstall is skipped, return 2.
  #
    function src_zram_swap_uninstall_prompt
    {
      local -r str_repo_name="ZRAM Swap"

      if ! ask_yes_no_question "Uninstall ${str_repo_name}?"; then
        print_and_log_output "Skipped uninstall of ${str_repo_name}."
        return 2
      fi

      if ! src_zram_swap_execute_installer "--uninstall"; then
        return 1
      fi

      return 0
    }