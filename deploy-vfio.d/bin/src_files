#!/bin/false

#
# Filename:       src_files
# Description:    File read/write and validation.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [ ] test.
# - [x] develop.
#

#
# sources
#
  declare -g SRC_STR_SCRIPT_DIR="/usr/local/bin/"
  declare -g SRC_STR_SCRIPT_BIN_DIR="${SRC_STR_SCRIPT_DIR}deploy-vfio.d/"

  source "${SRC_STR_SCRIPT_BIN_DIR}src_print"

#
# logic
#
  #
  # DESC:   Change current directory.
  # $1:     the new directory as a string.
  # RETURN: If change of directory is successful, return 0.
  #         If false, return 1.
  #
    function change_directory
    {
      if ! is_dir "${1}"; then
        log_invalid_parameter "1"
        og_warn "Could not change directory."
        return 2
      fi

      if ! cd "${1}" &> /dev/null; then
        log_warn "Failed to change to directory '${1}'."
        return 1
      fi

      log_output "Changed to directory '${1}'."
      return 0
    }

  #
  # DESC:   Create temp file of given file.
  # $1:     the file name as a string.
  # RETURN: If temp file creation is successful, return 0.
  #         If false, return 1.
  #         If any exception occurs, return 2.
  #
    function create_temp_file_of_file
    {
      local -r str_warn="Could not create temp file."
      local -r str_file_name="${1}"
      local -r str_temp_file_name="${str_file_name}.tmp"

      if ! is_string "${str_file_name}" \
        || is_file "${str_temp_file_name}"\
        || ! is_file "${str_file_name}"; then
        log_invalid_parameter "str_file_name"
        log_warn "${str_warn}"
        return 2
      fi

      if is_file "${str_temp_file_name}"; then
        log_warn "${str_warn}"
        return 2
      fi

      if ! cp --force "${str_file_name}" "${str_temp_file_name}"; then
        print_and_log_warn "Could not create temp file of '${str_file_name}'."
        return 1
      fi

      log_output "Created temp file of '${str_file_name}'."
      return 0
    }

  #
  # DESC:   Copy the temp file to the given file.
  # $1:     the file name as a string.
  # RETURN: If file overwrite is successful, return 0.
  #         If false, return 1.
  #         If any exception occurs, return 2.
  #
    function copy_temp_file_to_file
    {
      local -r str_warn="Could not copy temp file."
      local -r str_file_name="${1}"
      local -r str_temp_file_name="${str_file_name}.tmp"

      if ! is_string "${str_file_name}"; then
        log_invalid_parameter "str_file_name"
        log_warn "${str_warn}"
        return 2
      fi

      if ! is_file "${str_temp_file_name}"; then
        log_warn "${str_warn}"
        return 2
      fi

      if ! copy_this_file_to_other_file "${str_temp_file_name}" \
        "${str_file_name}"; then
        return 1
      fi

      log_output "Copied temp file to file."
      return 0
    }

  #
  # DESC:   Copy first file to second file.
  # $1:     the file name as a string.
  # $2:     the file name as a string.
  # RETURN: If file copy is successful, return 0.
  #         If false, return 1.
  #         If any exception occurs, return 2.
  #
    function copy_this_file_to_other_file
    {
      local -r str_warn="Could not copy file."
      local -r str_file2_name="${2}"

      if ! is_string "${str_file2_name}"; then
        log_invalid_parameter "str_file2_name"
        log_warn "${str_warn}"
        return 2
      fi

      local -r str_file1_name="${1}"

      if ! is_file "${str_file1_name}"; then
        log_invalid_parameter "str_file1_name"
        log_warn "${str_warn}"
        return 2
      fi

      if cp --force "${str_file1_name}" "${str_file2_name}"; then
        log_warn "Failed to copy file '${str_file1_name}' to file "\
          "'${str_file2_name}'."

        return 1
      fi

      log_output "Copied file '${1}' to file '${2}'."
      return 0
    }

  #
  # DESC:   Delete the temp file of the given file.
  # $1:     the file name as a string.
  # RETURN: If temp file deletion is successful, return 0.
  #         If false, return 1.
  #         If any exception occurs, return 2.
  #
    function delete_temp_file_of_file
    {
      local -r str_file_name="${1}"
      local -r str_temp_file_name="${str_file_name}.tmp"

      if ! is_string "${str_file_name}"; then
        log_invalid_parameter "str_file_name"
        log_warn "Cannot delete temp file."
        return 2
      fi

      if is_file "${str_temp_file_name}"; then
        log_output "No temp file exists."
        return 0
      fi

      if ! rm --force --recursive "${str_temp_file_name}"; then
        log_warn "Failed to delete temp file '${str_temp_file_name}'."
        return 1
      fi

      log_output "Deleted temp file '${str_temp_file_name}'."
      return 0
    }

  #
  # DESC:   Is directory valid.
  # $1:     the directory name as a string.
  # RETURN: If directory is valid, return 0.
  #         If false, return 1.
  #         If any exception occurs, return 2.
  #
    function is_dir
    {
      local -r str_dir_name="${1}"

      if ! is_string "${str_dir_name}"; then
        log_invalid_parameter "str_dir_name"
        log_warn "Cannot determine if folder exists."
        return 2
      fi

      if [[ ! -d "${1}" ]]; then
        log_warn "Folder does not exist."
        return 1
      fi

      log_output "Folder does exist."
      return 0
    }

  #
  # DESC:   Is directory not empty.
  # $1:     the directory name as a string.
  # RETURN: If directory is not empty, return 0.
  #         If false, return 1.
  #         If any exception occurs, return 2.
  #
    function is_dir_not_empty
    {
      local -r str_dir_name="${1}"

      if ! is_dir "${str_dir_name}"; then
        log_invalid_parameter "str_dir_name"
        log_warn "Cannot determine if folder is empty."
        return 2
      fi

      if ! ls --almost-all "${str_dir_name}" | head --lines 1 &> /dev/null; then
        log_warn "Folder is empty."
        return 1
      fi

      log_output "Folder is not empty."
      return 0
    }

  #
  # DESC:   Is file valid.
  # $1:     the file name as a string.
  # RETURN: If file is valid, return 0.
  #         If false, return 1.
  #         If any exception occurs, return 2.
  #
    function is_file
    {
      local -r str_file_name="${1}"

      if ! is_string "${str_file_name}"; then
        log_invalid_parameter "${str_file_name}"
        log_warn "Cannot determine if file exists."
        return 2
      fi

      if [[ ! -e "${str_file_name}" ]]; then
        log_warn "File does not exist."
        return 1
      fi

      log_output "File does exist."
      return 0
    }

  #
  # DESC:   If file not empty.
  # $1:     the file name as a string.
  # RETURN: If file is not empty, return 0.
  #         If false, return 1.
  #         If any exception occurs, return 2.
  #
    function is_file_not_empty
    {
      local -r str_file_name="${1}"

      if ! is_file "${str_file_name}"; then
        log_invalid_parameter "str_file_name"
        log_warn "Cannot determine if file is empty."
        return 2
      fi

      if [[ ! -s "${str_file_name}" ]]; then
        log_warn "File '${str_file_name}' is empty."
        return 1
      fi

      log_output "File '${str_file_name}' is not empty."
      return 0
    }

  #
  # DESC:   Overwrite file with contents of enum.
  # $1:     the reference of the output as an enum.
  # $2:     the file name as a string.
  # RETURN: If enum is not empty and write is successful, return 0.
  #         If false, return 1.
  #         If an exception occurs, return 2.
  #
    function overwrite_file
    {
      local -r str_warn="Could not overwrite file."
      local -r str_file_name="${2}"

      if ! is_file "${str_file_name}"; then
        log_invalid_parameter "str_file_name"
        log_warn "${str_warn}"
        return 2
      fi

      local -n ref_enum_output="${1}"

      if ! is_enum_not_empty "ref_enum_output"; then
        log_invalid_parameter "ref_enum_output"
        log_warn "${str_warn}"
        return 2
      fi

      if ! sudo echo -e "${ref_enum_output[*]}" > "${str_file_name}"; then
        print_and_log_warn "Failed to overwrite file '${str_file_name}'."
        return 1
      fi

      log_output "Overwrote file '${str_file_name}'."
      return 0
    }

  #
  # DESC:   Write to file with contents of enum.
  # $1:     the reference of the output as an enum.
  # $2:     the file name as a string.
  # RETURN: If enum is not empty and write is successful, return 0.
  #         If false, return 1.
  #         If an exception occurs, return 2.
  #
    function write_file
    {
      local -r str_warn="Could not write to file."
      local -r str_file_name="${2}"

      if ! is_file "${str_file_name}"; the
        log_invalid_parameter "str_file_name"
        log_warn "${str_warn}"
        return 2
      fi

      local -n ref_enum_output="${1}"

      if ! is_enum_not_empty "ref_enum_output"; then
        log_invalid_parameter "ref_enum_output"
        log_warn "${str_warn}"
        return 2
      fi

      for str_line in ${ref_enum_output[*]}; do
        if ! sudo echo -e "${str_line}" >> "${str_file_name}"; then
          print_and_log_warn "Failed to write to file '${str_file_name}'."
          return 1
        fi
      done

      log_output "Wrote to file '${str_file_name}'."
      return 0
    }