#!/bin/bash/env bash

#
# notes:
#
# - [ ] add args to beginning of main, so that this script can be run on its' own,
#  without deploy-vfio.
#
# - [x] check if git exists
#   - [x] if not, attempt to install
#     - [x] if internet cannot be reached, log error and exit.
#     - [x] if that fails, warn user, log error and exit.
#
# - [x] if git repos exist locally,
#   - [x] first, ask user to check for updates for all.
#     - [x] if yes...
#       - [x] if internet cannot be reached, log error and exit.
#       - [x] if given repo fails to update, rollback.
#   - [x] second, ask to download each repo.
#     - [x] if install fails for one, rollback changes, log error, and continue.
#
# - [x] if git repos do not exist locally,
#   - [x] first, download each repo.
#     - [x] if internet cannot be reached, log error and exit.
#   - [x] second, ask to download each repo.
#     - [x] if download fails for one, rollback changes, log error, and continue.
#
# - [ ] add logger
#   - [ ] escalate by type, general output, warn, error, failure, success.
#
# - [ ] add array to track which repos to execute or skip automatically.
#   - [ ] install or uninstall.
#    - [ ] include args too.

#
# title : Global parameters
#
  declare BOOL_DO_IGNORE_INTERNET_STATUS=false
  declare BOOL_DO_DOWNLOAD_ALL_REPOS=false
  declare STR_GIT_REPO_PARENT_PATH="${HOME}/git"
  declare -A DICT_GIT_REPO_NAME_AND_AVAILABILITY

  declare -ar ARR_GIT_REPO_NAME=( \
    "Audio Loopback" \
    "Auto X.Org" \
    "Libvirt Hooks" \
    "Looking Glass" \
    "Scream" \
    "ZRAM Swap" \
  )

  declare -Ar DICT_GIT_REPO_NAME_AND_ADDRESS=( \
    ["Audio Loopback"]="github.com/portellam/audio-loopback" \
    ["Auto X.Org"]="github.com/portellam/auto-xorg" \
    ["Libvirt Hooks"]="github.com/portellam/libvirt-hooks" \
    ["Looking Glass"]="github.com/gnif/LookingGlass" \
    ["Scream"]="github.com/duncanthrax/scream" \
    ["ZRAM Swap"]="github.com/foundObjects/zram-swap" \
  )

  declare -A DICT_FEATURE_NAME_AND_ADDRESS=( \
    ["Looking Glass"]="https://looking-glass.io/artifact/stable/source", \
  )

#
# title : Commonly used logic
#
  #
  # desc    : (Optionally) ask a yes or no question.
  # ${1}      : the yes or no question
  # return  : '0' if answer is 'Y', '1' if answer is 'N'
  #
    function ask_yes_or_no_to_execute
    {
      local str_output=""

      if [[ ! -z "${1}" ]]; then
        str_output="${1} "
      fi

      for counter in $( seq 0 2 ); do
        print_without_newline "${str_output}[Y/n]: "
        read -r -p "" answer

        case "${answer}" in
          [Yy]* )
            return 0 ;;

          [Nn]* )
            return 255 ;;

          * )
            echo "Please answer 'Y' or 'N'." ;;
        esac
      done

      return 1
    }

  #
  # ${1}  : the line of text
  #
    function print
    {
      echo -e "${1}"
    }

  #
  # ${1}  : the line of text
  #
    function print_without_newline
    {
      echo -en "${1}"
    }

#
# title : Git logic
#
  #
  # desc  : Checks if any git repos exist.
  #
    function do_any_git_repos_exist
    {
      local -r str_last_dir="$( pwd )"

      for str_git_repo_name in "${ARR_GIT_REPO_NAME[@]}"; do
        local str_git_repo_address="${DICT_GIT_REPO_NAME_AND_ADDRESS[$str_git_repo_name]}"
        does_this_git_repo_exist "${str_git_repo_name}" "${str_git_repo_address}"
      done

      readonly DICT_GIT_REPO_NAME_AND_AVAILABILITY
      cd "${str_last_dir}"
    }

  #
  # desc  : Checks if the parent path for git repos exists.
  #
    function does_git_parent_path_exist
    {
      local -r str_last_dir="$( pwd )"

      if ! [[ -d "${STR_GIT_REPO_PARENT_PATH}" ]]; then
        print "Git directory missing. Attemping to create..."

        if ! mkdir --parent "${STR_GIT_REPO_PARENT_PATH}" &> /dev/null; then
          print "Failed to create Git directory."
          return 1
        fi
      fi
    }

  #
  # desc  : Checks if the provided git repo exists.
  # ${1}    : the git repo name
  # ${2}    : the git repo address
  #
    function does_this_git_repo_exist
    {
      local str_git_repo_name="${1}"
      local str_git_repo_address="${2}"

      cd "${STR_GIT_REPO_PARENT_PATH}"

      DICT_GIT_REPO_NAME_AND_AVAILABILITY["${str_git_repo_name}"]=false
      local str_prompt="Download '${str_git_repo_name}'?"

      if ! "${BOOL_DO_DOWNLOAD_ALL_REPOS}"; then
        ask_yes_or_no_to_execute "${str_prompt}"
      fi

      local -i int_code="$?"

      if [[ "${int_code}" -ne 0 ]]; then
        print "Skipped."
        return 0
      fi

      local str_git_repo_full_address="https://www.${str_git_repo_address}"

      print "Cloning '${str_git_repo_name}'..."
      git clone "${str_git_repo_full_address}" &> /dev/null
      int_code="$?"

      if [[ "${int_code}" -eq 0 ]]; then
        print "Clone successful."
        DICT_GIT_REPO_NAME_AND_AVAILABILITY["${str_git_repo_name}"]=true
        return 0
      fi

      local str_git_repo_path="$( basename ${str_git_repo_address} )"

      if [[ "${int_code}" -eq 128 ]]; then
        print "Repo exists. Updating..."
        cd "${str_git_repo_path}" || return 1

        if ! git pull &> /dev/null; then
          print "Update failed."
          return 1
        fi

        print "Update successful."
        DICT_GIT_REPO_NAME_AND_AVAILABILITY["${str_git_repo_name}"]=true
        return 0
      fi

      print "Clone failed."
      return 1
    }

  #
  # desc  : Checks if git command is installed. Installs if absent.
  #
    function is_git_installed
    {
      local -lr str_command="git"

      if command -v "${str_command}" &> /dev/null; then
        print "'git' is installed."
        return 0
      fi

      print "'git' is not installed. Attempting to install..."

      if ! sudo apt install -y "${str_command}"; then
        print "'git' is not installed."
        return 1
      fi

      print "'git' is installed."
      return 0
    }

# title

#
# title : Internet connection logic
#
  #
  # desc  : Pings Internet IP addresses and domain names.
  #
    function do_ping_internet
    {
      print "Checking connection to Internet..."

      if ! do_ping_server "8.8.8.8" \
        && ! do_ping_server "8.8.4.4"; then
        print "Failed to ping IP addresses."
        return 1
      fi

        if ! do_ping_server "www.google.com"; then
          print "Failed to resolve Domain names."
        return 1
      fi
    }

  #
  # desc  : Pings given server address.
  # ${1}    : the server address
  #
    function do_ping_server
    {
      ping "${1}" -c 1 &> /dev/null
    }

  #
  # desc  : Checks if the machine is connected to Internet.
  #
    function is_connected_to_internet
    {
      if ! do_ping_internet; then
        print "Disconnected."

        if "${BOOL_DO_IGNORE_INTERNET_STATUS}" \
          || ask_yes_or_no_to_execute "Ignore and continue?"; then
          print "Continuing."
          return 0;
        fi

        print "Stopping."
        return 1
      fi

      print "Connected."
      return 0
    }

#
# title : Main logic
# $@
#
  function main
  {
    is_connected_to_internet || return 1
    is_git_installed || return 1
    does_git_parent_path_exist || return 1
    do_any_git_repos_exist || return 1
  }

main
exit "$?"