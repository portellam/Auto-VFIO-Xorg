#!/bin/false

#
# Filename:       src_auto_xorg
# Description:    Logic to update and install Auto X.Org.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [ ] test.
# - [ ] have this class only install/uninstall Auto X.Org?
#

#
# sources
#
  declare -g SRC_STR_SCRIPT_DIR="/usr/local/bin/"
  declare -g SRC_STR_SCRIPT_BIN_DIR="${SRC_STR_SCRIPT_DIR}deploy-vfio.d/"

  source "${SRC_STR_SCRIPT_BIN_DIR}src_print"
  source "${SRC_STR_SCRIPT_BIN_DIR}src_git"

#
# logic
#
  #
  # DESC:   Checks if git repo exists.
  # $1:     do force download repo.
  # RETURN: If repo exists, return 0.
  #         If false, return 1.
  #         If any exception occurs, return 2.
  #
    function does_auto_xorg_repo_exist
    {
      local -r str_repo_name="Auto X.Org"
      local -r str_warn="Could not determine if ${str_repo_name} repository exists."

      log_work "Determining if ${str_repo_name} repository exists..."

      local -r str_last_dir="$( pwd )"
      local -r bool_do_force_download="${1}"

      if ! is_bool "${bool_do_force_download_repo}"; then
        log_invalid_parameter "bool_do_force_download_repo"
        print_and_log_warn "${str_warn}"
        return 2
      fi

      does_this_git_repo_exist \
        "${str_repo_name}" \
        "github.com/portellam/auto-xorg" \
        "${bool_do_force_download}"

      local -ir int_return_code="${?}"

      if ! change_directory "${str_last_dir}"; then
        print_and_log_warn "${str_warn}"
        return 2
      fi

      if [[ "${int_return_code}" -ne 0 ]]; then
        print_and_log_warn "${str_warn}"
        return "${int_return_code}"
      fi

      log_pass "${str_repo_name} repository exists."
      return 0
    }

  #
  # DESC:   Execute Auto X.Org.
  # $*:     the command line arguments as a string.
  # RETURN: If execution is successful, return 0.
  #         If false, return 1.
  #
    function execute_auto_xorg
    {
      local -r str_repo_name="Auto X.Org"
      local -r str_fail="Could not execute ${str_repo_name}."

      if ! does_auto_xorg_repo_exist; then
        print_and_log_fail "${str_fail}"
        return 2
      fi

      local -a arr_arguments="$@"
      local str_arguments

      if ! src_auto_xorg_parse_arguments "$@" \
        || ! get_delimited_string_from_array "arr_arguments" "str_arguments" " "; then
        print_and_log_fail "${str_fail}"
        return 1
      fi

      if ! go_to_parent_path \
        || ! change_directory "auto-xorg"; then
        print_and_log_fail "${str_fail}"
        return 2
      fi

      log_work "Executing ${str_repo_name}...\n"
      sudo bash auto-xorg "${str_arguments}"

      local -i int_code="${?}"

      echo

      if [[ "${int_code}" -ne 0 ]]; then
        print_and_log_fail "${str_fail}"
        return "${int_code}"
      fi

      log_pass "Executed ${str_repo_name}."
      return 0
    }

  #
  # DESC:   Execute Auto X.Org installer.
  # $*:     the command line arguments as a string.
  # RETURN: If execution is successful, return 0.
  #         If false, return 1.
  #
    function execute_auto_xorg_installer
    {
      local -r str_repo_name="Auto X.Org"
      local -r str_warn="Could not execute ${str_repo_name} installer."

      if ! does_auto_xorg_repo_exist; then
        print_and_log_warn "${str_warn}"
        return 1
      fi

      local -a arr_arguments="$@"
      local str_arguments

      if ! src_auto_xorg_parse_installer_arguments "$@" \
        || ! get_delimited_string_from_array "arr_arguments" "str_arguments" " "; then
        print_and_log_warn "${str_warn}"
        return 1
      fi

      if ! go_to_parent_path \
        || ! change_directory "auto-xorg"; then
        print_and_log_warn "${str_warn}"
        return 2
      fi

      log_work "Executing ${str_repo_name} installer...\n"
      sudo bash installer.bash "${str_arguments}"

      local -i int_code="${?}"

      echo

      if [[ "${int_code}" -ne 0 ]]; then
        print_and_log_warn "${str_warn}"
        return "${int_code}"
      fi

      log_pass "Executed ${str_repo_name} installer."
      return 0
    }

  #
  # DESC:   Install of Auto X.Org, no added arguments.
  # $*:     the command line arguments as a string.
  # RETURN: If install is successful, return 0.
  #         If false, return 1.
  #
    function install_auto_xorg
    {
      local -r str_repo_name="Auto X.Org"

      print_and_log_work "Installing ${str_repo_name}..."

      if ! execute_auto_xorg_installer "--install ${str_arguments}"; then
        print_and_log_fail "Could not install ${str_repo_name}."
        return 1
      fi

      print_and_log_pass "Installed ${str_repo_name}"
      return 0
    }

  #
  # DESC:   Parse arguments for executable.
  # $*:     the arguments as a string.
  # RETURN: If parse is successful, return 0
  #         If not, return 1.
  #
    function src_auto_xorg_parse_arguments
    {
      while [[ ! -z "${1}" ]]; do
        if ! src_auto_xorg_parse_argument "$@"; then
          return 1
        fi

        shift
      done

      return 0
    }

  #
  # DESC:   Parse argument for executable.
  # $*:     the arguments as a string.
  # RETURN: If argument is empty or valid, return 0.
  #         If argument is not valid or there exists conflicting arguments, return 1.
  #
    function src_auto_xorg_parse_argument
    {
      if ! is_string "${1}"; then
        log_output "No arguments."
        return 0
      fi

      local -ar arr_arguments=$@

      if array_contains_value "arr_arguments" "--first" \
        && array_contains_value "arr_arguments" "--last"; then
        print_conflicting_options
        return 1
      fi

      if array_contains_value "arr_arguments" "--amd" \
        && array_contains_value "arr_arguments" "--intel" \
        && array_contains_value "arr_arguments" "--nvidia" \
        && array_contains_value "arr_arguments" "--other"; then
        print_conflicting_options
        return 1
      fi

      if is_string "${1}"; then
        print_and_log_invalid_argument "${1}"
        return 1
      fi

      log_output "All arguments are valid."
      return 0
    }

  #
  # DESC:   Parse arguments for installer.
  # $*:     the arguments as a string.
  # RETURN: If parse is successful, return 0
  #         If not, return 1.
  #
    function src_auto_xorg_parse_installer_arguments
    {
      while $( is_string "${1}" ); do
        if ! src_auto_xorg_parse_installer_argument "$@"; then
          return 1
        fi

        shift
      done

      return 0
    }

  #
  # DESC:   Parse argument for installer.
  # $*:     the arguments as a string.
  # RETURN: If argument is empty or valid, return 0.
  #         If argument is not valid or there exists conflicting arguments, return 1.
  #
    function src_auto_xorg_parse_installer_argument
    {
      if ! is_string "${1}"; then
        log_output "No arguments."
        return 0
      fi

      local -ar arr_arguments=$@

      if array_contains_value "arr_arguments" "--install" \
        && array_contains_value "arr_arguments" "--uninstall"; then
        print_conflicting_options
        return 1
      fi

      if ! src_auto_xorg_parse_argument "$@" \
        || is_string "${1}"; then
        print_and_log_invalid_argument "${1}"
        return 1
      fi

      log_output "All arguments are valid."
      return 0
    }

  #
  # DESC:   Print usage for this source. Copied from Auto X.Org.
  # RETURN: Always return 0.
  #
    function src_auto_xorg_print_usage
    {
      local -ar arr_output=(
        "\nAuto X.Org:"
        "\t--install\t\tInstall Auto X.Org."
        "\t--uninstall\t\t\tUninstall Auto X.Org."
        "\t--first\t\tFind the first valid VGA device."
        "\t--last\t\tFind the last valid VGA device."
        "\t--amd\t\tPrefer AMD or ATI."
        "\t--intel\t\tPrefer Intel."
        "\t--nvidia\t\tPrefer NVIDIA."
        "\t--other\t\tPrefer any other brand."
      )

      echo -e "${arr_output[*]}"
      return 0
    }

  #
  # DESC:   Uninstall Auto X.Org.
  # RETURN: If uninstall is successful, return 0.
  #         If false, return 1.
  #
    function uninstall_auto_xorg
    {
      local -r str_repo_name="Auto X.Org"

      print_and_log_work "Uninstalling ${str_repo_name}..."

      if ! execute_auto_xorg_installer "--uninstall"; then
        print_and_log_fail "Could not uninstall ${str_repo_name}."
        return 1
      fi

      print_and_log_pass "Uninstalled ${str_repo_name}"
      return 0
    }