#!/bin/false

#
# Filename:       src_iommu_presentation
# Description:    Presentation logic for individual IOMMU groups.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [ ] test.
# - [x] develop.
#

#
# sources
#
  declare -g SRC_STR_SCRIPT_DIR="/usr/local/bin/"
  declare -g SRC_STR_SCRIPT_BIN_DIR="${SRC_STR_SCRIPT_DIR}deploy-vfio.d/"

  source "${SRC_STR_SCRIPT_BIN_DIR}src_print"
  source "${SRC_STR_SCRIPT_BIN_DIR}src_iommu_device_getters"
  source "${SRC_STR_SCRIPT_BIN_DIR}src_iommu_group_validation"

#
# logic
#
  #
  # DESC:   Determine if any devices are reserved for Host.
  # $1:     the reserved IOMMU groups for Host as an array reference.
  # $2:     the reserved IOMMU groups with VGA for Host as an array reference.
  # RETURN: If more than one device is reserved for the Host, return 0.
  #         If none are reserved, return 1.
  #
    function check_if_host_has_reserved_devices
    {
      if ! is_enum_not_empty "${1}" \
        && ! is_enum_not_empty "${2}"; then
        print_and_log_warn "No devices reserved for Host."
        return 1
      fi

      log_output "One or more devices reserved for Host."
      return 0
    }

  #
  # DESC:   Determine if any devices are reserved for VFIO.
  # $1:     the reserved IOMMU groups for VFIO as an array reference.
  # $2:     the reserved IOMMU groups with VGA for VFIO as an array reference.
  # RETURN: If more than one is reserved for VFIO, return 0.
  #         If none are reserved, return 1.
  #
    function check_if_vfio_has_reserved_devices
    {
      if ! is_enum_not_empty "${1}" \
        && ! is_enum_not_empty "${2}"; then
        print_and_log_warn "No devices reserved for VFIO."
        return 1
      fi

      log_output "One or more devices reserved for VFIO."
      return 0
    }

  #
  # DESC:   Reserve the given IOMMU group for the Host.
  # $1:     the reserved IOMMU groups for Host as an array reference.
  # $2:     the reserved IOMMU groups with VGA for Host as an array reference.
  # $3:     the IOMMU group ID as an int.
  # RETURN: If IOMMU group ID is valid, return 0.
  #         If not valid, return 1.
  #
    function do_reserve_iommu_group_for_host
    {
      local -r str_warn="Could not reserve IOMMU group for Host."
      local -ir int_iommu_group_id="${3}"

      if ! is_iommu_group_id_valid "${int_iommu_group_id}"; then
        log_invalid_parameter "int_iommu_group_id"
        log_warn "${str_warn}"
        return 1
      fi

      local -n arr_iommu_groups_with_vga_for_host="${2}"

      if ! is_array "${arr_iommu_groups_with_vga_for_host}"; then
        log_invalid_parameter "arr_iommu_groups_with_vga_for_host"
        log_warn "${str_warn}"
        return 1
      fi

      local -n arr_iommu_groups_for_host="${1}"

      if ! is_array "${arr_iommu_groups_for_host}"; then
        log_invalid_parameter "arr_iommu_groups_for_host"
        log_warn "${str_warn}"
        return 1
      fi

      arr_iommu_groups_for_host+=( "${int_iommu_group_id}" )

      if does_iommu_group_have_external_devices "${int_iommu_group_id}"; then
        return 1
      fi

      if ! does_iommu_group_have_vga_device "${int_iommu_group_id}" &> /dev/null; then
        arr_iommu_groups_for_host+=( "${int_iommu_group_id}" )
      else
        arr_iommu_groups_with_vga_for_host+=( "${int_iommu_group_id}" )
      fi

      log_output "Reserved IOMMU group '${int_iommu_group_id}' for Host."
      return 0
    }

  #
  # DESC:   Reserve the given IOMMU group for VFIO.
  # $1:     the reserved IOMMU groups for VFIO as an array reference.
  # $2:     the reserved IOMMU groups with VGA for VFIO as an array reference.
  # $3:     the IOMMU group ID as an int.
  # RETURN: If IOMMU group ID is valid, return 0.
  #         If not valid, return 1.
  #
    function do_reserve_iommu_group_for_vfio
    {
      local -r str_warn="Could not reserve IOMMU group for VFIO."
      local -ir int_iommu_group_id="${3}"

      if ! is_iommu_group_id_valid "${int_iommu_group_id}"; then
        log_invalid_parameter "int_iommu_group_id"
        log_warn "${str_warn}"
        return 1
      fi

      local -n arr_iommu_groups_with_vga_for_vfio="${2}"

      if ! is_array "${arr_iommu_groups_with_vga_for_vfio}"; then
        log_invalid_parameter "arr_iommu_groups_with_vga_for_vfio"
        log_warn "${str_warn}"
        return 1
      fi

      local -n arr_iommu_groups_for_vfio="${1}"

      if ! is_array "${arr_iommu_groups_for_vfio}"; then
        log_invalid_parameter "arr_iommu_groups_for_vfio"
        log_warn "${str_warn}"
        return 1
      fi

      arr_iommu_groups_for_vfio+=( "${int_iommu_group_id}" )

      if does_iommu_group_have_vga_device "${int_iommu_group_id}" &> /dev/null; then
        arr_iommu_groups_with_vga_for_vfio+=( "${int_iommu_group_id}" )
      fi

      print_and_log_output "Reserved IOMMU group '${int_iommu_group_id}' for VFIO."
      return 0
    }

  #
  # DESC:   Prompt to select a given IOMMU group from list.
  # $1:     the IOMMU group IDs as an array reference.
  # $2:     the reserved IOMMU groups for Host as an array reference.
  # $3:     the reserved IOMMU groups with VGA for Host as an array reference.
  # $4:     the reserved IOMMU groups for VFIO as an array reference.
  # $5:     the reserved IOMMU groups with VGA for VFIO as an array reference.
  # RETURN: If arrays are valid, return 0.
  #         If one or more collections are not valid, return 1.
  #
    function do_select_iommu_group_collection
    {
      local -r str_warn="Could not print IOMMU group collection to select."

      if ! is_array "${4}"; then
        log_invalid_parameter "4"
        log_warn "${str_warn}"
        return 1
      fi

      if ! is_array "${3}"; then
        log_invalid_parameter "3"
        log_warn "${str_warn}"
        return 1
      fi

      if ! is_array "${2}"; then
        log_invalid_parameter "2"
        log_warn "${str_warn}"
        return 1
      fi

      if ! is_array "${1}"; then
        log_invalid_parameter "1"
        log_warn "${str_warn}"
        return 1
      fi

      local -n arr_iommu_group_id="${1}"

      if check_if_host_has_reserved_devices "${2}" "${3}" \
        && check_if_vfio_has_reserved_devices "${4}" "${5}"; then
        return 0
      fi

      echo

      for int_iommu_group_id in ${arr_iommu_group_id[@]}; do
        if ! is_iommu_group_id_valid "${1}"; then
          continue
        fi

        print_iommu_group "${int_iommu_group_id}"
        do_select_iommu_group_prompt "${int_iommu_group_id}"
      done

      return 0
    }

  #
  # DESC:   Select or not select a given IOMMU group.
  # $1:     the IOMMU group ID as an int.
  # $2:     the reserved IOMMU groups for Host as an array reference.
  # $3:     the reserved IOMMU groups with VGA for Host as an array reference.
  # $4:     the reserved IOMMU groups for VFIO as an array reference.
  # $5:     the reserved IOMMU groups with VGA for VFIO as an array reference.
  # $6:     do select the IOMMU group.
  # RETURN: If IOMMU group ID is valid, return 0.
  #         If not valid, return 1.
  #
    function do_select_iommu_group_prompt
    {
      local -ir int_iommu_group_id="${1}"

      if ! is_iommu_group_id_valid "${int_iommu_group_id}"; then
        log_invalid_parameter "int_iommu_group_id"
        log_warn "Could not print IOMMU group to select."
        return 1
      fi

      local bool_do_select=false

      if ! is_bool "${6}" &> /dev/null; then
        if ! ask_yes_or_no "Select IOMMU group "\
          "${SRC_PRINT_STR_SET_COLOR_YELLOW}${int_iommu_group_id}"\
          "${SRC_PRINT_STR_SET_ESCAPE}?"; then
          bool_do_select=false
        else
          bool_do_select=true
        fi
      else
        bool_do_select="${2}"
      fi

      if "${bool_do_select}"; then
        do_reserve_iommu_group_for_vfio "${int_iommu_group_id}" "${4}" "${5}"
      else
        do_reserve_iommu_group_for_host "${int_iommu_group_id}" "${2}" "${3}"
      fi

      echo
      return 0
    }

  #
  # DESC:   Print all devices within an IOMMU group.
  # $1:     the IOMMU group ID as an int.
  # RETURN: If IOMMU group ID is valid, return 0.
  #         If an exception occurs, return 2.
  #
    function print_iommu_group
    {
      local -ir int_iommu_group_id="${1}"

      if ! is_iommu_group_id_valid "${int_iommu_group_id}"; then
        log_invalid_parameter "int_iommu_group_id"
        log_warn "Could not print IOMMU group."
        return 2
      fi

      local -ar arr_device_slot_id="$( \
        ls "/sys/kernel/iommu_groups/${int_iommu_group_id}/devices" \
      )"

      for str_device_slot_id in ${arr_device_slot_id[@]}; do
        if ! is_device_external "${str_device_slot_id}"; then
          continue
        fi

        print_iommu_group_device "${str_device_slot_id}"
      done

      return 0
    }

  #
  # DESC:   Print all relevant info about a device.
  # $1:     the device slot ID as a string.
  # RETURN: If device info is not null, return 0.
  #         If an exception occurs, return 2.
  #
    function print_iommu_group_device
    {
      local -r str_device_slot_id="${1}"

      if ! is_string "${str_device_slot_id}"; then
        log_invalid_parameter "str_device_slot_id"
        log_warn "Could not print device."
        return 2
      fi

      local str_device_class \
        str_device_driver \
        str_device_hardware_id \
        str_device_name \
        str_device_vendor

      get_device_class        "${str_device_slot_id}" "str_device_class"
      get_device_driver       "${str_device_slot_id}" "str_device_driver"
      get_device_hardware_id  "${str_device_slot_id}" "str_device_hardware_id"
      get_device_name         "${str_device_slot_id}" "str_device_name"
      get_device_vendor       "${str_device_slot_id}" "str_device_vendor"

      if ! is_string "${str_device_driver}"; then
        str_device_driver="N/A"
      fi

      echo -e "\tSlot ID:\t${str_device_slot_id}\n"\
              "\tVendor name:\t${str_device_vendor}\n"\
              "\tDevice name:\t${str_device_name}\n"\
              "\tClass/Type:\t${str_device_class}\n"\
              "\tHardware ID:\t${str_device_hardware_id}\n"\
              "\tDriver:\t\t${str_device_driver}\n"

      return 0
    }