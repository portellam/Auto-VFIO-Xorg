#!/bin/false

#
# Filename:       src_git
# Description:    Git download and validation logic.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [ ] test.
# - [ ] place non-ref declarations after validation.
#

#
# sources
#
  declare -g SRC_STR_SCRIPT_DIR="/usr/local/bin/"
  declare -g SRC_STR_SCRIPT_BIN_DIR="${SRC_STR_SCRIPT_DIR}deploy-vfio.d/"

  source "${SRC_STR_SCRIPT_BIN_DIR}src_print"
  source "${SRC_STR_SCRIPT_BIN_DIR}src_files"

#
# logic
#
  #
  # DESC:   Checks if the parent path for git repos exists.
  # RETURN: If parent path exists, return 0
  #         If false, return 1.
  #         If any exception occurs, return 2.
  #
    function does_git_parent_path_exist
    {
      local -r str_parent_path="${HOME}/git"
      local -r str_last_dir="$( pwd )"

      if ! is_dir "${str_parent_path}"; then
        print_and_log_warn "Git directory missing. Attemping to create..."

        if ! mkdir --parent "${str_parent_path}" &> /dev/null; then
          print_and_log_warn "Failed to create Git directory."

          if ! change_directory "${str_last_dir}"; then
            return 2
          fi

          return 1
        fi
      fi

      if ! change_directory "${str_last_dir}"; then
        return 2
      fi

      return 0
    }

  #
  # DESC:   Checks if the provided git repo exists.
  # $1:     the git repo name
  # $2:     the git repo address
  # $3:     do force download repo.
  # RETURN: If git repo exists, return 0
  #         If false, return 1.
  #         If any exception occurs, return 2.
  #
    function does_this_git_repo_exist
    {
      local str_git_repo_name="${1}"
      local str_git_repo_address="${2}"
      local bool_do_force_download_repo="${3}"
      local -r str_parent_path="${HOME}/git"
      local -r str_prompt="Download '${str_git_repo_name}'?"

      log_output "Determining if repo exists..."

      if ! is_bool "${bool_do_force_download_repo}"; then
        log_invalid_parameter "bool_do_force_download_repo"
        return 2
      fi

      if ! change_directory "${str_parent_path}"; then
        return 2
      fi

      if ! "${bool_do_force_download_repo}"; then
        if ask_yes_or_no "${str_prompt}"; then
          log_output "Skipped."
          return 0
        fi
      fi

      local str_git_repo_full_address="https://www.${str_git_repo_address}"
      local str_git_repo_path="$( basename ${str_git_repo_address} )"

      print_and_log_work "Cloning '${str_git_repo_name}'..."
      git clone "${str_git_repo_full_address}" &> /dev/null

      local -i int_code="$?"

      if [[ "${int_code}" -eq 0 ]]; then
        log_pass "Clone successful."
        return 0
      fi

      if [[ "${int_code}" -eq 128 ]]; then
        log_work "Repo exists. Updating..."

        if ! change_directory "${str_git_repo_path}"; then
          return 2
        fi

        if ! git pull &> /dev/null; then
          print_and_log_warn "Update failed."
          return 1
        fi

        log_pass "Update successful."
        return 0
      fi

      print_and_log_warn "Clone failed."
      return 1
    }

  #
  # DESC:   Go to the parent path.
  # RETURN: If go to is successful, return 0.
  #         If failed, return 1.
  #         If any exception occurs, return 2.
  #
    function go_to_parent_path
    {
      local -r str_parent_path="${HOME}/git"

      if ! does_git_parent_path_exist; then
        return 2
      fi

      if ! change_directory "${str_parent_path}"; then
        return 1
      fi

      return 0
    }

  #
  # DESC:   Checks if git command is installed. Installs if absent.
  # RETURN: If git is installed, return 0.
  #         If false, return 1.
  #
    function is_git_installed
    {
      local -lr str_command="git"

      log_work "Installing '${str_command}'..."

      if is_package_installed "${str_command}" &> /dev/null; then
        log_pass "'${str_command}' is installed."
        return 0
      fi

      log_work "'${str_command}' is not installed. Attempting to install..."

      if ! sudo apt install -y "${str_command}"; then
        print_and_log_warn "'${str_command}' is not installed."
        return 1
      fi

      log_pass "'${str_command}' is installed."
      return 0
    }