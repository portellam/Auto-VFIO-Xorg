#!/bin/false

#
# Filename:       args_usage
# Description:    Print statements related to usage.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

# <params>
  declare -g SCRIPT_DIR="/usr/local/bin/"
  declare -g SCRIPT_BIN_DIR="${SCRIPT_DIR}deploy-vfio.d/"
# <params>

# <sources>
  source "${SCRIPT_BIN_DIR}logic_common"
# </sources>

# <functions>
  function print_help
  {
    echo -e "Try 'sudo bash ${SCRIPT_NAME} --help' for usage."
  }

  function print_duplicate_argument
  {
    local -r output="Duplicate argument"

    if ! is_string "${1}" &> /dev/null; then
      print_error_to_log "${output}."
    fi

    print_error_to_log "${output}'${1}'."
    return 1
  }

  function print_duplicate_option
  {
    local -r output="Duplicate option"

    if ! is_string "${1}" &> /dev/null; then
      print_error_to_log "${output}."
    fi

    print_error_to_log "${output}'${1}'."
    return 1
  }

  function print_invalid_argument
  {
    local -r output="Invalid argument"

    if ! is_string "${1}" &> /dev/null; then
      print_error_to_log "${output}."
    else
      print_error_to_log "${output} '${1}'."
    fi

    print_help
    exit 1
  }

  function print_invalid_option
  {
    local -r output="Invalid option"

    if ! is_string "${1}" &> /dev/null; then
      print_error_to_log "${output}."
    else
      print_error_to_log "${output} '${1}'."
    fi

    print_help
    exit 1
  }

  function print_usage
  {
    local -ar output=(
      "Usage:\tbash ${SCRIPT_NAME} [OPTION] [ARGUMENTS]"
      "Effortlessly deploy changes to enable virtualization, hardware-passthrough (VFIO), and important quality-of-life enhancements for a seamless VFIO setup on a Linux desktop machine; run Virtual machines on your Linux desktop.\n"
      "  -h, --help\t\t\tPrint this help and exit."
      "  -q, --quiet\t\t\tReduce verbosity; print only relevant questions and status statements."
      "  -u, --undo\t\t\tUndo changes (restore files) if script has exited early or unexpectedly."
      "  --ignore-distro\t\tIgnore distribution check for Debian or Ubuntu system."

      "\nSpecify the database to reference before parsing IOMMU groups.\n${SET_UNDERLINE}OPTIONS:${RESET_TEXT}"
      "  -x, --xml [filename]\tCross-reference XML file. First-time, export if VFIO is not setup. Consecutive-times, imports if VFIO is setup."

      "\n${SET_UNDERLINE}ARGUMENTS:${RESET_TEXT}"
      "  [filename]\t\t\tReference specific file."

      "\nSpecify the IOMMU groups to parse.\n${SET_UNDERLINE}OPTIONS:${RESET_TEXT}"
      "  -p, --parse [groups]\t\tParse given IOMMU groups."

      "\n${SET_UNDERLINE}ARGUMENTS (delimited by comma):${RESET_TEXT}"
      "  all\t\t\t\tSelect all IOMMU groups."
      "  no-vga\t\t\tSelect all IOMMU groups without VGA devices."
      "  [x]\t\t\t\tSelect IOMMU group."
      "  [x-y]\t\t\t\tSelect IOMMU groups."

      "\n  Example:"
      "  no-vga,14\t\t\tSelect group 14 and all non-VGA groups."
      "  1,14-16\t\t\tSelect groups 1, 14, 15, and 16."

      "\nPre-setup ${SET_UNDERLINE}OPTIONS:${RESET_TEXT}"
      "  -c, --cpu\t\t\tAllocate CPU."
      "  -e, --evdev\t\t\tSetup a virtual KVM switch."
      "  -h, --hugepages [ARGS]\tCreate static hugepages (pages greater than 4 KiB) to allocate RAM for Guest(s)."
      "  --skip-pre-setup\t\tSkip execution."
      "  --uninstall-pre-setup\t\tUndo all changes made by pre-setup."

      "\nHugepages ${SET_UNDERLINE}ARGUMENTS:${RESET_TEXT}"
      "  2M, 1G\t\t\tHugepage size (2 MiB or 1 GiB)."
      "  [x]\t\t\t\tAmount of Hugepages (maximum amount is total memory subtracted by 4 GiB)."

      "\n  Example:"
      "  1G 16\t\t\t\t1 GiB hugepage 16\t== 16 GiB allocated to hugepages."
      "  2M 8192\t\t\t2 MiB hugepage 8912\t== 16 GiB allocated to hugepages."

      "\nVFIO setup ${SET_UNDERLINE}OPTIONS:${RESET_TEXT}"
      "  -m, --multiboot [ARGS]\tCreate multiple VFIO setups with corresponding GRUB menu entries. Specify default GRUB menu entry by VGA IOMMU group ID (see ARGUMENTS)."
      "  -s, --static [ARGS]\t\tSingle VFIO setup. Specify method of setup (see ARGUMENTS)."
      "  --skip-vfio-setup\t\tSkip execution."
      "  --uninstall-vfio-setup\tUndo an existing VFIO setup."

      "\nMultiboot ${SET_UNDERLINE}ARGUMENTS:${RESET_TEXT}"
      "  [x]\t\t\t\tThe ID of the valid excluded VGA IOMMU group."
      "  default\t\t\tDefault menu entry excludes VFIO setup."
      "  first\t\t\t\tPrefer the first valid excluded VGA IOMMU group."
      "  last\t\t\t\tPrefer the last valid excluded VGA IOMMU group."

      "\nStatic ${SET_UNDERLINE}ARGUMENTS:${RESET_TEXT}"
      "  file\t\t\t\tAppend output to system configuration files."
      "  grub\t\t\t\tAppend output to GRUB; single GRUB menu entry."

      "\nPost-setup ${SET_UNDERLINE}OPTIONS:${RESET_TEXT}"
      "  --audio-loopback\t\tInstall the audio loopback service...\t\tLoopback audio from Guest to Host (over Line-out to Line-in)."
      "  --auto-xorg [ARGS]\t\tInstall auto-Xorg...\t\t\t\tSystem service to find and set a valid boot VGA device for Xorg."
      "  --libvirt-hooks\t\t\tInstall recommended Libvirt hooks."
      # "  --looking-glass\t\t\tInstall Looking Glass...\t\tVideo (and audio) capture over memory device from Windows guest."   <note>To be added in a future release.</note>
      # "  --scream\t\t\tInstall Scream...\t\tAudio capture over virtual network from Windows guest."                           <note>To be added in a future release.</note>
      "  --zram-swap [ARGS]\t\tCreate compressed swap in RAM (about 2:1)...\tReduce chances of memory exhaustion for Host."
      "  --skip-post-setup\t\tSkip execution."
      "  --uninstall-post-setup\tUndo all changes made by post-setup."

      "\nauto-xorg ${SET_UNDERLINE}ARGUMENTS:${RESET_TEXT}"
      "  first  [vendor]\t\tFind the first valid VGA device."
      "  last   [vendor]\t\tFind the last valid VGA device."
      "  [sort] amd\t\t\tPrefer AMD or ATI."
      "  [sort] intel\t\t\tPrefer Intel."
      "  [sort] nvidia\t\t\tPrefer NVIDIA."
      "  [sort] other\t\t\tPrefer any other brand."

      "\nzram-swap ${SET_UNDERLINE}ARGUMENTS:${RESET_TEXT}"
      "  [fraction]\t\t\tSet the fraction of total available memory."
      "  default\t\t\tAutomatically calculate the fraction of total available memory."
      "  force\t\t\t\tForce changes, even if zram-swap is allocated and in use."

      "\n  Example (assume a Host with 32 GiB of RAM):"
      "  force 1/4\t\t\tCompress 8 GiB of RAM, to create 16 GiB of swap, with 16 GiB free."
    )

    echo -e "${output[*]}"
  }
# </functions>