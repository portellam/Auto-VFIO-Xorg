#!/bin/bash sh

#
# Filename:         vfiolib-parse
# Description:      Reference a database and parse IOMMU groups.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <code>
    function AreParseListsNotEmpty
    {
        # <remarks> If any list is empty, fail. </remarks>
        if [[ "${_CLASS_LIST[@]}" == "" ]] \
            || [[ "${_DEVICE_ID_LIST[@]}" == "" ]] \
            || [[ "${_DEVICE_NAME_LIST[@]}" == "" ]] \
            || [[ "${_DRIVER_LIST[@]}" == "" ]] \
            || [[ "${_HWID_LIST[@]}" == "" ]] \
            || [[ "${_IOMMU_LIST[@]}" == "" ]] \
            || [[ "${_VENDOR_ID_LIST[@]}" == "" ]] \
            || [[ "${_VENDOR_NAME_LIST[@]}" == "" ]]; then
            echo -e "$_PREFIX_ERROR One or more lists are empty."
            return 1
        fi

        return 0
    }

    function AreParseListsNotInequalSizes
    {
        # <remarks> If any list is inequal, fail. </remarks>
        if [[ "${_IOMMU_LIST[@]}" -ne "${_CLASS_LIST[@]}" ]] \
            || [[ "${_IOMMU_LIST[@]}" -ne "${_DEVICE_ID_LIST[@]}" ]] \
            || [[ "${_IOMMU_LIST[@]}" -ne "${_DEVICE_NAME_LIST[@]}" ]] \
            || [[ "${_IOMMU_LIST[@]}" -ne "${_DRIVER_LIST[@]}" ]] \
            || [[ "${_IOMMU_LIST[@]}" -ne "${_HWID_LIST[@]}" ]] \
            || [[ "${_IOMMU_LIST[@]}" -ne "${_VENDOR_ID_LIST[@]}" ]] \
            || [[ "${_IOMMU_LIST[@]}" -ne "${_VENDOR_NAME_LIST[@]}" ]]; then
            echo -e "$_PREFIX_ERROR One or more lists' sizes are inequal."
            return 1
        fi

        return 0
    }

    function IsDriverValid
    {
        case "$_DRIVER" in
            # <remarks> Match invalid input, and save as known null value. </remarks>
            "" )
                _DRIVER="N/A"
                ;;

            # <remarks> If system is setup for VFIO, exit. </remarks>
            "vfio-pci" )
                echo -e "$_PREFIX_ERROR Found existing VFIO setup."
                return 1
                ;;
        esac

        return 0
    }

    function ParseIOMMU
    {
        function Main
        {
            # <remarks> Save input params </remarks>
            _OPTION="$1"

            # <remarks> Output statements </remarks>
            local _OUTPUT_PARSE_FILE="Parsing PCI from file database..."
            local _OUTPUT_PARSE_ONLINE="Parsing PCI from online database..."
            local _OUTPUT_PARSE_LOCAL="Parsing PCI from no database..."

            # <remarks> Declare lists </remarks>
            declare -ag _DRIVER_LIST _HWID_LIST _IOMMU_LIST
            local -a _CLASS_LIST _DEVICE_ID_LIST _DEVICE_NAME_LIST _SLOT_ID_LIST _VENDOR_ID_LIST _VENDOR_NAME_LIST

            # <remarks> Set commands </remarks>
            local _PARSE='lspci -k -mm'
            local _PARSE_ARGS_FILE='-F "$_PARSE_IOMMU_FILENAME"'
            local _PARSE_ARGS_ONLINE='-q'
            local _PARSE_ARGS_NUMS='-n'
            local _PARSE_ARGS_SLOT_ID='-s $_DEVICE'
            local _PARSE_ARGS_VERBOSE='-v'
            local _PARSE_TO_FILE='lspci -x >> "$_PARSE_IOMMU_FILENAME"'
            local _PARSE_ALL_ID="$_PARSE $_PARSE_ARGS_NUMS $_PARSE_ARGS_VERBOSE $_PARSE_ARGS_SLOT_ID"
            local _PARSE_HWID="$_PARSE $_PARSE_ARGS_NUMS $_PARSE_ARGS_SLOT_ID"
            local _PARSE_NAME_ID="$_PARSE $_PARSE_ARGS_VERBOSE $_PARSE_ARGS_SLOT_ID"
            local _PARSE_SLOT_ID="$_PARSE"
            local _PARSE_QUOTES="$_PARSE $_PARSE_ARGS_NUMS"

            # <remarks> Set commands for each parse type. </remarks>
            SetParseOperation || return 1

            # <remarks> Get all devices from system. </remarks>
            local -a _DEVICES_LIST=( $( eval "$_PARSE_SLOT_ID" | awk '{print $1}' ) )
            SetParseLists || return 1
            AreParseListsNotEmpty || return 1
            AreParseListsNotInequalSizes || return 1

            # <remarks> Save output to file. </remarks>
            if [[ "$_OPTION" != "$_OPTION_PARSE_IOMMU_FILE" ]] \
                && [[ -z "$_PARSE_IOMMU_FILENAME" ]]; then
                eval "$_PARSE_TO_FILE"
            fi

            return 0
        }

        local _OUTPUT=""

        # <remarks> Set parse options </remarks>
        local _OPTION_PARSE_IOMMU_FILE="FILE"
        local _OPTION_PARSE_IOMMU_ONLINE="DNS"
        local _OPTION_PARSE_IOMMU_LOCAL="LOCAL"

        # <remarks> Save input params </remarks>
        local _OPTION="$1"
        local _PARSE_IOMMU_FILENAME="$2"

        # <remarks> If an operation fails, try another. </remarks>
        case "$_OPTION" in
            "$_OPTION_PARSE_IOMMU_ONLINE" )
                Main "$_OPTION_PARSE_IOMMU_ONLINE" "$_PARSE_IOMMU_FILENAME"
                ;;

            "$_OPTION_PARSE_IOMMU_FILE" )
                Main "$_OPTION_PARSE_IOMMU_FILE" "$_PARSE_IOMMU_FILENAME" || Main "$_OPTION_PARSE_IOMMU_ONLINE" "$_PARSE_IOMMU_FILENAME"
                ;;

            "$_OPTION_PARSE_IOMMU_LOCAL" | * )
                Main "$_OPTION_PARSE_IOMMU_LOCAL" "$_PARSE_IOMMU_FILENAME" || Main "$_OPTION_PARSE_IOMMU_FILE" "$_PARSE_IOMMU_FILENAME" || Main "$_OPTION_PARSE_IOMMU_ONLINE" "$_PARSE_IOMMU_FILENAME"
                ;;
        esac

        PrintPassOrFail "$_OUTPUT"
        return "$_LAST_EXIT_CODE"
    }

    function SetParseLists
    {
        # <remarks> Save to lists each device's information. Lists should be of the same-size. </remarks>
        for _DEVICE in ${_DEVICES_LIST[@]}; do
            local _CLASS=$( eval "$_PARSE_NAME_ID" )
            _CLASS=$( echo -e "$_CLASS" | grep -i "Class:" | cut -d ':' -f 2 | grep -oP "^\t\K.*" )
            local _DEVICE_NAME=$( eval "$_PARSE_NAME_ID" | grep -i "Device:" | grep -Eiv "SDevice:|$_DEVICE" | cut -d ':' -f 2 | uniq | grep -oP "^\t\K.*" )
            local _DRIVER=$( eval "$_PARSE_ALL_ID" | grep -i "Driver:" | awk '{print $2}' | uniq )
            local _IOMMU=$( eval "$_PARSE_ALL_ID"| grep -i "IOMMUGroup:" | awk '{print $2}' | uniq )
            local _VENDOR_NAME=$( eval "$_PARSE_NAME_ID" | grep -i "Vendor:" | grep -Eiv "SVendor:" | cut -d ':' -f 2 | uniq | grep -oP "^\t\K.*" )
            local _HWID=$( lspci -n -s "$_DEVICE" | cut -d ' ' -f 3 )

            IsDriverValid || return 1

            _CLASS_LIST+=( "$_CLASS" )
            _DEVICE_NAME_LIST+=( "$_DEVICE_NAME" )
            _DRIVER_LIST+=( "$_DRIVER" )
            _HWID_LIST+=( "$_HWID" )
            _IOMMU_LIST+=( "$_IOMMU" )
            _SLOT_ID_LIST+=( "$_DEVICE" )
            _VENDOR_NAME_LIST+=( "$_VENDOR_NAME" )
        done

        return 0
    }

    function SetParseOperation
    {
        # <remarks> Set commands for each parse type. </remarks>
        case "$_OPTION" in
            # <remarks> If parsing file and file does not exist, recursive call to parse internet. </remarks>
            "$_OPTION_PARSE_IOMMU_FILE" )
                _OUTPUT="$_OUTPUT_PARSE_FILE"
                _PARSE_ALL_ID+=" $_PARSE_ARGS_FILE"
                _PARSE_NAME_ID+=" $_PARSE_ARGS_FILE"
                _PARSE_SLOT_ID+=" $_PARSE_ARGS_FILE"
                _PARSE_QUOTES+=" $_PARSE_ARGS_FILE"

                if [[ -z "$_PARSE_IOMMU_FILENAME" ]]; then
                    echo -e "$_PREFIX_ERROR Failed to find file database to parse."
                    return 1
                fi

                return 0
                ;;

            # <remarks> If internet is not available, exit. </remarks>
            "$_OPTION_PARSE_IOMMU_ONLINE" )
                _OUTPUT="$_OUTPUT_PARSE_ONLINE"
                local _PARSE_ALL_ID+=" $_PARSE_ARGS_ONLINE"
                local _PARSE_NAME_ID+=" $_PARSE_ARGS_ONLINE"
                local _PARSE_SLOT_ID+=" $_PARSE_ARGS_ONLINE"
                local _PARSE_QUOTES+=" $_PARSE_ARGS_ONLINE"

                if ! GetInternetStatus &> /dev/null; then
                    echo -e "$_PREFIX_ERROR Failed to find online database to parse."
                    return 1
                fi

                return 0
                ;;

            "$_OUTPUT_PARSE_LOCAL" | * )
                _OUTPUT="$_OUTPUT_PARSE_LOCAL"
                ;;
        esac

        return 0
    }
# </code>