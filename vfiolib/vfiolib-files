#!/bin/bash sh

#
# Filename:         vfiolib-files
# Description:      Gets and sets necessary backups of system files.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <summary> Using </summary>
# <code>
    source vfiolib-all
# </code>

# <params>
    # <remarks> Files </remarks>
    declare -gr _BACKUPS_PATH="files/"

    declare -gr _APPARMOR_QEMU_BACKUP="libvirt-qemu"
    declare -gr _APPARMOR_QEMU_FILE_PATH="/etc/apparmor.d/local/abstractions/libvirt-qemu"
    declare -gr _APPARMOR_QEMU_FILE_URL=""

    declare -gr _CUSTOM_GRUB_FILE_BACKUP="custom"
    declare -gr _CUSTOM_GRUB_FILE_PATH="/etc/grub.d/proxifiedScripts/custom"
    # local CUSTOM_GRUB_FILE_URL=""

    declare -gr _GRUB_FILE_BACKUP_1="grub"
    declare -gr _GRUB_FILE_BACKUP_2="grub.new"
    declare -gr _GRUB_FILE_PATH_1="/etc/default/grub"
    declare -gr _GRUB_FILE_PATH_2="/usr/share/grub/default/grub"
    # local GRUB_FILE_URL=""

    declare -gr _INITRAMFS_MODULES_FILE_BACKUP="initramfs-tools"
    declare -gr _INITRAMFS_MODULES_FILE_PATH="/etc/initramfs-tools/modules"

    declare -gr _MODPROBE_BLACKLISTS_FILE_BACKUP="pci-blacklists.conf"
    declare -gr _MODPROBE_BLACKLISTS_FILE_PATH="/etc/modprobe.d/pci-blacklists.conf"

    declare -gr _MODPROBE_VFIO_FILE_BACKUP="vfio.conf"
    declare -gr _MODPROBE_VFIO_FILE_PATH="/etc/modprobe.d/vfio.conf"

    declare -gr _MODULES_FILE_BACKUP="modules"
    declare -gr _MODULES_FILE_PATH="/etc/modules"

    declare -gr _QEMU_FILE_BACKUP="qemu.conf"
    declare -gr _QEMU_FILE_PATH="/etc/libvirt/qemu.conf"
    declare -gr _QEMU_FILE_URL="https://github.com/libvirt/libvirt/blob/master/src/qemu/qemu.conf.in"
# </params>

# <code>
    function CopyBackupsToPaths
    {
        GetBackups || return 1
        SetBackups || return 1

        if ! [ sudo cp -rv "$_APPARMOR_QEMU_BACKUP" "$_APPARMOR_QEMU_FILE_PATH" ] \
            || [ ! sudo cp -rv "$_CUSTOM_GRUB_FILE_BACKUP" "$_CUSTOM_GRUB_FILE_PATH" ] \
            || [ ! sudo cp -rv "$_INITRAMFS_MODULES_FILE_BACKUP" "$_INITRAMFS_MODULES_FILE_PATH" ] \
            || [ ! sudo cp -rv "$_MODPROBE_BLACKLISTS_FILE_BACKUP" "$_MODPROBE_BLACKLISTS_FILE_PATH" ] \
            || [ ! sudo cp -rv "$_MODPROBE_VFIO_FILE_BACKUP" "$_MODPROBE_VFIO_FILE_PATH" ] \
            || [ ! sudo cp -rv "$_MODULES_FILE_BACKUP" "$_MODULES_FILE_PATH" ] \
            || [ ! sudo cp -rv "$_QEMU_FILE_BACKUP" "$_QEMU_FILE_PATH" ]; then
            echo -e "$_PREFIX_ERROR Could not copy files."
            return 1
        fi

        if ! [ sudo chown root: root "$_APPARMOR_QEMU_FILE_PATH" ] \
            || ! [ sudo chown root: root "$_CUSTOM_GRUB_FILE_PATH" ] \
            || ! [ sudo chown root: root "$_INITRAMFS_MODULES_FILE_PATH" ] \
            || ! [ sudo chown root: root "$_MODPROBE_BLACKLISTS_FILE_PATH" ] \
            || ! [ sudo chown root: root "$_MODPROBE_VFIO_FILE_PATH" ] \
            || ! [ sudo chown root: root "$_MODULES_FILE_PATH" ] \
            || ! [ sudo chown root: root "$_QEMU_FILE_PATH" ]; then
            echo -e "$_PREFIX_ERROR Could not set permissions for files."
            return 1
        fi
    }

    function ExecuteBackups
    {
        SetWorkingDirToBackupsFolder || return 1
        GetBackups || return 1
        SetBackups || return 1
        CopyBackupsToPaths || return 1
        return 0
    }

    function GetBackups
    {
        if [ -z "$_APPARMOR_QEMU_BACKUP" ] \
            || [ -z "$_CUSTOM_GRUB_FILE_BACKUP" ] \
            || [ -z "$_INITRAMFS_MODULES_FILE_BACKUP" ] \
            || [ -z "$_MODPROBE_BLACKLISTS_FILE_BACKUP" ] \
            || [ -z "$_MODPROBE_VFIO_FILE_BACKUP" ] \
            || [ -z "$_MODULES_FILE_BACKUP" ]; then
            echo -e "$_PREFIX_ERROR Could not find backup files."
            return 1
        fi

        if [ -z "$_GRUB_FILE_BACKUP_1" ]; then
            GetBackupsFor_GRUB || return 1
        fi

        if [ -z "$_QEMU_FILE_BACKUP" ]; then
            SetBackupsFor_QEMU || return 1
        fi

        return 0
    }

    function GetBackupsFor_GRUB
    {
        if [[ -e "$_GRUB_FILE_PATH_1" ]]; then
            return 0
        fi

        if [[ -z "$_GRUB_FILE_PATH_2" && -z "$_GRUB_FILE_BACKUP_1" ]]; then
            echo -e "$_PREFIX_ERROR Failed to find GRUB source file."
            return 1
        fi

        if [[ -z "$_GRUB_FILE_PATH_BACKUP" ]]; then
            if ! sudo cp "$_GRUB_FILE_PATH_2 $_GRUB_FILE_BACKUP_1"; then
                echo -e "$_PREFIX_ERROR Failed to backup GRUB source file."
                return 1
            fi
        fi

        return 0
    }

    function SetBackupsFor_QEMU
    {
        if [[ -e "$_QEMU_FILE_PATH" ]]; then
            return 0
        fi

        if [[ -z "$_QEMU_FILE_BACKUP" ]]; then
            echo -e "$_PREFIX_ERROR Could not find QEMU source file. Attempting to download."

            if ! [ command -v curl &> /dev/null ]; then
                echo -e "$_PREFIX_ERROR Required command 'curl' is not installed."
                return 1
            fi

            if ! [ curl -v "$_QEMU_FILE_URL" -o "$_QEMU_FILE_BACKUP" &> /dev/null ]; then
                echo -e "$_PREFIX_ERROR Could not backup QEMU source file."
                return 1
            fi
        fi

        if ! [ sudo cp $_QEMU_FILE_BACKUP $_QEMU_FILE_PATH &> /dev/null ]; then
            echo -e "$_PREFIX_ERROR Could not restore QEMU backup file."
            return 1
        fi

        return 0
    }

    function SetWorkingDirToBackupsFolder
    {
        if ! [ cd "$_BACKUPS_PATH" &> /dev/null ]; then
            echo -e "$_PREFIX_ERROR Could not set working directory."
            return 1
        fi

        return 0
    }

    function SetBackups
    {
        SetBackupsFor_GRUB || return 1
        return 0
    }

    function SetBackupsFor_GRUB
    {
        if ! sudo cp "$_GRUB_FILE_BACKUP_1" "$_GRUB_FILE_BACKUP_2" &> /dev/null; then
            echo -e "$_PREFIX_ERROR Could not copy GRUB backup file."
            return 1
        fi

        # <remarks> Overwrite target lines, lines that need to be set to defaults. </remarks>
        local -r _LINE_GRUB_DISTRIBUTOR="GRUB_DISTRIBUTOR=\`lsb_release -i -s 2> /dev/null || echo "$( lsb_release -i -s )"\`"
        local -r _LINE_GRUB_CMDLINE_DEFAULT="GRUB_CMDLINE_LINUX_DEFAULT=\"quiet\""
        local -r _LINE_GRUB_CMDLINE="GRUB_CMDLINE_LINUX=\"\""

        if ! [ sed -i 's/GRUB_DISTRIBUTOR=*/'"$_LINE_GRUB_DISTRIBUTOR" "$_GRUB_FILE_BACKUP_2" ] \
            || ! [ sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT=*/'"$_LINE_GRUB_CMDLINE_DEFAULT" "$_GRUB_FILE_BACKUP_2" ] \
            || ! [ sed -i 's/GRUB_CMDLINE_LINUX=*/'"$_LINE_GRUB_CMDLINE" "$_GRUB_FILE_BACKUP_2" ]; then
            echo -e "$_PREFIX_ERROR Could not clear target lines of GRUB backup file."
            return 1
        fi

        if ! [ -z $( grep "$_LINE_GRUB_DISTRIBUTOR" "$_GRUB_FILE_BACKUP_2" ) ] \
            || ! [ -z $( grep "$_LINE_GRUB_DISTRIBUTOR" "$_GRUB_FILE_BACKUP_2" ) ] \
            || ! [ -z $( grep "$_LINE_GRUB_DISTRIBUTOR" "$_GRUB_FILE_BACKUP_2" ) ]; then
            echo -e "$_PREFIX_ERROR Could not overwrite target lines of GRUB backup file."
            return 1
        fi

        # <remarks> Note: this must be the second file (that is the overwritten copy) </remarks>
        if ! [ sudo cp "$_GRUB_FILE_BACKUP_2" "$_GRUB_FILE_PATH_1" &> /dev/null ]; then
            echo -e "$_PREFIX_ERROR Could not restore GRUB backup file."
            return 1
        fi

        return 0
    }
# </code>