#!/bin/bash sh

#
# Filename:         vfiolib-all
# Description:      Effortlessly deploy a VFIO setup (PCI passthrough).
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source vfiolib-extras
    source vfiolib-iommu
    source vfiolib-setup
    source vfiolib-usage
    source vfiolib-utils
# </code>

# <params>
    # <summary>
    # Color coding
    # Reference URL: 'https://www.shellhacks.com/bash-colors'
    # </summary>
    declare -gr _SET_COLOR_GREEN='\033[0;32m'
    declare -gr _SET_COLOR_RED='\033[0;31m'
    declare -gr _SET_COLOR_YELLOW='\033[0;33m'
    declare -gr _RESET_COLOR='\033[0m'

    # <summary> Append output </summary>
    declare -gr _PREFIX_NOTE="${_SET_COLOR_YELLOW}Note:$_RESET_COLOR"
    declare -gr _PREFIX_ERROR="${_SET_COLOR_YELLOW}An error occurred:$_RESET_COLOR"
    declare -gr _PREFIX_FAIL="${_SET_COLOR_RED}Failure:$_RESET_COLOR"
    declare -gr _PREFIX_PASS="${_SET_COLOR_GREEN}Success:$_RESET_COLOR"

    # <remarks> Output statement </remarks>
    declare -g _OUTPUT_INVALID_PACKAGE_MANAGER="$_PREFIX_ERROR Command '$_PACKAGE_MANAGER' is not supported."

    # <remarks> System validation </remarks>
    declare -g _IS_INSTALLED_SYSTEMD=false
    IsInstalledCommand "systemd" &> /dev/null && _IS_INSTALLED_SYSTEMD=true
    declare -gl _PACKAGE_MANAGER=""
    declare -gl _OPERATING_SYSTEM="$( lsb_release -is )"
    GetLinuxDistro &> /dev/null

    # <remarks> File templates. </remarks>
    declare -g _DISCLAIMER_FILE_CONTENTS=(
        "#### Generated by 'portellam/deploy-vfio-main'"
        "# WARNING: Any modifications to this file will be modified by 'deploy-vfio-main'"
        "#"
    )

    declare -g _VFIO_DISCLAIMER_FILE_CONTENTS=(
        "${_DISCLAIMER_FILE_CONTENTS[@]}"
        "# Run lspci to view hardware information."
        "# You must run update-initramfs(8) to effect this change."
        "#"
    )

    # <remarks> Memory </remarks>
    declare -g _STR_MAX_MEMORY=$( cat /proc/meminfo | grep MemTotal | cut -d ":" -f 2 | cut -d "k" -f 1 )
    declare -gi _INT_MAX_MEMORY=${_STR_MAX_MEMORY## }
# </params>

# <code>
    # <summary> Distro-agnostic, Check if package exists on-line. </summary>
    # <param name="1"> string: the software package(s) </param>
    function FindPackage
    {
        if [[ "$1" == "" ]] \
            || [[ "$_PACKAGE_MANAGER" == "" ]]; then
            echo -e "$_PREFIX_ERROR Input values are empty."
            return 1
        fi

        case "$_PACKAGE_MANAGER" in
            "apt" )
                apt list "$1"
                ;;

            "dnf" )
                dnf search "$1"
                ;;

            "pacman" )
                pacman -Ss "$1"
                ;;

            "gentoo" )
                emerge --search "$1"
                ;;

            "urpmi" )
                urpmq "$1"
                ;;

            "yum" )
                yum search "$1"
                ;;

            "zypper" )
                zypper se "$1"
                ;;

            * )
                echo -e "$_OUTPUT_INVALID_PACKAGE_MANAGER"
                return 1
                ;;
        esac

        SaveExitCode

        if [[ "$_LAST_EXIT_CODE" -ne 0 ]]; then
            case "$_PACKAGE_MANAGER" in
                *" "* )
                    echo -e "$_PREFIX_ERROR Packages '$_PACKAGE_MANAGER' were not found."
                    ;;

                * )
                    echo -e "$_PREFIX_ERROR Package '$_PACKAGE_MANAGER' was not found."
                    ;;
            esac

            return 1
        fi

        return "$_LAST_EXIT_CODE"
    }

    # <summary> Test network connection to Internet. Ping DNS servers by address and name. </summary>
    # <param name="1"> bool: True, enable verbosity. False, no change. </param>
    function GetInternetStatus
    {
        function PingServer
        {
            IsString $1 || return "$?"
            ping -q -c 1 $1 &>/dev/null
            return "$?"
        }

        local _IS_VERBOSE=false

        if [[ "$1" == true ]]; then
            _IS_VERBOSE=true
        fi

        if "$_IS_VERBOSE"; then
            echo -en "Testing Internet connection...\t"
        fi

        if ! PingServer "8.8.8.8" || ! PingServer "1.1.1.1"; then
            false
        fi

        SaveExitCode

        if "$_IS_VERBOSE"; then
            ( return "$_LAST_EXIT_CODE" )
            PrintPassOrFail
            echo -en "Testing connection to DNS...\t"
        fi

        if ! PingServer "www.google.com" || ! PingServer "www.yandex.com"; then
            false
        fi

        SaveExitCode

        if "$_IS_VERBOSE"; then
            ( return "$_LAST_EXIT_CODE" )
            PrintPassOrFail
        fi

        if [[ "$_LAST_EXIT_CODE" -ne 0 ]]; then
            echo -e "Failed to ping Internet/DNS servers. Check network settings or firewall, and try again."
        fi

        return "$_LAST_EXIT_CODE"
    }

    # <summary> Check if current kernel and distro are supported, and if the expected Package Manager is installed. </summary>
    function GetLinuxDistro
    {
        # <summary> Check if current Operating System matches Package Manager, and Check if PM is installed. </summary>
        function GetPackageManagerByOS
        {
            if [[ "$_OS_WITH_APT" =~ .*${_OPERATING_SYSTEM}.* ]]; then
                _PACKAGE_MANAGER="apt"

            elif [[ "$_OS_WITH_DNF_OR_YUM" =~ .*${_OPERATING_SYSTEM}.* ]]; then
                _PACKAGE_MANAGER="dnf"

                IsInstalledCommand "$_PACKAGE_MANAGER" &>/dev/null && return 0
                _PACKAGE_MANAGER="yum"

            elif [[ "$_OS_WITH_PACMAN" =~ .*${_OPERATING_SYSTEM}.* ]]; then
                _PACKAGE_MANAGER="pacman"

            elif [[ "$_OS_WITH_PORTAGE" =~ .*${_OPERATING_SYSTEM}.* ]]; then
                _PACKAGE_MANAGER="portage"

            elif [[ "$_OS_WITH_URPMI" =~ .*${_OPERATING_SYSTEM}.* ]]; then
                _PACKAGE_MANAGER="urpmi"

            elif [[ "$_OS_WITH_ZYPPER" =~ .*${_OPERATING_SYSTEM}.* ]]; then
                _PACKAGE_MANAGER="zypper"

            else
                _PACKAGE_MANAGER=""
            fi

            IsInstalledCommand "$_PACKAGE_MANAGER" &> /dev/null
            return "$?"
        }

        local _KERNEL="$( uname -o | tr '[:upper:]' '[:lower:]' )"
        local _OS_WITH_APT="debian bodhi deepin knoppix mint peppermint pop ubuntu kubuntu lubuntu xubuntu "
        local _OS_WITH_DNF_OR_YUM="redhat berry centos cern clearos elastix fedora fermi frameos mageia opensuse oracle scientific suse"
        local _OS_WITH_PACMAN="arch manjaro"
        local _OS_WITH_PORTAGE="gentoo"
        local _OS_WITH_URPMI="opensuse"
        local _OS_WITH_ZYPPER="mandriva mageia"

        if [[ "$_KERNEL" == "" || "$_OPERATING_SYSTEM" == "" ]]; then
            echo -e "$_PREFIX_ERROR Null values."
            return 1
        fi

        if [[ "$_KERNEL" != *"linux"* ]]; then
            echo -e "$_PREFIX_ERROR Kernel '$( uname -o )' is not supported."
            return 1
        fi

        if ! GetPackageManagerByOS; then
            echo -e "$_PREFIX_ERROR Distribution '$( lsb_release -is )' is not supported."
            return 1
        fi

        return 0
    }

    # <summary> Distro-agnostic, Install a software package. </summary>
    # <param name="1"> string: the software package(s) </param>
    # <param name="2"> bool: true/false do/don't reinstall software package and configuration files (if possible) </param>
    function InstallPackage
    {
        if [[ "$_PACKAGE_MANAGER" == "" ]] \
            || [[ "$1" == "" ]]; then
            echo -e "$_PREFIX_ERROR Input values are empty."
            return 1
        fi

        local _DO_REINSTALL=false
        local _OPTION=""

        if [[ "$2" == true ]]; then
            _DO_REINSTALL=true
        fi

        # <remarks> Auto-update and auto-install selected packages </remarks>
        case "$_PACKAGE_MANAGER" in
            "apt" )
                if "$_DO_REINSTALL"; then
                    _OPTION="--reinstall -o Dpkg::Options::=--force-confmiss"
                fi

                apt update && apt full-upgrade -y && apt install -y "$_OPTION" "$1" || return 1
                ;;

            "dnf" )
                dnf upgrade && dnf install "$1"
                ;;

            "pacman" )
                pacman -Syu && pacman -S "$1"
                ;;

            "gentoo" )
                emerge -u @world && emerge "$1"
                ;;

            "urpmi" )
                urpmi --auto-update && urpmi "$1"
                ;;

            "yum" )
                yum update && yum install "$1"
                ;;

            "zypper" )
                zypper refresh && zypper in "$1"
                ;;

            * )
                echo -e "$_OUTPUT_INVALID_PACKAGE_MANAGER"
                false
                ;;
        esac

        PrintPassOrFail "Installing software packages..."
        return "$?"
    }

    # <summary> Check if system file is original or not. </summary>
    # <parameter name="1"> string: the system file </parameter>
    # <parameter name="2"> string: the software package(s) to install </parameter>
    # <parameter name="_IS_CONNECTED_TO_INTERNET"> bool: GetInternetStatus </parameter>
    function IsFileOriginal
    {
        if [[ "$2" == "" ]] \
            || [[ "$1" == "" ]]; then
            echo -e "$_PREFIX_ERROR Input values are empty."
            return 1
        fi

        local _BACKUP_FILE_EXISTS=false
        local _IS_ORIGINAL_SYSTEM_FILE=false

        # <remarks> Original system file does not exist. </remarks>
        if "$_IS_CONNECTED_TO_INTERNET" && [[ -z "$1" ]] && InstallPackage "$2"; then
            _IS_ORIGINAL_SYSTEM_FILE=true
        fi

        # <remarks> Backup system file. </remarks>
        if BackupFile $1; then                                                      # remove?
            _BACKUP_FILE_EXISTS=true
        fi

        # <remarks> Do no work. </remarks>
        if ! "$_BACKUP_FILE_EXISTS" && ! "$_IS_ORIGINAL_SYSTEM_FILE"; then
            return 1
        fi

        # <remarks> It is unknown if system file *is* original. </remarks>
        if "$_IS_CONNECTED_TO_INTERNET" && "$_BACKUP_FILE_EXISTS" && ! "$_IS_ORIGINAL_SYSTEM_FILE"; then
            sudo rm -f "$1" &> /dev/null
            InstallPackage "$2" true && _IS_ORIGINAL_SYSTEM_FILE=true
        fi

        # <remarks> System file *is not* original. Attempt to restore backup. </remarks>
        if "$_BACKUP_FILE_EXISTS" && ! "$_IS_ORIGINAL_SYSTEM_FILE"; then
            RestoreFile $1                                                           # remove?
            return "$?"
        fi

        return 0
    }

    # <summary> Distro-agnostic, check if package is installed. </summary>
    # <param name="1"> string: the software package(s) </param>
    function IsInstalledPackage
    {
        if [[ "$_PACKAGE_MANAGER" == "" ]] \
            || [[ "$1" == "" ]]; then
            echo -e "$_PREFIX_ERROR Input values are empty."
            return 1
        fi

        local _GET_COMMAND=""

        # <remarks> Check if package is not installed </remarks>
        case "$_PACKAGE_MANAGER" in
            "apt" )
                _GET_COMMAND="sudo dpkg -s $1"
                ;;

            * )
                echo -e "$_OUTPUT_INVALID_PACKAGE_MANAGER"
                return 1
                ;;
        esac

        local -i _COUNT_DELIM=$( echo "$1" | wc -w )

        while [[ "$_COUNT_DELIM" -gt 0 ]]; do
            local str_package=$( echo "$1" | cut -d ' ' -f "$_COUNT_DELIM" )
            eval "$_GET_COMMAND" || return 1
            (( _COUNT_DELIM-- ))
        done

        return 0
    }

    # <summary> Check if current user is sudo or root. </summary>
    function IsSudoUser
    {
        if [[ $( whoami ) != "root" ]]; then
            echo -e "$_PREFIX_ERROR User is not sudo/root."
            return 1
        fi

        return 0
    }

    # <summary> Append Pass or Fail given exit code. </summary>
    # <param name="_LAST_EXIT_CODE"> the last exit code </param>
    function PrintPassOrFail
    {
        SaveExitCode

        if [[ "$1" == "" ]]; then
            echo -en "$1\t"
        fi

        if [[ "$_LAST_EXIT_CODE" -ne 1 ]]; then
            echo -e "$_SUFFIX_FAIL"
        else
            echo -e "$_SUFFIX_PASS"
        fi

        return "$_LAST_EXIT_CODE"
    }

    # <summary> Save last exit code. </summary>
    function SaveExitCode
    {
        _LAST_EXIT_CODE="$?"
    }

    # <summary> Update GetInternetStatus </summary>
    function SetInternetStatus
    {
        GetInternetStatus true

        if [[ "$?" -ne 0 ]]; then
            _IS_CONNECTED_TO_INTERNET=false
            return 1
        fi

        _IS_CONNECTED_TO_INTERNET=true
        return 1
    }

    # <summary> Distro-agnostic, Uninstall a software package. </summary>
    # <param name="1"> string: the software package(s) </param>
    function UninstallPackage
    {
        if [[ "$_PACKAGE_MANAGER" == "" ]] \
            || [[ "$1" == "" ]]; then
            echo -e "$_PREFIX_ERROR Input values are empty."
            return 1
        fi

        # <remarks> Uninstall selected packages </remarks>
        case "$_PACKAGE_MANAGER" in
            "apt" )
                apt uninstall "$1"
                ;;

            "dnf" )
                dnf remove "$1"
                ;;

            "pacman" )
                pacman -R "$1"
                ;;

            "gentoo" )
                emerge -Cv "$1"
                ;;

            "urpmi" )
                urpme "$1"
                ;;

            "yum" )
                yum remove "$1"
                ;;

            "zypper" )
                zypper remove "$1"
                ;;

            * )
                echo -e "$_OUTPUT_INVALID_PACKAGE_MANAGER"
                false
                ;;
        esac

        PrintPassOrFail "Uninstalling software packages..."
        return "$?"
    }

    # <summary> Update or Clone repository given if it exists or not. </summary>
    # <param name="1"> string: the directory </param>
    # <param name="2"> string: the full repo name </param>
    # <param name="3"> string: the username </param>
    function UpdateOrCloneGitRepo
    {
        if [[ "$3" == "" ]] \
            || [[ "$2" == "" ]] \
            || [[ "$1" == "" ]]; then
            echo -e "$_PREFIX_ERROR Input values are empty."
            return 1
        fi

        if [[ ! -d "$1$2" ]] \
            && sudo mkdir -p "$1$3"; then
            echo -e "$_PREFIX_ERROR Failed to create directory '$1$3'."
            return 1
        fi

        # <remarks> Update existing GitHub repository. </remarks>
        if [[ -d "$1$2" ]]; then
            cd "$1$2"

            if ! git pull &> /dev/null; then
                echo -e "$_PREFIX_ERROR Failed to update repository."
                return 1
            fi

            return 0

        # <remarks> Clone new GitHub repository. </remarks>
        elif [[ -d "$1$3" ]]; then
            for _TRIES_COUNT in $( seq 0 2 ); do
                read -r -p "Clone repo '$2'? [Y/n]: " _ANSWER

                case "$_ANSWER" in
                    [Yy]* )
                        cd "$1$3"

                        if ! git clone "https://github.com/$2" &> /dev/null; then
                            echo -e "$_PREFIX_ERROR Failed to download repository."
                            return 1
                        fi

                        return 0 ;;

                    [Nn]* )
                        break ;;

                    * )
                        echo "Please answer Y/n." ;;
                esac
            done

            return 1

        else
            return 1
        fi
    }
# </code>