#!/bin/bash sh

#
# Filename:         vfiolib-setup
# Description:      Select VFIO setup.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source ../bashlib/bin/bashlib-all
    source vfiolib-extras
    source vfiolib-iommu
# </code>

# <code>
    function Multiboot_VFIO
    {
        # <params>
        local readonly str_file1="/etc/default/grub"
        local readonly str_file2="/etc/grub.d/proxifiedScripts/custom"
        local readonly str_file1_backup="etc_default_grub"
        local readonly str_file2_backup="etc_grub.d_proxifiedScripts_custom"
        # </params>

        GoToScriptDir && cd "${str_files_dir}"

        if ! IsFile "${str_file1_backup}" || IsFile "${str_file2_backup}"; then
            return "$?"
        fi


    }

    function Static_VFIO
    {
        # <params>
        declare -a arr_file1_contents arr_file2_contents arr_file3_contents arr_file4_contents arr_file5_contents
        local readonly str_file1="/etc/default/grub"
        local readonly str_file2="/etc/initramfs-tools/modules"
        local readonly str_file3="/etc/modprobe.d/pci-blacklists.conf"
        local readonly str_file4="/etc/modprobe.d/vfio.conf"
        local readonly str_file5="/etc/modules"
        local readonly str_file1_backup="etc_default_grub"
        local readonly str_file2_backup="etc_initramfs-tools_modules"
        local readonly str_file3_backup="etc_modprobe.d_pci-blacklists.conf"
        local readonly str_file4_backup="etc_modprobe.d_vfio.conf"
        local readonly str_file5_backup="etc_modules"

        local readonly str_driver_VFIO_PCI="vfio-pci"
        local str_GRUB="GRUB_CMDLINE_LINUX_DEFAULT="
        local readonly str_GRUB_blacklist="modprobe.blacklist="
        local readonly str_GRUB_PCI_STUB="pci-stub.ids="
        local readonly str_GRUB_VFIO_PCI="vfio_pci.ids="
        local readonly str_modprobe_blacklist="blacklist "
        local readonly str_modules_VFIO_PCI="vfio_pci ids="
        local readonly str_initramfs_modules_VFIO_PCI="options ${str_modules_VFIO_PCI}"
        # </params>

        # <remarks> Check if backup files exist. </remarks>
        GoToScriptDir && cd "${str_files_dir}"

        if ! IsFile "${str_file1_backup}" || IsFile "${str_file2_backup}" || IsFile "${str_file3_backup}" || IsFile "${str_file4_backup}"|| IsFile "${str_file5_backup}"; then
            return "${?}"
        fi

        # <remarks> Backup existing system files. </remarks>
        # NOTE: will a conflict exist should backup files exist in given directories (example: modprobe.d) and not others (ex: grub)
        BackupFile "${str_file1_backup}"
        BackupFile "${str_file2_backup}"
        BackupFile "${str_file3_backup}"
        BackupFile "${str_file4_backup}"
        BackupFile "${str_file5_backup}"

        # <summary> GRUB </summary>
            # <remarks> Read fileComment specified line. </remarks>
            declare -a arr_file1=()

            if FindLine "${str_GRUB}" &> /dev/null; then
                ReadFile arr_file1 "${str_file1}"

                for int_key in "${!arr_file1[@]}"; do
                    local var_line="${arr_file1[$int_key]}"

                    case "${var_line}" in
                        "${str_GRUB}"* )
                            arr_file1[$int_key]="#${str_GRUB}"
                            ;;
                    esac

                    if [[ "${var_line}" == "${str_GRUB}"* ]]; then
                        arr_file1[$int_key]="#${str_GRUB}"
                    fi
                done
            fi
            

            
            if grep -iF "${str_GRUB}"*; then
                while read var_line; do
                    if [[ "${var_line}" ~= "${str_GRUB}"* ]]; then
                        var_line="#${str_GRUB}"
                    fi
                done >> "${str_file1}"
            fi

            local str_GRUB_temp=""
            IsString "${str_GRUB_Allocate_CPU}" &> /dev/null && str_GRUB_temp+="${str_GRUB_Allocate_CPU}"
            IsString "${str_GRUB_hugepages}" &> /dev/null && str_GRUB_temp+=" ${str_GRUB_hugepages}"

            if IsString "${str_driver_list_VFIO}" &> /dev/null; then
                str_GRUB_temp+=" ${str_GRUB_blacklist}${str_driver_list_VFIO}"
            fi

            if IsString "${str_driver_list_STUB}" &> /dev/null; then
                str_GRUB_temp+=" ${str_GRUB_PCI_STUB}${str_HWID_list_STUB}"
            fi

            if IsString "${str_HWID_list_VFIO}" &> /dev/null; then
                str_GRUB_temp+=" ${str_GRUB_VFIO_PCI}${str_HWID_list_VFIO}"
            fi

            readonly str_GRUB+="\"${str_GRUB_temp}\""

        # <remarks> Initramfs </remarks>

        # <remarks> Modules </remarks>

        # <remarks> Modprobe: blacklists </remarks>

        # <remarks> Modprobe: conf </remarks>

        return 0
    }

    function Setup_VFIO
    {
        # <params>

        # </params>

        # diff between static and multiboot => static: all IOMMU for VFIO with PCI STUB devices will be binded to VFIO PCI driver? append only to GRUB and system files.
        # multiboot: PCI STUB devices will use PCI STUB driver? append only GRUB and multiple GRUB entries

        return 0
    }

    function UpdateExisting_VFIO
    {
        return 0
    }
# </code>

# <params>
# global vars go here
# </params>