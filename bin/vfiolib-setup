#!/bin/bash sh

#
# Filename:         vfiolib-setup
# Description:      Select VFIO setup.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# TODO:
#
# -create array of drivers, hw ids, names, etc. to come from vfio-iommu.
# -add comments
#


# <remarks> Using </remarks>
# <code>
    source ../bashlib/bin/bashlib-all
    source vfiolib-extras
    source vfiolib-iommu
# </code>

# <code>
    function Multiboot_VFIO
    {
        # <params>
        local readonly str_file1="/etc/default/grub"
        local readonly str_file2="/etc/grub.d/proxifiedScripts/custom"
        local readonly str_file1_backup="etc_default_grub"
        local readonly str_file2_backup="etc_grub.d_proxifiedScripts_custom"
        # </params>

        GoToScriptDir && cd "${str_files_dir}"

        if ! IsFile "${str_file1_backup}" || IsFile "${str_file2_backup}"; then
            return "$?"
        fi


    }

    function Static_VFIO
    {
        # <params>
        declare -a arr_file1_contents arr_file2_contents arr_file3_contents arr_file4_contents arr_file5_contents
        local readonly str_file1="/etc/default/grub"
        local readonly str_file2="/etc/initramfs-tools/modules"
        local readonly str_file3="/etc/modprobe.d/pci-blacklists.conf"
        local readonly str_file4="/etc/modprobe.d/vfio.conf"
        local readonly str_file5="/etc/modules"
        local readonly str_file1_backup="etc_default_grub"
        local readonly str_file2_backup="etc_initramfs-tools_modules"
        local readonly str_file3_backup="etc_modprobe.d_pci-blacklists.conf"
        local readonly str_file4_backup="etc_modprobe.d_vfio.conf"
        local readonly str_file5_backup="etc_modules"

        local readonly str_driver_VFIO_PCI="vfio-pci"
        local str_GRUB="GRUB_CMDLINE_LINUX_DEFAULT="
        local readonly str_GRUB_blacklist="modprobe.blacklist="
        local readonly str_GRUB_PCI_STUB="pci-stub.ids="
        local readonly str_GRUB_VFIO_PCI="vfio_pci.ids="
        local readonly str_modprobe_blacklist="blacklist "
        local readonly str_modules_VFIO_PCI="vfio_pci ids="
        local readonly str_initramfs_modules_VFIO_PCI="options ${str_modules_VFIO_PCI}"
        local readonly str_VFIO_PCI_driver="vfio-pci"

        local readonly var_get_softdep='softdep ${str_driver} pre: vfio-pci'
        # </params>

        # <remarks> Check if backup files exist. </remarks>
        GoToScriptDir && cd "${str_files_dir}"

        if ! IsFile "${str_file1_backup}" || IsFile "${str_file2_backup}" || IsFile "${str_file3_backup}" || IsFile "${str_file4_backup}"|| IsFile "${str_file5_backup}"; then
            return "${?}"
        fi

        # <remarks> Backup existing system files. </remarks>
        # NOTE: will a conflict exist should backup files exist in given directories (example: modprobe.d) and not others (ex: grub)
        BackupFile "${str_file1_backup}"
        BackupFile "${str_file2_backup}"
        BackupFile "${str_file3_backup}"
        BackupFile "${str_file4_backup}"
        BackupFile "${str_file5_backup}"

        # <summary> GRUB </summary>
            # <remarks> Get file. </remarks>
            declare -a arr_file1=( "${arr_vfio_disclaimer[@]}" )
            # IsFileOriginal "${str_file1}" || return $?
            ReadFile "arr_file1" "${str_file1}" || return $?

            # <remarks> Organize new line. </remarks>
            local str_GRUB_temp=""
            IsString "${str_GRUB_Allocate_CPU}" &> /dev/null && str_GRUB_temp+="${str_GRUB_Allocate_CPU}"
            IsString "${str_GRUB_hugepages}" &> /dev/null && str_GRUB_temp+=" ${str_GRUB_hugepages}"

            if IsString "${str_driver_list_VFIO}" &> /dev/null; then
                str_GRUB_temp+=" ${str_GRUB_blacklist}${str_driver_list_VFIO}"
            fi

            if IsString "${str_HWID_list_STUB}" &> /dev/null; then
                str_GRUB_temp+=" ${str_GRUB_PCI_STUB}${str_HWID_list_STUB}"
            fi

            if IsString "${str_HWID_list_VFIO}" &> /dev/null; then
                str_GRUB_temp+=" ${str_GRUB_VFIO_PCI}${str_HWID_list_VFIO}"
            fi

            # <remarks> Write new line to file. </remarks>
            readonly str_GRUB_temp+="\"${str_GRUB_temp}\""
            ReplaceLineInArray "arr_file1" "${str_GRUB}" "${str_GRUB_temp}" || return $?
            OverwriteFile "arr_file1" "${str_file1}" || return $?

        # <summary> Initramfs and Modules </summary>
            # <remarks> Organize new lines. </remarks>
            declare -a arr_file2=( "${arr_vfio_disclaimer[@]}" )
            declare -a arr_file5=( "${arr_vfio_disclaimer[@]}" )
            declare -a arr_softdep=()
            declare -a arr_initramfs_HWID=()
            declare -a arr_modules_HWID=()
            local str_new_line_VFIO_temp=""

            for str_driver in "${arr_drivers_VFIO_PCI[@]}"; do      # TODO: change to valid array
                arr_softdep+=(
                    $( eval "${var_get_softdep}" )
                    "${str_driver}"
                )
            done

            if IsString "${str_HWID_list_STUB}" &> /dev/null; then
                str_new_line_VFIO_temp+="${str_HWID_list_STUB}"
            fi

            if [[ "${#str_new_line_VFIO_temp[@]}" == *","* ]] && IsString "${str_HWID_list_VFIO}" &> /dev/null; then
                str_new_line_VFIO_temp+=",${str_HWID_list_VFIO}"
            fi

            readonly str_new_line_VFIO_temp

            readonly arr_initramfs_HWID=(
                "vfio"
                "vfio_iommu_type1"
                "vfio_virqfd"
                "#"
                "${arr_softdep[@]}"
                "#"
                "${str_modules_VFIO_PCI}${str_new_line_VFIO_temp}"
                "${str_initramfs_modules_VFIO_PCI}${str_new_line_VFIO_temp}"
                "${str_VFIO_PCI_driver}"
            )

            readonly arr_modules_HWID=(
                "vfio"
                "vfio_iommu_type1"
                "vfio_pci"
                "vfio_virqfd"
                "kvm"
                "kvm_intel"
                "apm power_off=1"
                "#"
                "${str_modules_VFIO_PCI}${str_new_line_VFIO_temp}"
            )

            # <remarks> Set new lines. </remarks>
            readonly arr_file2+=( "${arr_initramfs_HWID[@]}" )
            readonly arr_file5+=( "${arr_modules_HWID[@]}" )

            # <remarks> Write new line to file. </remarks>
            OverwriteFile "arr_file2" "${str_file2}" || return $?
            OverwriteFile "arr_file5" "${str_file5}" || return $?

        # <summary> Modprobe: blacklists </summary>
            # <remarks> Organize new lines. </remarks>
            declare -a arr_file3=( "${arr_vfio_disclaimer[@]}" )

            # <remarks> Set new lines. </remarks>
            for str_driver in "${arr_drivers_VFIO_PCI[@]}"; do      # TODO: change to valid array
                arr_file3+=( "${str_modprobe_blacklist}${str_driver}" )
            done

            readonly arr_file3

            # <remarks> Write new lines to file. </remarks>
            OverwriteFile "arr_file3" "${str_file3}" || return $?

        # <remarks> Modprobe: conf </remarks>
            # <remarks> Organize new lines. </remarks>
            declare -ar arr_file4=(
                "${arr_vfio_disclaimer[@]}"
                "${arr_softdep[@]}"
                "${str_initramfs_modules_VFIO_PCI}${str_new_line_VFIO_temp}"
            )

            # <remarks> Write new lines to file. </remarks>
            OverwriteFile "arr_file4" "${str_file4}" || return $?

        return 0
    }

    function Setup_VFIO
    {
        # <params>

        # </params>

        # diff between static and multiboot => static: all IOMMU for VFIO with PCI STUB devices will be binded to VFIO PCI driver? append only to GRUB and system files.
        # multiboot: PCI STUB devices will use PCI STUB driver? append only GRUB and multiple GRUB entries

        return 0
    }

    function UpdateExisting_VFIO
    {
        return 0
    }
# </code>

# <params>
# global vars go here
# </params>