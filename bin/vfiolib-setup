#!/bin/false

#
# Filename:         vfiolib-setup
# Description:      Select VFIO setup.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# TODO:
# -remove prefix underscore to local variable names
#
#

# <sources>
    source vfiolib-common
    source vfiolib-post-setup
    source vfiolib-files
    source vfiolib-parse
    source vfiolib-usage
# </sources>

# <functions>
    # <summary> Public </summary>
        function ExecuteMainSetup
        {
            function Main
            {
                if "${_ASK_TO_EXECUTE_VFIO_SETUP}"; then
                    echo
                fi

                while [[ "${?}" -ne 1 ]]; do
                    if "${_ASK_TO_EXECUTE_VFIO_SETUP}"; then
                        for COUNT in $( seq 0 2 ); do
                            read -r -p "Execute VFIO setup? [(M)ultiboot/(S)tatic/(U)ninstall/(N)o]: " ANSWER

                            case "${ANSWER}" in
                                [Mm]* )
                                    _EXECUTE_VFIO_SETUP_MULTIBOOT_WITH_GRUB=true
                                    break ;;

                                [Ss]* )
                                    _EXECUTE_VFIO_SETUP_STATIC_WITHOUT_GRUB=true
                                    break ;;

                                [Uu]* )
                                    _EXECUTE_VFIO_SETUP_UNINSTALL=true
                                    break ;;

                                [Nn]* )
                                    return 255 ;;

                                * )
                                    echo "Please answer 'M', 'S', 'U', or 'N'." ;;
                            esac
                        done

                        if ! [[ "${ANSWER}" =~ [MmSsUuNn] ]]; then
                            echo -e "${_PREFIX_ERROR} Failed to answer."
                            return 1
                        fi
                    fi

                    case true in
                        "${_EXECUTE_VFIO_SETUP_MULTIBOOT_WITH_GRUB}" )
                            ExecuteParse || return 1
                            ExecuteMultibootSetup || return 1 ;;

                        "${_EXECUTE_VFIO_SETUP_STATIC_WITHOUT_GRUB}" )
                            ExecuteParse || return 1
                            ExecuteStaticSetup || return 1 ;;

                        "${_EXECUTE_VFIO_SETUP_UNINSTALL}" )
                            ExecuteUninstallSetup || return 1 ;;
                    esac

                    break
                done

                return "${?}"
            }

            local OUTPUT="Executing VFIO setup...\t"
            PrintSuffixWait "${OUTPUT}"
            Main
            PrintSuffixPassOrFail "${OUTPUT}"
            return "${_LAST_EXIT_CODE}"
        }

        # <summary> Global setters </summary>
        function SetParameters
        {
            if [[ ! -z "${_ARE_MAIN_SETUP_PARAMS_SET}" ]] \
                && "${_ARE_MAIN_SETUP_PARAMS_SET}"; then
                return 0
            fi

            declare -g _ARE_MAIN_SETUP_PARAMS_SET=true

            declare -g _DEFAULT_MENU_ENTRY_TITLE="0"
            declare -g _LINE_GRUB_CMDLINE="quiet splash amd_iommu=on intel_iommu=on iommu=1,pt"
            declare -g _PREFERRED_MENU_ENTRY_TITLE=""
            declare -ga _CUSTOM_GRUB_FILE_CONTENTS=( )
            declare -ga _MENU_ENTRY_TITLE_LIST=( "${_PREFERRED_MENU_ENTRY_TITLE}" )

            # <remarks> Feature Flags </remarks>
            _FLAG_ADD_EARLY_LOAD_MODULE_ARGS=true
            _FLAG_ADD_LOG_LEVEL_ARGS=true
            _FLAG_ADD_PRIVACY_ARGS=false
            _FLAG_ADD_SET_POWER_ARGS=true
            _FLAG_ADD_SET_VIDEO_ARGS=true
            _FLAG_ADD_WIN10_REQUIRED_ARGS=true

            if "${_FLAG_ADD_LOG_LEVEL_ARGS}"; then
                _LINE_GRUB_CMDLINE="loglevel=3 ${_LINE_GRUB_CMDLINE}"
            fi

            if "${_FLAG_ADD_PRIVACY_ARGS}" \
                && IsInstalled "rfkill" &> /dev/null; then
                _LINE_GRUB_CMDLINE+=" rfkill.default_state=1 systemd.restore_state=0"
            fi

            if "${_FLAG_ADD_SET_POWER_ARGS}"; then
                _LINE_GRUB_CMDLINE+=" acpi=force apm=power_off pcie_aspm=off"
            fi

            if "${_FLAG_ADD_EARLY_LOAD_MODULE_ARGS}"; then
                _LINE_GRUB_CMDLINE+=" rd.driver.pre=vfio-pci rd.modules-load=vfio-pci"
            fi

            if "${_FLAG_ADD_SET_VIDEO_ARGS}"; then
                _LINE_GRUB_CMDLINE+=" video=efifb:off,vesafb:off"
            fi

            if "${_FLAG_ADD_WIN10_REQUIRED_ARGS}"; then
                _LINE_GRUB_CMDLINE+=" kvm.ignore_msrs=1"
            fi
        }

    # <summary> Private </summary>
        # <summary> Setup functions </summary>
            function ExecuteMultibootSetup
            {
                if ! "${_HAS_EXECUTED_BACKUPS}" \
                    || ! IsParseSelectionOfVGAValid \
                    || ! GetAllParamsForMultibootSetup \
                    || ! WriteFilesForMultibootSetup \
                    || ! ExecuteUpdateAfterSetup; then
                    return 1
                fi

                return 0
            }

            function ExecuteStaticSetup
            {
                DoesHostHaveVGA || return 1
                AskToSpecifyStaticSetup || return 1

                if "$_EXECUTE_VFIO_SETUP_STATIC_WITH_GRUB" \
                    && ( ! "${_HAS_EXECUTED_BACKUPS}" \
                    || ! GetParamsForAnySetup \
                    || ! AreParamsNotEmptyForStaticSetup \
                    || ! WriteFilesForGRUBStaticSetup \
                    || ! ExecuteUpdateAfterSetup ); then
                    return 1
                fi

                if ! "$_EXECUTE_VFIO_SETUP_STATIC_WITH_GRUB" \
                    && ( ! "${_HAS_EXECUTED_BACKUPS}" \
                    || ! GetParamsForAnySetup \
                    || ! AreParamsNotEmptyForStaticSetup \
                    || ! GetListsForNoGRUBStaticSetup \
                    || ! WriteFilesForNoGRUBStaticSetup \
                    || ! ExecuteUpdateAfterSetup ); then
                    return 1
                fi

                return 0
            }

            function ExecuteUninstallSetup
            {
                if ! "${_HAS_EXECUTED_BACKUPS}" \
                    || ! ExecuteUpdateAfterSetup; then
                    echo -e "${_PREFIX_ERROR} Uninstall has failed."
                fi

                return 0
            }

            function ExecuteUpdateAfterSetup
            {
                UpdateGRUB || return 1
                UpdateInitramfs || return 1
                return 0
            }

        # <summary> Interaction </summary>
            function AskToSpecifyGRUBMenuEntryForMultibootSetup
            {
                if "${_EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_DEFAULT}" \
                    || "${_EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_FIRST}" \
                    || "${_EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_LAST}" \
                    || "${_EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_VALUE}"; then
                    return 0
                fi

                local -ar INDEX_LIST=( "${!_MENU_ENTRY_TITLE_LIST[@]}" )
                local -i LAST_INDEX="${INDEX_LIST[-1]}"

                for COUNT in $( seq 0 2 ); do
                    echo -e "\nList of valid GRUB menu entries:"
                    PrintListOfGRUBMenuEntry
                    echo
                    read -r -p "Enter preferred GRUB menu entry [0-${LAST_INDEX}]: " ANSWER

                    if [[ -z "${ANSWER}" ]] \
                        || [[ "${ANSWER}" -eq 0 ]]; then
                        _EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_DEFAULT=true
                        return 0
                    fi

                    if [[ "${ANSWER}" -gt 0 ]] \
                        && [[ "${ANSWER}" -le "${LAST_INDEX}" ]]; then
                        _EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_DEFAULT=false
                        _PREFERRED_MENU_ENTRY_TITLE="${_MENU_ENTRY_TITLE_LIST[${ANSWER}]}"
                        return 0
                    fi

                    echo -e "Please answer between 0 and ${LAST_INDEX}."
                done

                echo -e "${_PREFIX_ERROR} Failed to answer."
                return 1
            }

            function AskToSpecifyStaticSetup
            {
                if ! "${_ASK_TO_EXECUTE_VFIO_SETUP_STATIC}"; then
                    return 0
                fi

                for COUNT in $( seq 0 2 ); do
                    read -r -p "Write output to GRUB only? [Y/n]: " ANSWER

                    case "${ANSWER}" in
                        [Yy]* )
                            _EXECUTE_VFIO_SETUP_STATIC_WITH_GRUB=true
                            return 0 ;;

                        [Nn]* )
                            _EXECUTE_VFIO_SETUP_STATIC_WITH_GRUB=false
                            return 0 ;;

                        * )
                            echo "Please answer 'Y' or 'N'." ;;
                    esac
                done

                echo -e "${_PREFIX_ERROR} Failed to answer."
                return 1
            }

        # <summary> Multiboot setup getters </summary>
            function GetPreferredGRUBMenuEntryForMultibootSetup
            {
                if [[ ! -z "${_PREFERRED_MENU_ENTRY_TITLE}" ]]; then
                    return 0
                fi

                if "${_EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_FIRST}" \
                    && [[ "${1}" -eq 1 ]]; then
                    _PREFERRED_MENU_ENTRY_TITLE="${2}"

                elif "${_EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_VALUE}" \
                    && [[ "${1}" -eq "${_MULTIBOOT_PREFERRED_IOMMU_GROUP_ID}" ]]; then
                    _PREFERRED_MENU_ENTRY_TITLE="${2}"

                elif "${_EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_LAST}" \
                    && [[ "${1}" -eq "${#_IOMMU_GROUP_ID_LIST_WITH_VGA_FOR_VFIO[-1]}" ]]; then
                    _PREFERRED_MENU_ENTRY_TITLE="${2}"
                fi

                return 0
            }

        # <summary> Multiboot setup setters </summary>
            function GetListsForMultibootSetup
            {
                for KERNEL in ${KERNELS_LIST[@]}; do
                    # <remarks> Organize menu entry for excluded VGA group and given system kernel. </remarks>
                    local MENU_ENTRY_TITLE="$SYSTEM_DISTRO, with ${SYSTEM_OS} ${KERNEL} (VFIO, w/o IOMMU '${1}' w/ '${THIS_IOMMU_GROUP_VGA_NAME}')"
                    _MENU_ENTRY_TITLE_LIST+=( "${MENU_ENTRY_TITLE}" )
                    GetPreferredGRUBMenuEntryForMultibootSetup "${1}" "${MENU_ENTRY_TITLE}"

                    _CUSTOM_GRUB_FILE_CONTENTS+=(
                        "menuentry \"${MENU_ENTRY_TITLE}\"{"
                        # "\tload_video"
                        # "insmod gzio"
                        # "if [ x\$grub_platform = xxen ]; then insmod xzio; insmod lzopio; fi"
                        # "insmod part_gpt"
                        "\tinsmod ${SYSTEM_FSTYPE}"
                        "\tset root='/dev/disk/by-uuid/${SYSTEM_UUID}'"
                        "\t"'if [ x$feature_platform_search_hint = xy ]; then'"\n\t\t"'search --no-floppy --fs-uuid --set=root '"${SYSTEM_UUID}\n\t"'fi'
                        "\techo    'Loading ${SYSTEM_OS} ${KERNEL} ...'"
                        "\tlinux   /boot/vmlinuz-${KERNEL} root=UUID=${SYSTEM_UUID} ${LINE_GRUB_CMDLINE_TEMP}"
                        "\tinitrd  /boot/initrd.img-${KERNEL}"
                        "\techo    \"VFIO, w/o IOMMU '${1}' w/ '${THIS_IOMMU_GROUP_VGA_NAME}'\""
                        "}"
                        ""
                    )
                done

                return 0
            }

        # <summary> Presentation </summary>
            function PrintListOfGRUBMenuEntry
            {
                for KEY in "${!_MENU_ENTRY_TITLE_LIST[@]}"; do
                    echo -en "${KEY}:\t"

                    if [[ "${KEY}" -gt 0 ]]; then
                        echo -e "\"${_MENU_ENTRY_TITLE_LIST[${KEY}]}\""
                    else
                        echo -e "Default (no VFIO setup)"
                    fi
                done

                return 0
            }

        # <summary> Update functions </summary>
            function UpdateGRUB
            {
                local OUTPUT="Updating GRUB...\t"
                PrintSuffixWait "${OUTPUT}"
                sudo update-grub &> /dev/null
                PrintSuffixPassOrFail "${OUTPUT}"
                return "${?}"
            }

            function UpdateInitramfs
            {
                local OUTPUT="Updating Initramfs...\t"
                PrintSuffixWait "${OUTPUT}"
                sudo update-initramfs -u -k all &> /dev/null
                PrintSuffixPassOrFail "${OUTPUT}"
                return "${?}"
            }

        # <summary> Write output </summary>
            function WriteFilesForGRUBStaticSetup
            {
                "${_HAS_EXECUTED_BACKUPS}" || return 1
                IFS=$'\n'
                local -r LINE_TO_MATCH="GRUB_CMDLINE_LINUX_DEFAULT="
                local LINE_GRUB_CMDLINE_TEMP=""
                LINE_GRUB_CMDLINE_TEMP+="${_LINE_GRUB_CMDLINE} "

                if [[ ! -z "${LINE_GRUB_CMDLINE_ISOLCPU}" ]]; then
                    LINE_GRUB_CMDLINE_PREFIX+="${LINE_GRUB_CMDLINE_ISOLCPU} "
                fi

                if [[ ! -z "${_OUTPUT_GRUB_CMDLINE_HUGEPAGES}" ]]; then
                    LINE_GRUB_CMDLINE_PREFIX+="${_OUTPUT_GRUB_CMDLINE_HUGEPAGES} "
                fi

                LINE_GRUB_CMDLINE_TEMP+="modprobe.blacklist=${_THIS_DRIVER_DELIM} "
                LINE_GRUB_CMDLINE_TEMP+="pci_stub.ids=${_THIS_PCISTUB_HWID_DELIM} "
                LINE_GRUB_CMDLINE_TEMP+="vfio_pci.ids=${_THIS_VFIOPCI_HWID_DELIM} "
                LINE_GRUB_CMDLINE_TEMP="${LINE_GRUB_CMDLINE_TEMP::-1}"
                local -r LINE_GRUB_CMDLINE_DEFAULT="${LINE_TO_MATCH}\"${LINE_GRUB_CMDLINE_TEMP}\""

                if ! sed -i '/'"${LINE_TO_MATCH}"'/c\'"${LINE_GRUB_CMDLINE_DEFAULT}" "${_GRUB_DEST_PATH_1}" &> /dev/null; then
                    echo -e "${_PREFIX_ERROR} Failed to overwrite target lines of files."
                    return 1
                fi

                unset IFS
                return 0
            }

            function WriteFilesForNoGRUBStaticSetup
            {
                "${_HAS_EXECUTED_BACKUPS}" || return 1
                IFS=$'\n'
                local -r LINE_TO_MATCH="GRUB_CMDLINE_LINUX_DEFAULT="
                local LINE_GRUB_CMDLINE_TEMP=""
                LINE_GRUB_CMDLINE_TEMP+="${_LINE_GRUB_CMDLINE} "

                if [[ ! -z "${LINE_GRUB_CMDLINE_ISOLCPU}" ]]; then
                    LINE_GRUB_CMDLINE_PREFIX+="${LINE_GRUB_CMDLINE_ISOLCPU} "
                fi

                if [[ ! -z "${_OUTPUT_GRUB_CMDLINE_HUGEPAGES}" ]]; then
                    LINE_GRUB_CMDLINE_PREFIX+="${_OUTPUT_GRUB_CMDLINE_HUGEPAGES} "
                fi

                LINE_GRUB_CMDLINE_TEMP="${LINE_GRUB_CMDLINE_TEMP::-1}"
                local -r LINE_GRUB_CMDLINE_DEFAULT="GRUB_CMDLINE_LINUX_DEFAULT=\"${LINE_GRUB_CMDLINE_TEMP}\""

                # <remarks> Write to new file. </remarks>
                local -i KEY=$(( "${#_INITRAMFS_LIST[@]}" - 1 ))

                while [[ "${KEY}" -ge 0 ]]; do
                    local LINE="${_INITRAMFS_LIST[${KEY}]}"

                    if ! sed -i "23i ${LINE}" "${_INITRAMFS_MODULES_DEST_PATH}"; then
                        echo -e "${_PREFIX_ERROR} Failed to overwrite target lines of files."
                        return 1
                    fi

                    (( --KEY ))
                done

                if [[ "${?}" -ne 0 ]]; then
                    echo -e "${_PREFIX_ERROR} Failed to overwrite target lines of files."
                    return 1
                fi

                # <remarks> Write to new file. </remarks>
                local -i KEY=$(( "${#_MODULES_LIST[@]}" - 1 ))

                while [[ "${KEY}" -ge 0 ]]; do
                    local LINE="${_MODULES_LIST[${KEY}]}"

                    if ! sed -i "7i ${LINE}" "${_MODPROBE_VFIO_DEST_PATH}"; then
                        echo -e "${_PREFIX_ERROR} Failed to overwrite target lines of files."
                        return 1
                    fi

                    (( --KEY ))
                done

                if [[ "${?}" -ne 0 ]]; then
                    echo -e "${_PREFIX_ERROR} Failed to overwrite target lines of files."
                    return 1
                fi

                # <remarks> Write to new files. </remarks>
                if ! sed -i '/'${LINE_TO_MATCH}'/c\'"${LINE_GRUB_CMDLINE_DEFAULT}" "${_GRUB_DEST_PATH_1}" &> /dev/null \
                    || ! sed -i "/# options vfio_pci ids=*/c\options vfio_pci_ids=\"${_THIS_VFIOPCI_HWID_DELIM}\"" "${_INITRAMFS_MODULES_DEST_PATH}" &> /dev/null \
                    || ! sed -i "/# vfio_pci ids=*/c\vfio_pci_ids=\"${_THIS_VFIOPCI_HWID_DELIM}\"" "${_INITRAMFS_MODULES_DEST_PATH}" &> /dev/null \
                    || ! echo -e "\n${_BLACKLISTS_LIST[*]}" >> "${_MODPROBE_BLACKLISTS_DEST_PATH}" &> /dev/null \
                    || ! sed -i "/# options vfio_pci ids=*/c\options vfio_pci ids=\"${_THIS_VFIOPCI_HWID_DELIM}\"" "${_MODPROBE_VFIO_DEST_PATH}" &> /dev/null \
                    || ! sed -i "/# vfio_pci ids=*/c\vfio_pci_ids=\"${_THIS_VFIOPCI_HWID_DELIM}\"" "${_MODULES_DEST_PATH}" &> /dev/null; then
                    echo -e "${_PREFIX_ERROR} Failed to overwrite target lines of files."
                    return 1
                fi

                unset IFS
                return 0
            }

            function WriteFilesForMultibootSetup
            {
                "${_HAS_EXECUTED_BACKUPS}" || return 1
                AskToSpecifyGRUBMenuEntryForMultibootSetup || return 1
                IFS=$'\n'
                local -r LINE_TO_MATCH="GRUB_DEFAULT="

                if "${_EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_DEFAULT}"; then
                    local -r LINE_GRUB_DEFAULT="${LINE_TO_MATCH}${_DEFAULT_MENU_ENTRY_TITLE}"
                else
                    local -r LINE_GRUB_DEFAULT="${LINE_TO_MATCH}\"${_PREFERRED_MENU_ENTRY_TITLE}\""
                fi

                if [[ -d $( dirname "${_CUSTOM_GRUB_DEST_PATH}" ) ]] \
                    && ! sudo mkdir -p $( dirname "${_CUSTOM_GRUB_DEST_PATH}" ); then
                    echo -e "${_PREFIX_ERROR} Failed to create directory '"$( dirname "${_CUSTOM_GRUB_DEST_PATH}" )"'."
                    return 1
                fi

                if ! sed -i '/'"${LINE_TO_MATCH}"'/c\'"${LINE_GRUB_DEFAULT}" "${_GRUB_DEST_PATH_1}" \
                    || ! echo -e "\n${_CUSTOM_GRUB_FILE_CONTENTS[*]}" >> "${_CUSTOM_GRUB_DEST_PATH}" ; then
                    echo -e "${_PREFIX_ERROR} Failed to overwrite target lines of files."
                    return 1
                fi

                unset IFS
                return 0
            }

        # <summary> to be deprecated? </summary>
        function AreParamsNotEmptyForStaticSetup
        {
            if ( [[ -z "${_VFIOPCI_DRIVER_DELIM}"  ]] \
                || ( [[ -z "${_PCISTUB_HWID_DELIM}" ]] \
                && [[ -z "${_VFIOPCI_HWID_DELIM}" ]] )); then
                echo -e "${_PREFIX_ERROR} Output is empty."
                return 1
            fi

            return 0
        }

        function GetAllParamsForMultibootSetup
        {
            # <remarks> System configuration </remarks>
            local -i MAX_NUM_PARSE_KERNELS=3
            local -a KERNELS_LIST=( $( ls -1 /boot/vmli* | cut -d 'z' -f 2 | cut -c 2- | sort -r | head -n ${MAX_NUM_PARSE_KERNELS} ) )
            local SYSTEM_DISK=$( df / | grep -iv 'filesystem' | cut -d '/' -f3 | cut -d ' ' -f1 )
            local SYSTEM_DISTRO=$( lsb_release -i -s )
            local SYSTEM_FSTYPE=$( blkid -s TYPE | grep ${SYSTEM_DISK} | cut -d '"' -f2 )
            local SYSTEM_KERNEL=$( uname -o )
            local SYSTEM_OS=$( uname )
            local SYSTEM_UUID=$( blkid -s UUID | grep ${SYSTEM_DISK} | cut -d '"' -f2 )
            local LINE_GRUB_CMDLINE_PREFIX=""
            LINE_GRUB_CMDLINE_PREFIX+="${_LINE_GRUB_CMDLINE} "

            if [[ ! -z "${LINE_GRUB_CMDLINE_ISOLCPU}" ]]; then
                LINE_GRUB_CMDLINE_PREFIX+="${LINE_GRUB_CMDLINE_ISOLCPU} "
            fi

            if [[ ! -z "${_OUTPUT_GRUB_CMDLINE_HUGEPAGES}" ]]; then
                LINE_GRUB_CMDLINE_PREFIX+="${_OUTPUT_GRUB_CMDLINE_HUGEPAGES} "
            fi

            for THIS_IOMMU_GROUP_ID in ${IOMMU_GROUPS_WITH_VGA_FOR_HOST_LIST[@]}; do
                local -a DRIVER_LIST=( )
                local -a IOMMU_GROUPS_WITHOUT_THIS_VGA_LIST=( )
                local -a STUB_HWID_LIST=( )
                local -a VFIO_HWID_LIST=( )
                local THIS_DRIVER_DELIM=""
                local LINE_GRUB_CMDLINE_TEMP=""
                local THIS_IOMMU_GROUP_VGA_NAME=""
                local THIS_STUB_HWID_DELIM=""
                local THIS_VFIO_HWID_DELIM=""

                for IOMMU_GROUP_ID in ${IOMMU_GROUPS_FOR_VFIO_LIST[@]}; do
                    if AreNotEqual "${IOMMU_GROUP_ID}" "${THIS_IOMMU_GROUP_ID}"; then
                        IOMMU_GROUPS_WITHOUT_THIS_VGA_LIST+=( "${IOMMU_GROUP_ID}" )
                    fi
                done

                GetNameForFirstVGADeviceInIOMMUGroup "${THIS_IOMMU_GROUP_ID}" "THIS_IOMMU_GROUP_VGA_NAME"
                GetListsForSelection "${_IOMMU_GROUP_ID}" "DRIVER_LIST" "STUB_HWID_LIST" "VFIO_HWID_LIST" || continue
                GetCommaDelimitedStringFromEnum "DRIVER_LIST" "THIS_DRIVER_DELIM"
                GetCommaDelimitedStringFromEnum "STUB_HWID_LIST" "THIS_STUB_HWID_DELIM"
                GetCommaDelimitedStringFromEnum "VFIO_HWID_LIST" "THIS_VFIO_HWID_DELIM"
                LINE_GRUB_CMDLINE_TEMP+="modprobe.blacklist=${THIS_DRIVER_DELIM} "
                LINE_GRUB_CMDLINE_TEMP+="pci_stub.ids=${THIS_STUB_HWID_DELIM} "
                LINE_GRUB_CMDLINE_TEMP+="vfio_pci.ids=${THIS_VFIO_HWID_DELIM} "
                LINE_GRUB_CMDLINE_TEMP="${LINE_GRUB_CMDLINE_PREFIX}${LINE_GRUB_CMDLINE_TEMP::-1}"
                GetListsForMultibootSetup
            done

            if IsEnum "_CUSTOM_GRUB_FILE_CONTENTS"; then
                echo -e "${_PREFIX_ERROR} Multiboot setup output is empty."
                return 1
            fi

            return 0
        }

        function GetListsForIOMMUGroup
        {
            local -a CLASS_LIST="${CLASS_BY_VALID_IOMMU_GROUP_ID_LIST[${1}]}"
            local -a DRIVER_LIST="${DRIVER_BY_VALID_IOMMU_GROUP_ID_LIST[${1}]}"
            local -a HWID_LIST="${HWID_BY_VALID_IOMMU_GROUP_ID_LIST[${1}]}"

            for KEY in ${!HWID_LIST[@]}; do
                local CLASS=${CLASS_LIST[${KEY}]}
                local DRIVER=${DRIVER_LIST[${KEY}]}
                local HWID=${HWID_LIST[${KEY}]}

                if [[ ! -z "${HWID}" ]] \
                    && IsDeviceFor_PCISTUB "${CLASS}"; then
                    _PCISTUB_HWID_DELIM+="${HWID},"
                fi

                if [[ ! -z "${HWID}" ]] \
                    && ! IsDeviceFor_PCISTUB "${CLASS}"; then
                    _VFIOPCI_HWID_DELIM+="${HWID},"
                fi

                if IsDriverNotOnIgnoreList "${DRIVER}"; then
                    _VFIOPCI_DRIVER_DELIM+="${_DRIVER},"
                    _VFIOPCI_DRIVER_LIST+=( "${DRIVER}" )
                fi
            done

            return 0
        }

        function GetListsForIOMMUGroupWithByDevice
        {
            local -a DEVICE_LIST="${DEVICE_BY_VALID_IOMMU_GROUP_ID_LIST[${1}]}"

            for KEY in ${!DEVICE_LIST[@]}; do
                local DEVICE_DELIM=${DEVICE_LIST[${KEY}]}
                local -i DELIM_COUNT=1
                local DEVICE=$( cut -d ' ' -f ${DELIM_COUNT} <<< "${DEVICE_DELIM}" )

                while [[ ! -z "${DEVICE}" ]]; do
                    local DEVICE=$( cut -d ' ' -f ${DELIM_COUNT} <<< "${DEVICE_DELIM}" )
                    local CLASS="$( lspci -ms ${DEVICE} | cut -d '"' -f 2 )"
                    local DRIVER=$( lspci -ks ${DEVICE} | grep -i "driver" | cut -d " " -f 5 )
                    local HWID=$( lspci -ns ${DEVICE} | cut -d " " -f 3 )

                    if [[ ! -z "${HWID}" ]] \
                        && IsDeviceFor_PCISTUB "${CLASS}"; then
                        _PCISTUB_HWID_DELIM+="${HWID},"
                    fi

                    if [[ ! -z "${HWID}" ]] \
                        && ! IsDeviceFor_PCISTUB "${CLASS}"; then
                        _VFIOPCI_HWID_DELIM+="${HWID},"
                    fi

                    if IsDriverNotOnIgnoreList "${DRIVER}"; then
                        _VFIOPCI_DRIVER_DELIM+="${DRIVER},"
                        _VFIOPCI_DRIVER_LIST+=( "${DRIVER}" )
                    fi

                    (( DELIM_COUNT++ ))
                done
            done

            return 0
        }

        function GetListsForIOMMUGroupWithVGA
        {
            local -a CLASS_LIST="${CLASS_BY_VALID_IOMMU_GROUP_ID_LIST[${1}]}"
            local -a DRIVER_LIST="${DRIVER_BY_VALID_IOMMU_GROUP_ID_LIST[${1}]}"
            local -a HWID_LIST="${HWID_BY_VALID_IOMMU_GROUP_ID_LIST[${1}]}"

            for KEY in ${!HWID_LIST[@]}; do
                local CLASS_DELIM=${CLASS_LIST[${KEY}]}
                local DRIVER_DELIM=${DRIVER_LIST[${KEY}]}
                local HWID_DELIM=${HWID_LIST[${KEY}]}
                local NAME_DELIM=${NAME_LIST[${KEY}]}
                local -i DELIM_COUNT=1
                local HWID=$( cut -d ' ' -f ${DELIM_COUNT} <<< "${HWID_DELIM}" )

                while [[ ! -z "${HWID}" ]]; do
                    local CLASS=$( cut -d ' ' -f ${DELIM_COUNT} <<< "${CLASS_DELIM}" )
                    local DRIVER=$( cut -d ' ' -f ${DELIM_COUNT} <<< "${DRIVER_DELIM}" )
                    HWID=$( cut -d ' ' -f ${DELIM_COUNT} <<< "${HWID_DELIM}" )
                    local NAME=$( cut -d ' ' -f ${DELIM_COUNT} <<< "${NAME_DELIM}" )

                    if [[ ! -z "${HWID}" ]] \
                        && IsDeviceFor_PCISTUB "${CLASS}"; then
                        _VGA_PCISTUB_HWID_DELIM+="${HWID},"
                    fi

                    if [[ ! -z "${HWID}" ]] \
                        && ! IsDeviceFor_PCISTUB "${CLASS}"; then
                        _VGA_VFIOPCI_HWID_DELIM+="${HWID},"
                    fi

                    if [[ ! -z "${DRIVER}" ]] \
                        && IsDriverNotOnIgnoreList "${DRIVER}"; then
                        _VGA_VFIOPCI_DRIVER_DELIM+="${_DRIVER},"
                    fi

                    if ! "${_EXECUTE_VFIO_SETUP_MULTIBOOT_WITH_GRUB}" \
                        && [[ ! -z "${DRIVER}" ]] \
                        && IsDriverNotOnIgnoreList "${DRIVER}"; then
                        _VGA_VFIOPCI_DRIVER_LIST+=( "${DRIVER}" )
                    fi

                    (( DELIM_COUNT++ ))
                done
            done

            return 0
        }

        function GetListsForIOMMUGroupWithVGAByDevice
        {
            local -a DEVICE_LIST="${DEVICE_BY_VALID_IOMMU_GROUP_ID_LIST[${1}]}"

            for KEY in ${!DEVICE_LIST[@]}; do
                local DEVICE_DELIM=${DEVICE_LIST[${KEY}]}
                local -i DELIM_COUNT=1
                local DEVICE=$( cut -d ' ' -f ${DELIM_COUNT} <<< "${DEVICE_DELIM}" )

                while [[ ! -z "${DEVICE}" ]]; do
                    local DEVICE=$( cut -d ' ' -f ${DELIM_COUNT} <<< "${DEVICE_DELIM}" )
                    local CLASS="$( lspci -ms ${DEVICE} | cut -d '"' -f 2 )"
                    local DRIVER=$( lspci -ks ${DEVICE} | grep -i "driver" | cut -d " " -f 5 )
                    local HWID=$( lspci -ns ${DEVICE} | cut -d " " -f 3 )
                    local NAME="$( lspci -ms ${DEVICE} | cut -d '"' -f 6 )"

                    if [[ ! -z "${HWID}" ]] \
                        && IsDeviceFor_PCISTUB "${CLASS}"; then
                        _VGA_PCISTUB_HWID_DELIM+="${HWID},"
                    fi

                    if [[ ! -z "${HWID}" ]] \
                        && ! IsDeviceFor_PCISTUB "${CLASS}"; then
                        _VGA_VFIOPCI_HWID_DELIM+="${HWID},"
                    fi

                    if [[ ! -z "${DRIVER}" ]] \
                        && IsDriverNotOnIgnoreList "${DRIVER}"; then
                        _VGA_VFIOPCI_DRIVER_DELIM+="${_DRIVER},"
                    fi

                    if ! "${_EXECUTE_VFIO_SETUP_MULTIBOOT_WITH_GRUB}" \
                        && [[ ! -z "${DRIVER}" ]] \
                        && IsDriverNotOnIgnoreList "${DRIVER}"; then
                        _VGA_VFIOPCI_DRIVER_LIST+=( "${DRIVER}" )
                    fi

                    (( DELIM_COUNT++ ))
                done
            done

            return 0
        }

        function GetNameForIOMMUGroupWithVGA
        {
            local -a DEVICE_LIST="${DEVICE_BY_VALID_IOMMU_GROUP_ID_LIST[${1}]}"

            for KEY in ${!DEVICE_LIST[@]}; do
                local DEVICE_DELIM=${DEVICE_LIST[${KEY}]}
                local -i DELIM_COUNT=1
                local DEVICE=$( cut -d ' ' -f ${DELIM_COUNT} <<< "${DEVICE_DELIM}" )

                while [[ ! -z "${DEVICE}" ]]; do
                    local DEVICE=$( cut -d ' ' -f ${DELIM_COUNT} <<< "${DEVICE_DELIM}" )
                    local CLASS="$( lspci -ms ${DEVICE} | cut -d '"' -f 2 )"
                    local NAME="$( lspci -ms ${DEVICE} | cut -d '"' -f 6 )"

                    if IsDevice_VGA "${CLASS}"; then
                        THIS_IOMMU_GROUP_VGA_NAME="${NAME}"
                        return 0
                    fi

                    (( DELIM_COUNT++ ))
                done
            done

            return 0
        }

        function GetListsForNoGRUBStaticSetup
        {
            declare -ga _BLACKLISTS_LIST=( )
            declare -ga _INITRAMFS_LIST=( )
            declare -ga _MODULES_LIST=( )
            declare -g HWID_DELIM=""

            for _DRIVER in ${_VFIOPCI_DRIVER_LIST[@]}; do
                _BLACKLISTS_LIST+=(
                    "blacklist ${_DRIVER}"
                )

                _INITRAMFS_LIST+=(
                    "softdep ${_DRIVER} pre: vfio-pci"
                    "${DRIVER}"
                )

                _MODULES_LIST+=(
                    "softdep ${_DRIVER} pre: vfio-pci"
                )
            done

            if [[ ! -z "${_THIS_PCISTUB_HWID_DELIM}" ]] \
                && [[ ! -z "${_THIS_VFIOPCI_HWID_DELIM}" ]]; then
                _THIS_VFIOPCI_HWID_DELIM+=",${_THIS_PCISTUB_HWID_DELIM}"
            fi

            if [[ ! -z "${_THIS_PCISTUB_HWID_DELIM}" ]] \
                && [[ -z "${_THIS_VFIOPCI_HWID_DELIM}" ]]; then
                _THIS_VFIOPCIHWID_DELIM="${_THIS_PCISTUB_HWID_DELIM}"
            fi

            return 0
        }

        function GetParamsForAnySetup
        {
            declare -g _THIS_DRIVER_DELIM=""
            declare -g _THIS_PCISTUBHWID_DELIM=""
            declare -g _THIS_VFIOPCIHWID_DELIM=""
            declare -g _PCISTUBHWID_DELIM=""
            declare -g _VFIOPCI_DRIVER_DELIM=""
            declare -g _VFIOPCIHWID_DELIM=""
            declare -g _VGA_PCISTUBHWID_DELIM=""
            declare -g _VGA_VFIOPCI_DRIVER_DELIM=""
            declare -g _VGA_VFIOPCIHWID_DELIM=""

            if ! "${_EXECUTE_VFIO_SETUP_MULTIBOOT_WITH_GRUB}"; then
                declare -ga _VFIOPCI_DRIVER_LIST=( )
                declare -ga _VGA_VFIOPCI_DRIVER_LIST=( )
            fi

            for _IOMMU_GROUP_ID in ${_IOMMU_GROUP_ID_LIST_FOR_VFIO[@]}; do
                GetListsForIOMMUGroup "${_IOMMU_GROUP_ID}" || return 1
            done

            if ! "${_EXECUTE_VFIO_SETUP_MULTIBOOT_WITH_GRUB}"; then
                for _IOMMU_GROUP_ID in ${_IOMMU_GROUP_ID_LIST_WITH_VGA_FOR_VFIO[@]}; do
                    GetListsForIOMMUGroupWithVGA "${_IOMMU_GROUP_ID}" || return 1
                done
            fi

            if [[ ! -z "${_VFIOPCI_DRIVER_DELIM}" ]]; then
                _VFIOPCI_DRIVER_DELIM="${_VFIOPCI_DRIVER_DELIM::-1}"
            fi

            if [[ ! -z "${_PCISTUB_HWID_DELIM}" ]]; then
                _PCISTUBHWID_DELIM="${_PCISTUB_HWID_DELIM::-1}"
            fi

            if [[ ! -z "${_VFIOPCI_HWID_DELIM}" ]]; then
                _VFIOPCIHWID_DELIM="${_VFIOPCI_HWID_DELIM::-1}"
            fi

            if ! "${_EXECUTE_VFIO_SETUP_MULTIBOOT_WITH_GRUB}"; then
                GetTempListForAnySetup
                IFS=$'\n'
                _VFIOPCI_DRIVER_LIST+=( $( sort -u <<<"${_VGA_VFIOPCI_DRIVER_LIST[*]}" ) )
                _VFIOPCI_DRIVER_LIST=( $( sort -u <<<"${_VFIOPCI_DRIVER_LIST[*]}" ) )
                unset IFS
            fi

            return 0
        }

        function GetTempListForAnySetup
        {
            if [[ ! -z "${_VFIOPCI_DRIVER_DELIM}" ]]; then
                _THIS_DRIVER_DELIM+="${_VFIOPCI_DRIVER_DELIM},"
            fi

            if [[ ! -z "$_VGA_VFIOPCI_DRIVER_DELIM" ]]; then
                _THIS_DRIVER_DELIM+="$_VGA_VFIOPCI_DRIVER_DELIM,"
            fi

            if [[ ! -z "${_PCISTUB_HWID_DELIM}" ]]; then
                _THIS_PCISTUB_HWID_DELIM+="${_PCISTUB_HWID_DELIM},"
            fi

            if [[ ! -z "$_VGA_PCISTUB_HWID_DELIM" ]]; then
                _VGA_PCISTUBHWID_DELIM="${_VGA_PCISTUB_HWID_DELIM::-1}"
                _THIS_PCISTUB_HWID_DELIM+="$_VGA_PCISTUB_HWID_DELIM,"
            fi

            if [[ ! -z "${_VFIOPCI_HWID_DELIM}" ]]; then
                _THIS_VFIOPCI_HWID_DELIM+="${_VFIOPCI_HWID_DELIM},"
            fi

            if [[ ! -z "$_VGA_VFIOPCI_HWID_DELIM" ]]; then
                _VGA_VFIOPCIHWID_DELIM="${_VGA_VFIOPCI_HWID_DELIM::-1}"
                _THIS_VFIOPCI_HWID_DELIM+="$_VGA_VFIOPCI_HWID_DELIM,"
            fi

            if [[ "${_THIS_PCISTUB_HWID_DELIM}" == *"," ]]; then
                _THIS_PCISTUBHWID_DELIM="${_THIS_PCISTUB_HWID_DELIM::-1}"
            fi

            if [[ "${_THIS_VFIOPCI_HWID_DELIM}" == *"," ]]; then
                _THIS_VFIOPCIHWID_DELIM="${_THIS_VFIOPCI_HWID_DELIM::-1}"
            fi

            if [[ "${_THIS_DRIVER_DELIM}" == *"," ]]; then
                _THIS_DRIVER_DELIM="${_THIS_DRIVER_DELIM::-1}"
            fi

            if [[ "${_THIS_PCISTUB_HWID_DELIM}" == *"," ]]; then
                _THIS_PCISTUBHWID_DELIM="${_THIS_PCISTUB_HWID_DELIM::-1}"
            fi

            if [[ "${_THIS_VFIOPCI_HWID_DELIM}" == *"," ]]; then
                _THIS_VFIOPCIHWID_DELIM="${_THIS_VFIOPCI_HWID_DELIM::-1}"
            fi

            if [[ "${_THIS_DRIVER_DELIM}" == *"," ]]; then
                _THIS_DRIVER_DELIM="${_THIS_DRIVER_DELIM::-1}"
            fi

            return 0
        }


    function SetPreferredIOMMUGroupForMultiboot
    {
        declare -gi _MULTIBOOT_PREFERRED_IOMMU_GROUP_ID="${1}"
        _EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_VALUE=true
        return 0
    }
# </functions>

# <main>
    SetParameters
# </main>