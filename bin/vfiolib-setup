#!/bin/bash sh

#
# Filename:         vfiolib-setup
# Description:      Select VFIO setup.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# TODO:
# -keep /dev/null to nested functions. Omit it when in main functions.
# -make functions for each file in both setups.
# -make comments wherever needed (strive for easiest code-maintenance). *****
# -rewrite functions/variables as needed.
# -for loop elements shall have a prefix of variable, keys shall have int. Any declared variables inside shall have the correct prefix var.
# -params in for loops or conditionals shall not have the comment "<params>". However, any function (nested or not), may have it.

# <remarks> Using </remarks>
# <code>
    source ../bashlib/bin/bashlib-all
    source vfiolib-extras
    source vfiolib-iommu
# </code>

# <code>
    # <summary> Setup VFIO with more flexibility in mind; Setup VFIO with (if available) multiple GRUB menu entries. Choose which VGA device to boot from; choose which menu entry that excludes a given IOMMU group that contains VGA device(s). </summary>
    # <returns> exit code </returns>
    function Multiboot_VFIO
    {
        # <summary> Write custom GRUB entries. </summary>
        # <returns> exit code </returns>
        function Multiboot_VFIO_Custom_GRUB
        {
            # <remarks> Get file. </remarks>
            declare -a arr_file2=( "${arr_mulitboot_file_template[@]}" )
            ReadFile "arr_file2" "${str_file2}" || return $?

            # <remarks> Organize new lines. </remarks>
            local str_GRUB_temp="${str_GRUB_required}${str_GRUB_default}"
            declare -a arr_file2_temp=()

            # <remarks> Parse VGA VFIO IOMMU Groups. </remarks>
            for var_IOMMU in "${arr_IOMMU_VFIO_PCI_with_VGA[@]}"; do
                local str_multiboot_drivers=""
                local str_multiboot_hardware_ID=""

                if Multiboot_VFIO_ExcludeThis_VGA_Group "${var_IOMMU}"; then
                    for var_kernel in "${arr_kernels}"; do
                        local str_GRUB_line="${str_GRUB_temp} ${str_GRUB_blacklist}${str_multiboot_drivers} ${str_modules_VFIO_PCI}${str_multiboot_hardware_ID}"

                        # <remarks> Organize menu entry for excluded VGA group and given system kernel. </remarks>
                        arr_file2_temp+=(
                            "menuentry ${str_system_distro}, with ${str_system_kernel} ${var_kernel} (VFIO, w/o IOMMU ${var_IOMMU}, w/ boot VGA \"${str_device_name}\") {"
                            "\tinsmod ${str_system_FSTYPE}"
                            "\tset root='/dev/disk/by-uuid/${str_system_UUID}'"
                            "\t"'if [ x$feature_platform_search_hint = xy ]; then'"\n\t\t"'search --no-floppy --fs-uuid --set=root '"${str_system_UUID}\n\t"'fi'
                            "\techo    'Loading ${str_system_OS} ${var_kernel} ...'"
                            "\tlinux   /boot/vmlinuz-${str_system_kernel} root=UUID=${str_system_UUID} ${str_GRUB_line}"
                            "\tinitrd  /boot/initrd.img-${str_system_kernel}"
                        )
                    done
                fi
            done

            readonly arr_file2_temp

            # <remarks> Write new lines to file. </remarks>
            IsArray "arr_file2_temp" || return $?
            OverwriteFile "arr_file2" "${str_file2}" || return $?
        }

        # <summary> Parse all VGA and non VGA IOMMU Groups, except current VGA VFIO IOMMU Group. </summary>
        # <param name="$1"> int: the IOMMU group to ignore </param>
        # <param name="$str_multiboot_drivers"> string: current list of drivers </param>
        # <param name="$str_multiboot_hardware_ID"> current list of hardware IDs </param>
        # <returns> exit code </returns>
        function Multiboot_VFIO_ExcludeThis_VGA_Group
        {
            IsNum $1 &> /dev/null || return $?
            IsArray "arr_IOMMU_VFIO_PCI_with_VGA" &> /dev/null || return 1

            # <remarks> Parse all IOMMU groups.  </remarks>
            for int_key in "${!arr_IOMMU[@]}"; do
                local str_driver="${arr_driver[$int_key]}"
                local str_hardware_ID="${arr_hardware_ID[$int_key]}"
                local str_IOMMU="${arr_IOMMU[$int_key]}"

                # <remarks> Add IOMMU group if it is not in the VGA list or if it does not match the given IOMMU group, and if it not in the current VFIO list. </remarks>
                if ( ! FindLineInArray "arr_IOMMU_VFIO_PCI_with_VGA" "${str_IOMMU}" || [[ "${str_IOMMU} != $1" ]] ) ! [[ "${str_multiboot_drivers}" ~= *"${str_driver}"* ]]; then
                    str_multiboot_drivers+="${str_driver}"
                fi

                # <remarks> Add IOMMU group if it is not in the VGA list or if it does not match the given IOMMU group, and if it not in the current VFIO list. </remarks>
                if ( ! FindLineInArray "arr_IOMMU_VFIO_PCI_with_VGA" "${str_IOMMU}" || [[ "${str_IOMMU} != $1" ]] ) && ! [[ "${str_multiboot_hardware_ID}" ~= *"${str_hardware_ID}"* ]]; then
                    str_multiboot_hardware_ID+="${str_hardware_ID}"
                fi

                # <remarks> Append a delimiter should the current element be not the last element. </remarks>
                if IsString "${str_multiboot_drivers}" &> /dev/null && [[ "${str_IOMMU}" != "${arr_IOMMU[-1]}" ]]; then
                    str_multiboot_drivers+=","
                fi

                # <remarks> Append a delimiter should the current element be not the last element. </remarks>
                if IsString "${str_multiboot_hardware_ID}" &> /dev/null && [[ "${str_IOMMU}" != "${arr_IOMMU[-1]}" ]]; then
                    str_multiboot_hardware_ID+=","
                fi
            done

            # <remarks> Validate lists. </remarks>
            readonly str_multiboot_drivers str_multiboot_hardware_ID

            if ! IsString "${str_multiboot_drivers}" &> /dev/null || ! IsString "${str_multiboot_hardware_ID}" &> /dev/null; then
                return $?
            fi

            return 0
        }

        # <summary> Save default values to GRUB. </summary>
        # <returns> exit code </returns>
        function Multiboot_VFIO_GRUB
        {
            # <remarks> Get file. </remarks>
            declare -a arr_file1=( "${arr_vfio_disclaimer[@]}" )
            ReadFile "arr_file1" "${str_file1}" || return $?

            # <params>
            local str_GRUB_temp="${str_GRUB_required}${str_GRUB_default}"
            # </params>

            # <remarks> Write new line to file. </remarks>
            IsString "${str_GRUB_temp}" &> /dev/null || return $?
            str_GRUB_temp+="\"${str_GRUB_temp}\""
            ReplaceLineInArray "arr_file1" "${str_GRUB}" "${str_GRUB_temp}" || return $?
            OverwriteFile "arr_file1" "${str_file1}" || return $?

            return 0
        }

        # <params>
        declare -ir int_max_num_parse_kernels=3
        declare -ar arr_kernels=( $( ls -1 /boot/vmli* | cut -d 'z' -f 2 | sort -r | head -n ${int_max_num_parse_kernels} ) )

        local readonly str_system_distro=$( lsb_release -i -s )
        local readonly str_system_kernel=$( uname -o )
        local readonly str_system_OS=$( uname )
        local readonly str_file1="/etc/default/grub"
        local readonly str_file2="/etc/grub.d/proxifiedScripts/custom"
        local readonly str_file1_backup="etc_default_grub"
        local readonly str_file2_backup="etc_grub.d_proxifiedScripts_custom"
        # </params>

        GoToScriptDir && cd "${str_files_dir}"

        if ! IsFile "${str_file1_backup}" || ! IsFile "${str_file2_backup}"; then
            return "$?"
        fi

        # <remarks> GRUB </remarks>
        Multiboot_VFIO_GRUB || return $?

        # <remarks> Custom GRUB entries </remarks>
        Multiboot_VFIO_Custom_GRUB || return $?

        return 0
    }

    # <summary> Setup VFIO statically, with less flexibility. </summary>
    # <returns> exit code </returns>
    function Static_VFIO
    {
        # <summary> Write to GRUB. </summary>
        # <returns> exit code </returns>
        function Static_VFIO_GRUB
        {
            # <remarks> Get file. </remarks>
            declare -a arr_file1=( "${arr_vfio_disclaimer[@]}" )
            ReadFile "arr_file1" "${str_file1}" || return $?

            # <params>
            local str_GRUB_temp=""
            # </params>

            # <remarks> Organize new line. </remarks>
            IsString "${str_GRUB_Allocate_CPU}" &> /dev/null && str_GRUB_temp+="${str_GRUB_Allocate_CPU}"
            IsString "${str_GRUB_hugepages}" &> /dev/null && str_GRUB_temp+=" ${str_GRUB_hugepages}"

            if IsString "${str_driver_list_VFIO}" &> /dev/null; then
                str_GRUB_temp+=" ${str_GRUB_blacklist}${str_driver_list_VFIO}"
            fi

            if IsString "${str_HWID_list_STUB}" &> /dev/null; then
                str_GRUB_temp+=" ${str_GRUB_PCI_STUB}${str_HWID_list_STUB}"
            fi

            if IsString "${str_HWID_list_VFIO}" &> /dev/null; then
                str_GRUB_temp+=" ${str_GRUB_VFIO_PCI}${str_HWID_list_VFIO}"
            fi

            # <remarks> Write new line to file. </remarks>
            IsString "${str_GRUB_temp}" &> /dev/null || return $?
            readonly str_GRUB_temp+="${str_GRUB_template}\"${str_GRUB_required}${str_GRUB_default}${str_GRUB_temp}\""
            ReplaceLineInArray "arr_file1" "${str_GRUB}" "${str_GRUB_temp}" || return $?
            OverwriteFile "arr_file1" "${str_file1}" || return $?
        }

        # <params>
            # <remarks> File contents </remarks>
            declare -a arr_file1_contents arr_file2_contents arr_file3_contents arr_file4_contents arr_file5_contents

            # <remarks> Filenames </remarks>
            local readonly str_file1="/etc/default/grub"
            local readonly str_file2="/etc/initramfs-tools/modules"
            local readonly str_file3="/etc/modprobe.d/pci-blacklists.conf"
            local readonly str_file4="/etc/modprobe.d/vfio.conf"
            local readonly str_file5="/etc/modules"

            # <remarks> Evaluations </remarks>
            local readonly var_get_softdep='softdep ${str_driver} pre: vfio-pci'
        # </params>

        # <remarks> Check if backup files exist. </remarks>
        GoToScriptDir && cd "${str_files_dir}"

        # <remarks> Backup existing system files. </remarks>
        BackupFile "${str_file1}"
        BackupFile "${str_file2}"
        BackupFile "${str_file3}"
        BackupFile "${str_file4}"
        BackupFile "${str_file5}"

        # <remarks> GRUB </remarks>
        Static_VFIO_GRUB || return $?

        # <summary> Initramfs and Modules </summary>
            # <remarks> Organize new lines. </remarks>
            declare -a arr_file2=( "${arr_static_initramfs_file_template[@]}" )
            declare -a arr_file5=( "${arr_static_modules_file_template[@]}" )
            declare -a arr_softdep=()
            declare -a arr_initramfs_HWID=()
            declare -a arr_modules_HWID=()
            local str_new_line_VFIO_temp=""

            for var_driver in "${arr_drivers_VFIO_PCI[@]}"; do
                arr_softdep+=(
                    $( eval "${var_get_softdep}" )
                    "${var_driver}"
                )
            done

            if IsString "${str_HWID_list_STUB}" &> /dev/null; then
                str_new_line_VFIO_temp+="${str_HWID_list_STUB}"
            fi

            if [[ "${#str_new_line_VFIO_temp[@]}" == *","* ]] && IsString "${str_HWID_list_VFIO}" &> /dev/null; then
                str_new_line_VFIO_temp+=",${str_HWID_list_VFIO}"
            fi

            readonly str_new_line_VFIO_temp

            readonly arr_initramfs_HWID=(
                "vfio"
                "vfio_iommu_type1"
                "vfio_virqfd"
                "#"
                "${arr_softdep[@]}"
                "#"
                "${str_modules_VFIO_PCI}${str_new_line_VFIO_temp}"
                "${str_initramfs_modules_VFIO_PCI}${str_new_line_VFIO_temp}"
                "${str_VFIO_PCI_driver}"
            )

            readonly arr_modules_HWID=(
                "vfio"
                "vfio_iommu_type1"
                "vfio_pci"
                "vfio_virqfd"
                "kvm"
                "kvm_intel"
                "apm power_off=1"
                "#"
                "${str_modules_VFIO_PCI}${str_new_line_VFIO_temp}"
            )

            # <remarks> Set new lines. </remarks>
            readonly arr_file2+=( "${arr_initramfs_HWID[@]}" )
            readonly arr_file5+=( "${arr_modules_HWID[@]}" )

            # <remarks> Write new line to file. </remarks>
            OverwriteFile "arr_file2" "${str_file2}" || return $?
            OverwriteFile "arr_file5" "${str_file5}" || return $?

        # <summary> Modprobe: blacklists </summary>
            # <remarks> Organize new lines. </remarks>
            declare -a arr_file3=( "${arr_static_modprobe_blacklist_file_template[@]}" )

            # <remarks> Set new lines. </remarks>
            for var_driver in "${arr_drivers_VFIO_PCI[@]}"; do      # TODO: change to valid array
                arr_file3+=( "${str_modprobe_blacklist}${var_driver}" )
            done

            readonly arr_file3

            # <remarks> Write new lines to file. </remarks>
            OverwriteFile "arr_file3" "${str_file3}" || return $?

        # <remarks> Modprobe: conf </remarks>
            # <remarks> Organize new lines. </remarks>
            declare -ar arr_file4=(
                "${arr_static_modprobe_vfio_file_template[@]}"
                "${arr_softdep[@]}"
                "${str_initramfs_modules_VFIO_PCI}${str_new_line_VFIO_temp}"
            )

            # <remarks> Write new lines to file. </remarks>
            OverwriteFile "arr_file4" "${str_file4}" || return $?

        return 0
    }

    # # <summary> ??? </summary>
    # # <returns> exit code </returns>
    # function Setup_VFIO
    # {
    #     # <params>

    #     # </params>

    #     # diff between static and multiboot => static: all IOMMU for VFIO with PCI STUB devices will be binded to VFIO PCI driver? append only to GRUB and system files.
    #     # multiboot: PCI STUB devices will use PCI STUB driver? append only GRUB and multiple GRUB entries

    #     return 0
    # }

    # # <summary> ??? </summary>
    # # <returns> exit code </returns>
    # function UpdateExisting_VFIO
    # {
    #     return 0
    # }
# </code>

# <params>
    # <remarks> GRUB templates </remarks>
    declare -gr str_GRUB_template="GRUB_CMDLINE_LINUX_DEFAULT="
    declare -gr str_GRUB_required="iommu=1,pt amd_iommu=on intel_iommu=on "
    declare -gr str_GRUB_default="video=efifb:off,vesafb:off acpi=force apm=power_off rd.driver.pre=vfio-pci pcie_aspm=off kvm.ignore_msrs=1 "

    # <remarks> VFIO command lines </remarks>
    declare -gr str_driver_VFIO_PCI="vfio-pci"
    declare -gr str_GRUB_blacklist="modprobe.blacklist="
    declare -gr str_GRUB_PCI_STUB="pci-stub.ids="
    declare -gr str_GRUB_VFIO_PCI="vfio_pci.ids="
    declare -gr str_modprobe_blacklist="blacklist "
    declare -gr str_modules_VFIO_PCI="vfio_pci ids="
    declare -gr str_initramfs_modules_VFIO_PCI="options ${str_modules_VFIO_PCI}"
    declare -gr str_VFIO_PCI_driver="vfio-pci"

    # <remarks> File templates. Dependencies: VFIO command lines. </remarks>
    declare -agr arr_mulitboot_file_template=(
        "${arr_file_disclaimer[@]}"
        "#!/bin/sh"
        "exec tail -n +3 \$0"
        "# This file provides an easy way to add custom menu entries.  Simply type the"
        "# menu entries you want to add after this comment.  Be careful not to change"
        "# the 'exec tail' line above."
    )

    declare -agr arr_static_initramfs_file_template=(
        "${arr_vfio_disclaimer[@]}"
        "# List of modules that you want to include in your initramfs."
        "# They will be loaded at boot time in the order below."
        "#"
        "# Syntax:  module_name [args ...]"
        "#"
        "# Examples:"
        "#"
        "# raid1"
        "# sd_mod"
        "#"
        "# NOTE: Do not change the following lines, unless you know what you are doing!"
        "vfio"
        "vfio_iommu_type1"
        "vfio_virqfd"
        "#"
        "# Soft dependencies:    (NOTE: repeat for each driver)"
        "#   softdep 'DRIVER_NAME' pre: ${str_VFIO_PCI_driver}"
        "#"
        "# GRUB command line and PCI hardware IDs:"
        "#   ${str_initramfs_modules_VFIO_PCI}"
        "#   ${str_modules_VFIO_PCI}"
        "#   vfio"
        "#"
    )

    declare -agr arr_static_modprobe_blacklist_file_template=(
        "${arr_vfio_disclaimer[@]}"
        "# Kernel module blacklist:"
        "#   blacklist 'DRIVER_NAME'"
        "#"
    )

    declare -agr arr_static_modprobe_vfio_file_template=(
        "${arr_vfio_disclaimer[@]}"
        "# Soft dependencies:    (NOTE: repeat for each driver)"
        "#   softdep 'DRIVER_NAME' pre: ${str_VFIO_PCI_driver}"
        "#"
        "# GRUB command line and PCI hardware IDs:"
        "#   ${str_initramfs_modules_VFIO_PCI}"
        "#"
    )

    declare -agr arr_static_modules_file_template=(
        "${arr_vfio_disclaimer[@]}"
        "#"
        "# /etc/modules: kernel modules to load at boot time."
        "#"
        "# This file contains the names of kernel modules that should be loaded"
        "# at boot time, one per line. Lines beginning with \"#\" are ignored."
        "#"
        "# NOTE: Do not change the following lines, unless you know what you are doing!"
        "vfio"
        "vfio_iommu_type1"
        "${str_VFIO_PCI_driver}"
        "vfio_virqfd"
        "kvm"
        "kvm_intel"
        "apm power_off=1"
        "#"
        "# PCI hardware IDs:"
        "#   ${str_modules_VFIO_PCI}"
        "#"
    )
# </params>