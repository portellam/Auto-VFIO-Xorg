#!/bin/bash sh

#
# Filename:         vfiolib-setup
# Description:      Select VFIO setup.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source vfiolib-common
    source vfiolib-extras
    source vfiolib-files
    source vfiolib-parse
    source vfiolib-usage
# </code>

# <code>
    function AreParamsNotEmptyForMultibootSetup
    {
        if ( [[ -z "$_VGA_VFIOPCI_DRIVER_DELIM"  ]] \
            || ( [[ -z "$_VGA_PCISTUB_HWID_DELIM" ]] \
            && [[ -z "$_VGA_VFIOPCI_HWID_DELIM" ]] )); then
            echo -e "$_PREFIX_ERROR Output is empty."
            return 1
        fi

        return 0
    }

    function AreParamsNotEmptyForStaticSetup
    {
        if ( [[ -z "$_VFIOPCI_DRIVER_DELIM"  ]] \
            || ( [[ -z "$_PCISTUB_HWID_DELIM" ]] \
            && [[ -z "$_VFIOPCI_HWID_DELIM" ]] )); then
            echo -e "$_PREFIX_ERROR Output is empty."
            return 1
        fi

        return 0
    }

    function AskToSpecifyStaticSetup
    {
        for _TRIES_COUNT in $( seq 0 2 ); do
            read -r -p "Write output to GRUB only? [Y/n]: " _ANSWER

            case "$_ANSWER" in
                [Yy]* )
                    _EXECUTE_GRUB_STATIC_SETUP=true
                    return 0 ;;

                [Nn]* )
                    _EXECUTE_GRUB_STATIC_SETUP=false
                    return 0 ;;

                * )
                    echo "Please answer \"Y\" or \"N\"." ;;
            esac
        done

        echo -e "$_PREFIX_ERROR Failed to answer."
        return 1
    }

    function ExecuteMultibootSetup
    {
        if ! "$_HAS_EXECUTED_BACKUPS" \
            || ! GetAllParamsForMultibootSetup \
            || ! WriteFilesForMultibootSetup \
            || ! ExecuteUpdateAfterSetup; then
            return 1
        fi

        return 0
    }

    function ExecuteStaticSetup
    {
        DoesHostHaveVGA || return 1
        AskToSpecifyStaticSetup || return 1

        if "$_EXECUTE_GRUB_STATIC_SETUP" \
            && ( ! "$_HAS_EXECUTED_BACKUPS" \
            || ! GetParamsForAnySetup \
            || ! AreParamsNotEmptyForStaticSetup \
            || ! WriteFilesForGRUBStaticSetup \
            || ! ExecuteUpdateAfterSetup ); then
            return 1
        fi

        if ! "$_EXECUTE_GRUB_STATIC_SETUP" \
            && ( ! "$_HAS_EXECUTED_BACKUPS" \
            || ! GetParamsForAnySetup \
            || ! AreParamsNotEmptyForStaticSetup \
            || ! GetListsForNoGRUBStaticSetup \
            || ! WriteFilesForNoGRUBStaticSetup \
            || ! ExecuteUpdateAfterSetup ); then
            return 1
        fi

        return 0
    }

    function ExecuteUninstallSetup
    {
        if ! "$_HAS_EXECUTED_BACKUPS" \
            || ! ExecuteUpdateAfterSetup; then
            echo -e "$_PREFIX_ERROR Uninstall has failed."
        fi

        return 0
    }

    function ExecuteUpdateAfterSetup
    {
        if ! sudo update-grub \
            || ! sudo update-initramfs -u -k all; then
            echo -e "$_PREFIX_ERROR Failed to update system configuration."
            return 1
        fi

        return 0
    }

    function ExecuteSetup
    {
        function Main
        {
            if ! "$_EXECUTE_MULTIBOOT_SETUP" \
                && ! "$_EXECUTE_STATIC_SETUP" \
                && ! "$_EXECUTE_UNINSTALL_SETUP"; then
                for _TRIES_COUNT in $( seq 0 2 ); do
                    read -r -p "Execute VFIO setup? [(M)ultiboot/(S)tatic/(U)ninstall]: " _ANSWER

                    case "$_ANSWER" in
                        [Mm]* )
                            _EXECUTE_MULTIBOOT_SETUP=true
                            break ;;

                        [Ss]* )
                            _EXECUTE_STATIC_SETUP=true
                            break ;;

                        [Uu]* )
                            _EXECUTE_UNINSTALL_SETUP=true
                            break ;;

                        * )
                            echo "Please answer M, S, or U." ;;
                    esac
                done

                if ! [[ "$_ANSWER" =~ [MmSsUu] ]]; then
                    echo -e "$_PREFIX_ERROR Failed to answer."
                    return 1
                fi
            fi

            case true in
                "$_EXECUTE_MULTIBOOT_SETUP" )
                    ExecuteMultibootSetup || return 1 ;;

                "$_EXECUTE_STATIC_SETUP" )
                    ExecuteStaticSetup || return 1 ;;

                "$_EXECUTE_UNINSTALL_SETUP" )
                    ExecuteUninstallSetup || return 1 ;;
            esac
        }

        Main
        PrintPassOrFail "Deploying VFIO setup...\t"
        return "$_LAST_EXIT_CODE"
    }

    function GetAllParamsForMultibootSetup
    {
        IFS=$'\n'
        _IOMMU_GROUP_ID_LIST_WITH_VGA_FOR_VFIO=( $( sort -r <<<"${_IOMMU_GROUP_ID_LIST_WITH_VGA_FOR_VFIO[*]}" ) )
        unset IFS

        # <remarks> System configuration </remarks>
        local -i _MAX_NUM_PARSE_KERNELS=3
        declare -a _KERNELS_LIST=( $( ls -1 /boot/vmli* | cut -d 'z' -f 2 | cut -c 2- | sort -r | head -n $_MAX_NUM_PARSE_KERNELS ) )
        local _SYSTEM_DISK=$( df / | grep -iv 'filesystem' | cut -d '/' -f3 | cut -d ' ' -f1 )
        local _SYSTEM_DISTRO=$( lsb_release -i -s )
        local _SYSTEM_FSTYPE=$( blkid -s TYPE | grep $_SYSTEM_DISK | cut -d '"' -f2 )
        local _SYSTEM_KERNEL=$( uname -o )
        local _SYSTEM_OS=$( uname )
        local _SYSTEM_UUID=$( blkid -s UUID | grep $_SYSTEM_DISK | cut -d '"' -f2 )
        local _LINE_GRUB_CMDLINE_PREFIX=""
        _LINE_GRUB_CMDLINE_PREFIX+="$_LINE_GRUB_CMDLINE "
        _LINE_GRUB_CMDLINE_PREFIX+="$_LINE_GRUB_CMDLINE_ISOLCPU "
        _LINE_GRUB_CMDLINE_PREFIX+="$_OUTPUT_GRUB_CMDLINE_HUGEPAGES "
        GetParamsForAnySetup || return 1

        for _THIS_IOMMU_GROUP_ID in ${_IOMMU_GROUP_ID_LIST_WITH_VGA_FOR_VFIO[@]}; do
            declare -g _THIS_IOMMU_GROUP_VGA_NAME=""
            GetNameForIOMMUGroupWithVGA "$_THIS_IOMMU_GROUP_ID"

            for _IOMMU_GROUP_ID in ${_IOMMU_GROUP_ID_LIST_WITH_VGA_FOR_VFIO[@]}; do
                if [[ "$_IOMMU_GROUP_ID" != "$_THIS_IOMMU_GROUP_ID" ]]; then
                    GetParamsForMultibootSetup "$_IOMMU_GROUP_ID" || return 1
                    GetListsForMultibootSetup "$_IOMMU_GROUP_ID"
                fi
            done
        done

        if [[ "${#_FILE_CONTENTS_LIST[@]}" -eq 0 ]]; then
            echo -e "$_PREFIX_ERROR Multiboot setup output is empty."
            return 1
        fi

        return 0
    }

    function GetListsForIOMMUGroup
    {
        local -a _CLASS_LIST="${_CLASS_BY_VALID_IOMMU_GROUP_LIST[$1]}"
        local -a _DRIVER_LIST="${_DRIVER_BY_VALID_IOMMU_GROUP_LIST[$1]}"
        local -a _HWID_LIST="${_HWID_BY_VALID_IOMMU_GROUP_LIST[$1]}"

        for _KEY in ${!_HWID_LIST[@]}; do
            local _CLASS=${_CLASS_LIST[$_KEY]}
            local _DRIVER=${_DRIVER_LIST[$_KEY]}
            local _HWID=${_HWID_LIST[$_KEY]}

            if [[ ! -z "$_HWID" ]] \
                && IsDeviceForPCISTUB "$_CLASS"; then
                _PCISTUB_HWID_DELIM+="$_HWID,"
            fi

            if [[ ! -z "$_HWID" ]] \
                && ! IsDeviceForPCISTUB "$_CLASS"; then
                _VFIOPCI_HWID_DELIM+="$_HWID,"
            fi

            if IsDriverNotOnIgnoreList "$_DRIVER"; then
                _VFIOPCI_DRIVER_DELIM+="$_DRIVER,"
                _VFIOPCI_DRIVER_LIST+=( "$_DRIVER" )
            fi
        done

        return 0
    }

    function GetListsForIOMMUGroupByPCI_ID
    {
        local -a _PCI_ID_LIST="${_PCI_ID_BY_VALID_IOMMU_GROUP_LIST[$1]}"

        for _KEY in ${!_PCI_ID_LIST[@]}; do
            local _PCI_ID_DELIM=${_PCI_ID_LIST[$_KEY]}
            local -i _DELIM_COUNT=1
            local _PCI_ID=$( cut -d ' ' -f $_DELIM_COUNT <<< "$_PCI_ID_DELIM" )

            while [[ ! -z "$_PCI_ID" ]]; do
                local _PCI_ID=$( cut -d ' ' -f $_DELIM_COUNT <<< "$_PCI_ID_DELIM" )
                local _CLASS="$( lspci -ms $_PCI_ID | cut -d '"' -f 2 )"
                local _DRIVER=$( lspci -ks $_PCI_ID | grep -i "driver" | cut -d " " -f 5 )
                local _HWID=$( lspci -ns $_PCI_ID | cut -d " " -f 3 )

                if [[ ! -z "$_HWID" ]] \
                    && IsDeviceForPCISTUB "$_CLASS"; then
                    _PCISTUB_HWID_DELIM+="$_HWID,"
                fi

                if [[ ! -z "$_HWID" ]] \
                    && ! IsDeviceForPCISTUB "$_CLASS"; then
                    _VFIOPCI_HWID_DELIM+="$_HWID,"
                fi

                if IsDriverNotOnIgnoreList "$_DRIVER"; then
                    _VFIOPCI_DRIVER_DELIM+="$_DRIVER,"
                    _VFIOPCI_DRIVER_LIST+=( "$_DRIVER" )
                fi

                (( _DELIM_COUNT++ ))
            done
        done

        return 0
    }

    function GetListsForIOMMUGroupWithVGA
    {
        local -a _CLASS_LIST="${_CLASS_BY_VALID_IOMMU_GROUP_LIST[$1]}"
        local -a _DRIVER_LIST="${_DRIVER_BY_VALID_IOMMU_GROUP_LIST[$1]}"
        local -a _HWID_LIST="${_HWID_BY_VALID_IOMMU_GROUP_LIST[$1]}"

        for _KEY in ${!_HWID_LIST[@]}; do
            local _CLASS_DELIM=${_CLASS_LIST[$_KEY]}
            local _DRIVER_DELIM=${_DRIVER_LIST[$_KEY]}
            local _HWID_DELIM=${_HWID_LIST[$_KEY]}
            local _NAME_DELIM=${_NAME_LIST[$_KEY]}
            local -i _DELIM_COUNT=1
            local _HWID=$( cut -d ' ' -f $_DELIM_COUNT <<< "$_HWID_DELIM" )

            while [[ ! -z "$_HWID" ]]; do
                local _CLASS=$( cut -d ' ' -f $_DELIM_COUNT <<< "$_CLASS_DELIM" )
                local _DRIVER=$( cut -d ' ' -f $_DELIM_COUNT <<< "$_DRIVER_DELIM" )
                _HWID=$( cut -d ' ' -f $_DELIM_COUNT <<< "$_HWID_DELIM" )
                local _NAME=$( cut -d ' ' -f $_DELIM_COUNT <<< "$_NAME_DELIM" )

                if [[ ! -z "$_HWID" ]] \
                    && IsDeviceForPCISTUB "$_CLASS"; then
                    _VGA_PCISTUB_HWID_DELIM+="$_HWID,"
                fi

                if [[ ! -z "$_HWID" ]] \
                    && ! IsDeviceForPCISTUB "$_CLASS"; then
                    _VGA_VFIOPCI_HWID_DELIM+="$_HWID,"
                fi

                if [[ ! -z "$_DRIVER" ]] \
                    && IsDriverNotOnIgnoreList "$_DRIVER"; then
                    _VGA_VFIOPCI_DRIVER_DELIM+="$_DRIVER,"
                fi

                if ! "$_EXECUTE_MULTIBOOT_SETUP" \
                    && [[ ! -z "$_DRIVER" ]] \
                    && IsDriverNotOnIgnoreList "$_DRIVER"; then
                    _VGA_VFIOPCI_DRIVER_LIST+=( "$_DRIVER" )
                fi

                (( _DELIM_COUNT++ ))
            done
        done

        return 0
    }

    function GetListsForIOMMUGroupWithVGAByPCI_ID
    {
        local -a _PCI_ID_LIST="${_PCI_ID_BY_VALID_IOMMU_GROUP_LIST[$1]}"

        for _KEY in ${!_PCI_ID_LIST[@]}; do
            local _PCI_ID_DELIM=${_PCI_ID_LIST[$_KEY]}
            local -i _DELIM_COUNT=1
            local _PCI_ID=$( cut -d ' ' -f $_DELIM_COUNT <<< "$_PCI_ID_DELIM" )

            while [[ ! -z "$_PCI_ID" ]]; do
                local _PCI_ID=$( cut -d ' ' -f $_DELIM_COUNT <<< "$_PCI_ID_DELIM" )
                local _CLASS="$( lspci -ms $_PCI_ID | cut -d '"' -f 2 )"
                local _DRIVER=$( lspci -ks $_PCI_ID | grep -i "driver" | cut -d " " -f 5 )
                local _HWID=$( lspci -ns $_PCI_ID | cut -d " " -f 3 )
                local _NAME="$( lspci -ms $_PCI_ID | cut -d '"' -f 6 )"

                if [[ ! -z "$_HWID" ]] \
                    && IsDeviceForPCISTUB "$_CLASS"; then
                    _VGA_PCISTUB_HWID_DELIM+="$_HWID,"
                fi

                if [[ ! -z "$_HWID" ]] \
                    && ! IsDeviceForPCISTUB "$_CLASS"; then
                    _VGA_VFIOPCI_HWID_DELIM+="$_HWID,"
                fi

                if [[ ! -z "$_DRIVER" ]] \
                    && IsDriverNotOnIgnoreList "$_DRIVER"; then
                    _VGA_VFIOPCI_DRIVER_DELIM+="$_DRIVER,"
                fi

                if ! "$_EXECUTE_MULTIBOOT_SETUP" \
                    && [[ ! -z "$_DRIVER" ]] \
                    && IsDriverNotOnIgnoreList "$_DRIVER"; then
                    _VGA_VFIOPCI_DRIVER_LIST+=( "$_DRIVER" )
                fi

                (( _DELIM_COUNT++ ))
            done
        done

        return 0
    }

    function GetNameForIOMMUGroupWithVGA
    {
        local -a _PCI_ID_LIST="${_PCI_ID_BY_VALID_IOMMU_GROUP_LIST[$1]}"

        for _KEY in ${!_PCI_ID_LIST[@]}; do
            local _PCI_ID_DELIM=${_PCI_ID_LIST[$_KEY]}
            local -i _DELIM_COUNT=1
            local _PCI_ID=$( cut -d ' ' -f $_DELIM_COUNT <<< "$_PCI_ID_DELIM" )

            while [[ ! -z "$_PCI_ID" ]]; do
                local _PCI_ID=$( cut -d ' ' -f $_DELIM_COUNT <<< "$_PCI_ID_DELIM" )
                local _CLASS="$( lspci -ms $_PCI_ID | cut -d '"' -f 2 )"
                local _NAME="$( lspci -ms $_PCI_ID | cut -d '"' -f 6 )"

                if IsDeviceVGA "$_CLASS"; then
                    _THIS_IOMMU_GROUP_VGA_NAME="$_NAME"
                    return 0
                fi

                (( _DELIM_COUNT++ ))
            done
        done

        return 0
    }

    function GetListsForMultibootSetup
    {
        for _KERNEL in ${_KERNELS_LIST[@]}; do
            # <remarks> Organize menu entry for excluded VGA group and given system kernel. </remarks>
            _FILE_CONTENTS_LIST+=(
                "menuentry \"$_SYSTEM_DISTRO, with $_SYSTEM_OS $_KERNEL (VFIO, w/o IOMMU '$1' w/ '$_THIS_IOMMU_GROUP_VGA_NAME')\"{"
                # "\tload_video"
                # "insmod gzio"
                # "if [ x\$grub_platform = xxen ]; then insmod xzio; insmod lzopio; fi"
                # "insmod part_gpt"
                "\tinsmod $_SYSTEM_FSTYPE"
                "\tset root='/dev/disk/by-uuid/$_SYSTEM_UUID'"
                "\t"'if [ x$feature_platform_search_hint = xy ]; then'"\n\t\t"'search --no-floppy --fs-uuid --set=root '"$_SYSTEM_UUID\n\t"'fi'
                "\techo    'Loading $_SYSTEM_OS $_KERNEL ...'"
                "\tlinux   /boot/vmlinuz-$_KERNEL root=UUID=$_SYSTEM_UUID $_LINE_GRUB_CMDLINE_TEMP"
                "\tinitrd  /boot/initrd.img-$_KERNEL"
                "\techo    \"VFIO, w/o IOMMU '$1' w/ '$_THIS_IOMMU_GROUP_VGA_NAME'\""
                "}"
                ""
            )
        done

        return 0
    }

    function GetListsForNoGRUBStaticSetup
    {
        declare -ag _BLACKLISTS_LIST=( )
        declare -ag _INITRAMFS_LIST=( )
        declare -ag _MODULES_LIST=( )
        declare -g _HWID_DELIM=""

        for _DRIVER in ${_VFIOPCI_DRIVER_LIST[@]}; do
            _BLACKLISTS_LIST+=(
                "blacklist $_DRIVER"
            )

            _INITRAMFS_LIST+=(
                "softdep $_DRIVER pre: vfio-pci"
                "$_DRIVER"
            )

            _MODULES_LIST+=(
                "softdep $_DRIVER pre: vfio-pci"
            )
        done

        if [[ ! -z "$_THIS_PCISTUB_HWID_DELIM" ]] \
            && [[ ! -z "$_THIS_VFIOPCI_HWID_DELIM" ]]; then
            _THIS_VFIOPCI_HWID_DELIM+=",$_THIS_PCISTUB_HWID_DELIM"
        fi

        if [[ ! -z "$_THIS_PCISTUB_HWID_DELIM" ]] \
            && [[ -z "$_THIS_VFIOPCI_HWID_DELIM" ]]; then
            _THIS_VFIOPCI_HWID_DELIM="$_THIS_PCISTUB_HWID_DELIM"
        fi

        return 0
    }

    function GetParamsForAnySetup
    {
        declare -g _THIS_DRIVER_DELIM=""
        declare -g _THIS_PCISTUB_HWID_DELIM=""
        declare -g _THIS_VFIOPCI_HWID_DELIM=""
        declare -g _PCISTUB_HWID_DELIM=""
        declare -g _VFIOPCI_DRIVER_DELIM=""
        declare -g _VFIOPCI_HWID_DELIM=""
        declare -g _VGA_PCISTUB_HWID_DELIM=""
        declare -g _VGA_VFIOPCI_DRIVER_DELIM=""
        declare -g _VGA_VFIOPCI_HWID_DELIM=""

        if ! "$_EXECUTE_MULTIBOOT_SETUP"; then
            declare -ga _VFIOPCI_DRIVER_LIST=( )
            declare -ga _VGA_VFIOPCI_DRIVER_LIST=( )
        fi

        for _IOMMU_GROUP_ID in ${_IOMMU_GROUP_ID_LIST_FOR_VFIO[@]}; do
            GetListsForIOMMUGroup "$_IOMMU_GROUP_ID" || return 1
        done

        if ! "$_EXECUTE_MULTIBOOT_SETUP"; then
            for _IOMMU_GROUP_ID in ${_IOMMU_GROUP_ID_LIST_WITH_VGA_FOR_VFIO[@]}; do
                GetListsForIOMMUGroupWithVGA "$_IOMMU_GROUP_ID" || return 1
            done
        fi

        if [[ ! -z "$_VFIOPCI_DRIVER_DELIM" ]]; then
            _VFIOPCI_DRIVER_DELIM="${_VFIOPCI_DRIVER_DELIM::-1}"
        fi

        if [[ ! -z "$_PCISTUB_HWID_DELIM" ]]; then
            _PCISTUB_HWID_DELIM="${_PCISTUB_HWID_DELIM::-1}"
        fi

        if [[ ! -z "$_VFIOPCI_HWID_DELIM" ]]; then
            _VFIOPCI_HWID_DELIM="${_VFIOPCI_HWID_DELIM::-1}"
        fi

        if ! "$_EXECUTE_MULTIBOOT_SETUP"; then
            GetTempListForAnySetup
            IFS=$'\n'
            _VFIOPCI_DRIVER_LIST+=( $( sort --uniq <<<"${_VGA_VFIOPCI_DRIVER_LIST[*]}" ) )
            _VFIOPCI_DRIVER_LIST=( $( sort --uniq <<<"${_VFIOPCI_DRIVER_LIST[*]}" ) )
            unset IFS
        fi

        return 0
    }

    function GetParamsForMultibootSetup
    {
        GetListsForIOMMUGroupWithVGA "$1" || return 1
        GetTempListForAnySetup

        declare -g _LINE_GRUB_CMDLINE_TEMP=""
        _LINE_GRUB_CMDLINE_TEMP+="modprobe.blacklist=$_THIS_DRIVER_DELIM "
        _LINE_GRUB_CMDLINE_TEMP+="pci-stub.ids=$_THIS_PCISTUB_HWID_DELIM "
        _LINE_GRUB_CMDLINE_TEMP+="vfio_pci.ids=$_THIS_VFIOPCI_HWID_DELIM "
        _LINE_GRUB_CMDLINE_TEMP="$_LINE_GRUB_CMDLINE_PREFIX${_LINE_GRUB_CMDLINE_TEMP::-1}"
        return 0
    }

    function GetTempListForAnySetup
    {
        if [[ ! -z "$_VFIOPCI_DRIVER_DELIM" ]]; then
            _THIS_DRIVER_DELIM+="$_VFIOPCI_DRIVER_DELIM,"
        fi

        if [[ ! -z "$_VGA_VFIOPCI_DRIVER_DELIM" ]]; then
            _VGA_VFIOPCI_DRIVER_DELIM="${_VGA_VFIOPCI_DRIVER_DELIM::-1}"
            _THIS_DRIVER_DELIM+="$_VGA_VFIOPCI_DRIVER_DELIM,"
        fi

        if [[ ! -z "$_PCISTUB_HWID_DELIM" ]]; then
            _THIS_PCISTUB_HWID_DELIM+="$_PCISTUB_HWID_DELIM,"
        fi

        if [[ ! -z "$_VGA_PCISTUB_HWID_DELIM" ]]; then
            _VGA_PCISTUB_HWID_DELIM="${_VGA_PCISTUB_HWID_DELIM::-1}"
            _THIS_PCISTUB_HWID_DELIM+="$_VGA_PCISTUB_HWID_DELIM,"
        fi

        if [[ ! -z "$_VFIOPCI_HWID_DELIM" ]]; then
            _THIS_VFIOPCI_HWID_DELIM+="$_VFIOPCI_HWID_DELIM,"
        fi

        if [[ ! -z "$_VGA_VFIOPCI_HWID_DELIM" ]]; then
            _VGA_VFIOPCI_HWID_DELIM="${_VGA_VFIOPCI_HWID_DELIM::-1}"
            _THIS_VFIOPCI_HWID_DELIM+="$_VGA_VFIOPCI_HWID_DELIM,"
        fi

        if [[ ! -z "$_THIS_DRIVER_DELIM" ]]; then
            _THIS_DRIVER_DELIM="${_THIS_DRIVER_DELIM::-1}"
        fi

        if [[ ! -z "$_THIS_PCISTUB_HWID_DELIM" ]]; then
            _THIS_PCISTUB_HWID_DELIM="${_THIS_PCISTUB_HWID_DELIM::-1}"
        fi

        if [[ ! -z "$_THIS_VFIOPCI_HWID_DELIM" ]]; then
            _THIS_VFIOPCI_HWID_DELIM="${_THIS_VFIOPCI_HWID_DELIM::-1}"
        fi

        return 0
    }

    function WriteFilesForGRUBStaticSetup
    {
        "$_HAS_EXECUTED_BACKUPS" || return 1
        IFS=$'\n'
        local -r _LINE_TO_MATCH="GRUB_CMDLINE_LINUX_DEFAULT="
        local _LINE_GRUB_CMDLINE_TEMP=""
        _LINE_GRUB_CMDLINE_TEMP+="$_LINE_GRUB_CMDLINE "
        _LINE_GRUB_CMDLINE_TEMP+="$_LINE_GRUB_CMDLINE_ISOLCPU "
        _LINE_GRUB_CMDLINE_TEMP+="$_OUTPUT_GRUB_CMDLINE_HUGEPAGES "
        _LINE_GRUB_CMDLINE_TEMP+="modprobe.blacklist=$_THIS_DRIVER_DELIM "
        _LINE_GRUB_CMDLINE_TEMP+="pci-stub.ids=$_THIS_PCISTUB_HWID_DELIM "
        _LINE_GRUB_CMDLINE_TEMP+="vfio_pci.ids=$_THIS_VFIOPCI_HWID_DELIM "
        _LINE_GRUB_CMDLINE_TEMP="${_LINE_GRUB_CMDLINE_TEMP::-1}"
        local -r _LINE_GRUB_CMDLINE_DEFAULT="$_LINE_TO_MATCH\"$_LINE_GRUB_CMDLINE_TEMP\""

        if ! sed -i '/'"$_LINE_TO_MATCH"'/c\'"$_LINE_GRUB_CMDLINE_DEFAULT" "$_GRUB_DEST_PATH_1"; then
            echo -e "$_PREFIX_ERROR Failed to overwrite target lines of files."
            return 1
        fi

        unset IFS
        return 0
    }

    function WriteFilesForNoGRUBStaticSetup
    {
        "$_HAS_EXECUTED_BACKUPS" || return 1
        IFS=$'\n'
        local -r _LINE_TO_MATCH="GRUB_CMDLINE_LINUX_DEFAULT="
        local _LINE_GRUB_CMDLINE_TEMP=""
        _LINE_GRUB_CMDLINE_TEMP+="$_LINE_GRUB_CMDLINE "
        _LINE_GRUB_CMDLINE_TEMP+="$_LINE_GRUB_CMDLINE_ISOLCPU "
        _LINE_GRUB_CMDLINE_TEMP+="$_OUTPUT_GRUB_CMDLINE_HUGEPAGES "
        # _LINE_GRUB_CMDLINE_TEMP+="modprobe.blacklist= "
        # _LINE_GRUB_CMDLINE_TEMP+="pci-stub.ids= "
        # _LINE_GRUB_CMDLINE_TEMP+="vfio_pci.ids= "
        _LINE_GRUB_CMDLINE_TEMP="${_LINE_GRUB_CMDLINE_TEMP::-1}"
        local -r _LINE_GRUB_CMDLINE_DEFAULT="GRUB_CMDLINE_LINUX_DEFAULT=\"$_LINE_GRUB_CMDLINE_TEMP\""

        # <remarks> Write to new file. </remarks>
        local -i _KEY=$(( "${#_INITRAMFS_LIST[@]}" - 1 ))
        local -i _NUM_LINE=23

        while [[ "$_KEY" -ge 0 ]]; do
            _LINE="${_INITRAMFS_LIST[$_KEY]}"

            if ! sed -i "23i $_LINE" "$_INITRAMFS_MODULES_DEST_PATH"; then
                echo -e "$_PREFIX_ERROR Failed to overwrite target lines of files."
                return 1
            fi

            (( --_KEY ))
        done

        if [[ "$?" -ne 0 ]]; then
            echo -e "$_PREFIX_ERROR Failed to overwrite target lines of files."
            return 1
        fi

        # <remarks> Write to new file. </remarks>
        local -i _KEY=$(( "${#_MODULES_LIST[@]}" - 1 ))
        local -i _NUM_LINE=7

        while [[ "$_KEY" -ge 0 ]]; do
            _LINE="${_MODULES_LIST[$_KEY]}"

            if ! sed -i "7i $_LINE" "$_MODPROBE_VFIO_DEST_PATH"; then
                echo -e "$_PREFIX_ERROR Failed to overwrite target lines of files."
                return 1
            fi

            (( --_KEY ))
        done

        if [[ "$?" -ne 0 ]]; then
            echo -e "$_PREFIX_ERROR Failed to overwrite target lines of files."
            return 1
        fi

        # <remarks> Write to new files. </remarks>
        if ! sed -i '/'$_LINE_TO_MATCH'/c\'"$_LINE_GRUB_CMDLINE_DEFAULT" "$_GRUB_DEST_PATH_1" \
            || ! sed -i "/options vfio_pci ids=*/c\options vfio_pci_ids=\"$_THIS_VFIOPCI_HWID_DELIM\"" "$_INITRAMFS_MODULES_DEST_PATH" \
            || ! sed -i "/vfio_pci ids=*/c\vfio_pci_ids=\"$_THIS_VFIOPCI_HWID_DELIM\"" "$_INITRAMFS_MODULES_DEST_PATH" \
            || ! echo -e "\n${_BLACKLISTS_LIST[*]}" >> "$_MODPROBE_BLACKLISTS_DEST_PATH" \
            || ! sed -i "/options vfio_pci ids=*/c\options vfio_pci ids=\"$_THIS_VFIOPCI_HWID_DELIM\"" "$_MODPROBE_VFIO_DEST_PATH" \
            || ! sed -i "/vfio_pci ids=*/c\vfio_pci_ids=\"$_THIS_VFIOPCI_HWID_DELIM\"" "$_MODULES_DEST_PATH"; then
            echo -e "$_PREFIX_ERROR Failed to overwrite target lines of files."
            return 1
        fi

        unset IFS
        return 0
    }

    function WriteFilesForMultibootSetup
    {
        "$_HAS_EXECUTED_BACKUPS" || return 1
        IFS=$'\n'

        if [[ -d $( dirname "$_CUSTOM_GRUB_DEST_PATH" ) ]] \
            && ! sudo mkdir -p $( dirname "$_CUSTOM_GRUB_DEST_PATH" ); then
            echo -e "$_PREFIX_ERROR Failed to create directory '"$( dirname "$_CUSTOM_GRUB_DEST_PATH" )"'."
            return 1
        fi

        if ! echo -e "\n${_FILE_CONTENTS_LIST[*]}" >> "$_CUSTOM_GRUB_DEST_PATH"; then
            echo -e "$_PREFIX_ERROR Failed to overwrite target lines of files."
            return 1
        fi

        unset IFS
        return 0
    }
# </code>

# <params>
    declare -g _LINE_GRUB_CMDLINE="quiet splash iommu=1,pt amd_iommu=on intel_iommu=on video=efifb:off,vesafb:off acpi=force apm=power_off rd.driver.pre=vfio-pci pcie_aspm=off kvm.ignore_msrs=1"
# </params>