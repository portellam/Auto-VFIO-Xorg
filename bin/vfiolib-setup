#!/bin/false

#
# Filename:         vfiolib-setup
# Description:      Select VFIO setup.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <sources>
    source vfiolib-common
    source vfiolib-post-setup
    source vfiolib-files
    source vfiolib-parse
# </sources>

# <functions>
    # <summary> Public </summary>
        function ExecuteMainSetup
        {
            function Main
            {
                if GetPassExitCode; then
                    if BackupFiles; then
                        AskToSpecifyVFIOSetup || return "${?}"
                    fi
                else
                    GetExitCode
                    RestoreFiles
                    return "${?}"
                fi

                if "${_EXECUTE_VFIO_SETUP_UNINSTALL}"; then
                    ExecuteUninstallSetup
                    return "${?}"
                fi

                if ExecuteParseSelection; then
                    case true in
                        "${_EXECUTE_VFIO_SETUP_MULTIBOOT_WITH_GRUB}" )
                            ExecuteMultibootSetup ;;

                        "${_EXECUTE_VFIO_SETUP_STATIC_WITHOUT_GRUB}" )
                            ExecuteStaticSetup ;;
                    esac
                fi

                return 0
            }

            local OUTPUT="Executing VFIO setup...\t"
            PrintSuffixWait "${OUTPUT}"
            Main
            PrintSuffixPassOrFail "${OUTPUT}"
            return "${_LAST_EXIT_CODE}"
        }

        # <summary> Global setters </summary>
        function SetParameters
        {
            if [[ ! -z "${_ARE_MAIN_SETUP_PARAMS_SET}" ]] \
                && "${_ARE_MAIN_SETUP_PARAMS_SET}"; then
                return 0
            fi

            declare -g _ARE_MAIN_SETUP_PARAMS_SET=true

            # <remarks> Kernel commands </remarks>
            declare -g _DRIVER_DELIM=""
            declare -g _HWID_DELIM=""
            declare -g _LINE_GRUB_CMDLINE="quiet splash amd_iommu=on intel_iommu=on iommu=1,pt"

            # <remarks> File output: Static VFIO with GRUB </remarks>
            declare -g _LINE_GRUB_CMDLINE_DEFAULT=""

            # <remarks> File output: Static VFIO without GRUB </remarks>
            declare -ga _BLACKLISTS_LIST=( )
            declare -ga _INITRAMFS_LIST=( )
            declare -ga _MODULES_LIST=( )

            # <remarks> File output: Multiboot VFIO with GRUB </remarks>
            declare -g _PREFERRED_MENU_ENTRY_TITLE=""
            declare -ga _GRUB_CUSTOM_FILE_CONTENTS=( )
            declare -ga _MENU_ENTRY_TITLE_LIST=( "" )

            # <remarks> Execution Flags </remarks>
            declare -g _ASK_TO_EXECUTE_VFIO_SETUP_STATIC=true
            # declare -g _EXECUTE_VFIO_SETUP_DYNAMIC_WTIH_HOOKS=false
            declare -g _EXECUTE_VFIO_SETUP_SKIP_ALL=true
            declare -g _EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_DEFAULT=false
            declare -g _EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_FIRST=false
            declare -g _EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_LAST=false
            declare -g _EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_VALUE=false
            declare -g _EXECUTE_VFIO_SETUP_MULTIBOOT_WITH_GRUB=false
            declare -g _EXECUTE_VFIO_SETUP_STATIC_WITH_GRUB=true
            declare -g _EXECUTE_VFIO_SETUP_UNINSTALL=false

            # <summary> File output: GRUB </summary>
            declare -g _DEFAULT_MENU_ENTRY_TITLE="0"

                # <remarks> Feature Flags </remarks>
                _FLAG_ADD_EARLY_LOAD_MODULE_ARGS=true
                _FLAG_ADD_LOG_LEVEL_ARGS=true
                _FLAG_ADD_PRIVACY_ARGS=false
                _FLAG_ADD_SET_POWER_ARGS=true
                _FLAG_ADD_SET_VIDEO_ARGS=true
                _FLAG_ADD_WIN10_REQUIRED_ARGS=true

                if "${_FLAG_ADD_LOG_LEVEL_ARGS}"; then
                    _LINE_GRUB_CMDLINE="loglevel=3 ${_LINE_GRUB_CMDLINE}"
                fi

                if "${_FLAG_ADD_PRIVACY_ARGS}" \
                    && IsInstalled "rfkill" &> /dev/null; then
                    _LINE_GRUB_CMDLINE+=" rfkill.default_state=1 systemd.restore_state=0"
                fi

                if "${_FLAG_ADD_SET_POWER_ARGS}"; then
                    _LINE_GRUB_CMDLINE+=" acpi=force apm=power_off pcie_aspm=off"
                fi

                if "${_FLAG_ADD_EARLY_LOAD_MODULE_ARGS}"; then
                    _LINE_GRUB_CMDLINE+=" rd.driver.pre=vfio-pci rd.modules-load=vfio-pci"
                fi

                if "${_FLAG_ADD_SET_VIDEO_ARGS}"; then
                    _LINE_GRUB_CMDLINE+=" video=efifb:off,vesafb:off"
                fi

                if "${_FLAG_ADD_WIN10_REQUIRED_ARGS}"; then
                    _LINE_GRUB_CMDLINE+=" kvm.ignore_msrs=1"
                fi
        }

        function SetPreferredIOMMUGroupForMultiboot
        {
            declare -gi _MULTIBOOT_PREFERRED_IOMMU_GROUP_ID="${1}"
            _EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_VALUE=true
            return 0
        }

    # <summary> Private </summary>
        # <summary> Execution </summary>
            function ExecuteMultibootSetup
            {
                if ! "${_HAS_RESTORED_DEFAULT_FILES}" \
                    || ! SetOutputForMultibootSetup \
                    || ! AskToSpecifyGRUBMenuEntryForMultibootSetup \
                    || ! WriteOutputForMultibootSetup \
                    || ! ExecuteUpdateAfterSetup; then
                    return 1
                fi

                return 0
            }

            function ExecuteStaticSetup
            {
                if ! "${_HAS_RESTORED_DEFAULT_FILES}" \
                    || ! IsParseSelectionOfVGAValid \
                    || ! AskToSpecifyStaticSetup \
                    || ! SetOutputForStaticSetup \
                    || ! WriteOutputForStaticSetup \
                    || ! ExecuteUpdateAfterSetup; then
                    return 1
                fi

                return 0
            }

            function ExecuteUninstallSetup
            {
                if ! "${_HAS_RESTORED_DEFAULT_FILES}" \
                    || ! ExecuteUpdateAfterSetup; then
                    echo -e "${_PREFIX_ERROR} Uninstall has failed."
                fi

                return 0
            }

            function ExecuteUpdateAfterSetup
            {
                SetEntriesForGRUB || return 1
                UpdateGRUB || return 1
                UpdateInitramfs || return 1
                return 0
            }

            function BackupFiles
            {
                BackupFile "${_GRUB_CUSTOM_DEST_PATH}" || return 1
                BackupFile "${_GRUB_DEST_PATH_1}" || return 1
                BackupFile "${_INITRAMFS_MODULES_DEST_PATH}" || return 1
                BackupFile "${_MODPROBE_BLACKLISTS_DEST_PATH}" || return 1
                BackupFile "${_MODPROBE_VFIO_DEST_PATH}" || return 1
                BackupFile "${_MODULES_DEST_PATH}" || return 1
                return 0
            }

            function RestoreFiles
            {
                RestoreFile "${_GRUB_CUSTOM_DEST_PATH}" || return 1
                RestoreFile "${_GRUB_DEST_PATH_1}" || return 1
                RestoreFile "${_INITRAMFS_MODULES_DEST_PATH}" || return 1
                RestoreFile "${_MODPROBE_BLACKLISTS_DEST_PATH}" || return 1
                RestoreFile "${_MODPROBE_VFIO_DEST_PATH}" || return 1
                RestoreFile "${_MODULES_DEST_PATH}" || return 1
                return 0
            }

        # <summary> Interaction </summary>
            function AskToSpecifyVFIOSetup
            {
                if "${_EXECUTE_VFIO_SETUP_MULTIBOOT_WITH_GRUB}" \
                    || "${_EXECUTE_VFIO_SETUP_STATIC_WITH_GRUB}" \
                    || "${_EXECUTE_VFIO_SETUP_STATIC_WITHOUT_GRUB}" \
                    || "${_EXECUTE_VFIO_SETUP_UNINSTALL}" ; then
                    return 0
                fi

                local ANSWER=""

                for COUNT in $( seq 0 2 ); do
                    echo -en "Execute ${_SET_COLOR_YELLOW}VFIO setup${_RESET_COLOR}? "
                    read -r -p "[(M)ultiboot/(S)tatic/(U)ninstall/(N)o]: " ANSWER

                    case "${ANSWER}" in
                        [Mm]* )
                            _EXECUTE_VFIO_SETUP_MULTIBOOT_WITH_GRUB=true
                            break ;;

                        [Ss]* )
                            _EXECUTE_VFIO_SETUP_STATIC_WITHOUT_GRUB=true
                            break ;;

                        [Uu]* )
                            _EXECUTE_VFIO_SETUP_UNINSTALL=true
                            break ;;

                        [Nn]* )
                            return 255 ;;

                        * )
                            echo "Please answer 'M', 'S', 'U', or 'N'." ;;
                    esac
                done

                if ! [[ "${ANSWER}" =~ [MmSsUuNn] ]]; then
                    echo -e "${_PREFIX_ERROR} Failed to answer."
                    return 1
                fi

                return 0
            }

            function AskToSpecifyGRUBMenuEntryForMultibootSetup
            {
                if "${_EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_DEFAULT}" \
                    || "${_EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_FIRST}" \
                    || "${_EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_LAST}" \
                    || "${_EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_VALUE}"; then
                    return 0
                fi

                local -i LAST_INDEX=$(( ${#_MENU_ENTRY_TITLE_LIST[@]} - 1 ))

                for COUNT in $( seq 0 2 ); do
                    echo -e "\nList of valid GRUB menu entries:"
                    PrintListOfGRUBMenuEntry
                    echo
                    read -r -p "Enter preferred GRUB menu entry [0-${LAST_INDEX}]: " ANSWER

                    if [[ -z "${ANSWER}" ]] \
                        || [[ "${ANSWER}" -eq 0 ]]; then
                        _EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_DEFAULT=true
                        return 0
                    fi

                    if [[ "${ANSWER}" -gt 0 ]] \
                        && [[ "${ANSWER}" -le "${LAST_INDEX}" ]]; then
                        _EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_DEFAULT=false
                        _PREFERRED_MENU_ENTRY_TITLE="${_MENU_ENTRY_TITLE_LIST[${ANSWER}]}"
                        return 0
                    fi

                    echo -e "Please answer between 0 and ${LAST_INDEX}."
                done

                echo -e "${_PREFIX_ERROR} Failed to answer."
                return 1
            }

            function AskToSpecifyStaticSetup
            {
                if ! "${_ASK_TO_EXECUTE_VFIO_SETUP_STATIC}"; then
                    return 0
                fi

                for COUNT in $( seq 0 2 ); do
                    read -r -p "Write output to GRUB only? [Y/n]: " ANSWER

                    case "${ANSWER}" in
                        [Yy]* )
                            _EXECUTE_VFIO_SETUP_STATIC_WITH_GRUB=true
                            return 0 ;;

                        [Nn]* )
                            _EXECUTE_VFIO_SETUP_STATIC_WITH_GRUB=false
                            return 0 ;;

                        * )
                            echo "Please answer 'Y' or 'N'." ;;
                    esac
                done

                echo -e "${_PREFIX_ERROR} Failed to answer."
                return 1
            }

        # <summary> Presentation </summary>
            function PrintListOfGRUBMenuEntry
            {
                for KEY in "${!_MENU_ENTRY_TITLE_LIST[@]}"; do
                    local VALUE="${_MENU_ENTRY_TITLE_LIST[${KEY}]}"
                    echo -en "${KEY}:\t"

                    if [[ "${KEY}" -eq 0 ]] \
                        && [[ -z "${VALUE}" ]]; then
                        VALUE="Default: no VFIO setup"
                        echo -e "${VALUE}"
                    else
                        echo -e "\"${VALUE}\""
                    fi
                done

                return 0
            }

        # <summary> Setters </summary>
            function SetOutputForStaticSetup
            {
                local -a DRIVER_LIST=( )
                local -a STUB_HWID_LIST=( )
                local -a VFIO_HWID_LIST=( )
                local DRIVER_DELIM=""
                local STUB_HWID_DELIM=""
                local VFIO_HWID_DELIM=""
                local LINE_GRUB_CMDLINE_PREFIX="${_LINE_GRUB_CMDLINE} "

                if "${_IS_SETUP_ISOLCPU}"; then
                    LINE_GRUB_CMDLINE_PREFIX+="${_LINE_GRUB_CMDLINE_ISOLCPU} "
                fi

                if "${_IS_SETUP_HUGEPAGES}"; then
                    LINE_GRUB_CMDLINE_PREFIX+="${_LINE_GRUB_CMDLINE_HUGEPAGES} "
                fi

                GetListsForSelection "_IOMMU_GROUPS_FOR_VFIO_LIST" "DRIVER_LIST" "STUB_HWID_LIST" "VFIO_HWID_LIST"
                SetCommaDelimitedStringFromEnum "DRIVER_LIST" "DRIVER_DELIM"
                SetCommaDelimitedStringFromEnum "STUB_HWID_LIST" "STUB_HWID_DELIM"
                SetCommaDelimitedStringFromEnum "VFIO_HWID_LIST" "VFIO_HWID_DELIM"

                if ! IsEnum "DRIVER_LIST" \
                    && ! IsEnum "STUB_HWID_LIST" \
                    && ! IsEnum "VFIO_HWID_LIST"; then
                    echo -e "${_PREFIX_ERROR} Static setup output is empty."
                    return 1
                fi

                if "${_EXECUTE_VFIO_SETUP_STATIC_WITH_GRUB}"; then
                    local LINE_GRUB_CMDLINE_TEMP="modprobe.blacklist=${DRIVER_DELIM} "
                    LINE_GRUB_CMDLINE_TEMP+="pci_stub.ids=${STUB_HWID_DELIM} "
                    LINE_GRUB_CMDLINE_TEMP+="vfio_pci.ids=${VFIO_HWID_DELIM} "
                    _LINE_GRUB_CMDLINE_DEFAULT="${LINE_GRUB_CMDLINE_PREFIX}${LINE_GRUB_CMDLINE_TEMP::-1}"
                else
                    for DRIVER in ${DRIVER_LIST[@]}; do
                        _BLACKLISTS_LIST+=(
                            "blacklist ${DRIVER}"
                        )
                        _INITRAMFS_LIST+=(
                            "softdep ${DRIVER} pre: vfio-pci"
                            "${DRIVER}"
                        )
                        _MODULES_LIST+=(
                            "softdep ${DRIVER} pre: vfio-pci"
                        )
                    done

                    if [[ ! -z "${STUB_HWID_DELIM}" ]]; then
                        _HWID_DELIM="${STUB_HWID_DELIM},"
                    fi

                    if [[ ! -z "${VFIO_HWID_DELIM}" ]]; then
                        _HWID_DELIM+="${VFIO_HWID_DELIM}"
                    else
                        _HWID_DELIM="${_HWID_DELIM::-1}"
                    fi

                    _LINE_GRUB_CMDLINE_DEFAULT="${LINE_GRUB_CMDLINE_PREFIX}"
                fi

                return 0
            }

            function SetOutputForMultibootSetup
            {
                # <remarks> System configuration </remarks>
                local -i MAX_NUM_PARSE_KERNELS=3
                local -a KERNELS_LIST=( $( ls -1 /boot/vmli* | cut -d 'z' -f 2 | cut -c 2- | sort -r | head -n ${MAX_NUM_PARSE_KERNELS} ) )
                local SYSTEM_DISK=$( df / | grep -iv 'filesystem' | cut -d '/' -f3 | cut -d ' ' -f1 )
                local SYSTEM_DISTRO=$( lsb_release -i -s )
                local SYSTEM_FSTYPE=$( blkid -s TYPE | grep ${SYSTEM_DISK} | cut -d '"' -f2 )
                local SYSTEM_KERNEL=$( uname -o )
                local SYSTEM_OS=$( uname )
                local SYSTEM_UUID=$( blkid -s UUID | grep ${SYSTEM_DISK} | cut -d '"' -f2 )
                local LINE_GRUB_CMDLINE_PREFIX=""
                LINE_GRUB_CMDLINE_PREFIX+="${_LINE_GRUB_CMDLINE} "

                if [[ ! -z "${_LINE_GRUB_CMDLINE_ISOLCPU}" ]]; then
                    LINE_GRUB_CMDLINE_PREFIX+="${_LINE_GRUB_CMDLINE_ISOLCPU} "
                fi

                if [[ ! -z "${_LINE_GRUB_CMDLINE_HUGEPAGES}" ]]; then
                    LINE_GRUB_CMDLINE_PREFIX+="${_LINE_GRUB_CMDLINE_HUGEPAGES} "
                fi

                for THIS_IOMMU_GROUP_ID in ${_IOMMU_GROUPS_FOR_VFIO_LIST[@]}; do
                    DoesIOMMUGroupHaveVGADevice "${THIS_IOMMU_GROUP_ID}" &> /dev/null || continue
                    local -a DRIVER_LIST=( )
                    local -a SELECTION_WITHOUT_THIS_GROUP_LIST=( )
                    local -a STUB_HWID_LIST=( )
                    local -a VFIO_HWID_LIST=( )
                    local LINE_GRUB_CMDLINE_TEMP=""
                    local THIS_DRIVER_DELIM=""
                    local THIS_IOMMU_GROUP_VGA_NAME=""
                    local THIS_STUB_HWID_DELIM=""
                    local THIS_VFIO_HWID_DELIM=""

                    for IOMMU_GROUP_ID in ${_IOMMU_GROUPS_FOR_VFIO_LIST[@]}; do
                        if [[ "${IOMMU_GROUP_ID}" != "${THIS_IOMMU_GROUP_ID}" ]]; then
                            SELECTION_WITHOUT_THIS_GROUP_LIST+=( "${IOMMU_GROUP_ID}" )
                        fi
                    done

                    GetNameForFirstVGADeviceInIOMMUGroup "${THIS_IOMMU_GROUP_ID}" "THIS_IOMMU_GROUP_VGA_NAME" &> /dev/null
                    GetListsForSelection "SELECTION_WITHOUT_THIS_GROUP_LIST" "DRIVER_LIST" "STUB_HWID_LIST" "VFIO_HWID_LIST"
                    SetCommaDelimitedStringFromEnum "DRIVER_LIST" "THIS_DRIVER_DELIM"
                    SetCommaDelimitedStringFromEnum "STUB_HWID_LIST" "THIS_STUB_HWID_DELIM"
                    SetCommaDelimitedStringFromEnum "VFIO_HWID_LIST" "THIS_VFIO_HWID_DELIM"
                    LINE_GRUB_CMDLINE_TEMP+="modprobe.blacklist=${THIS_DRIVER_DELIM} "
                    LINE_GRUB_CMDLINE_TEMP+="pci_stub.ids=${THIS_STUB_HWID_DELIM} "
                    LINE_GRUB_CMDLINE_TEMP+="vfio_pci.ids=${THIS_VFIO_HWID_DELIM} "
                    LINE_GRUB_CMDLINE_TEMP="${LINE_GRUB_CMDLINE_PREFIX}${LINE_GRUB_CMDLINE_TEMP::-1}"
                    SetThisMenuEntryForMultibootSetup "KERNELS_LIST" "${THIS_IOMMU_GROUP_ID}"
                done

                if ! IsEnum "_GRUB_CUSTOM_FILE_CONTENTS"; then
                    echo -e "${_PREFIX_ERROR} Multiboot setup output is empty."
                    return 1
                fi

                return 0
            }

            function SetPreferredGRUBMenuEntryForMultibootSetup
            {
                local MENU_ENTRY_TITLE="${1}"
                local IOMMU_GROUP_ID="${2}"

                if [[ ! -z "${_PREFERRED_MENU_ENTRY_TITLE}" ]]; then
                    return 0
                fi

                if "${_EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_FIRST}" \
                    && [[ "${IOMMU_GROUP_ID}" -eq 1 ]]; then
                    _PREFERRED_MENU_ENTRY_TITLE="${MENU_ENTRY_TITLE}"

                elif "${_EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_VALUE}" \
                    && [[ "${IOMMU_GROUP_ID}" -eq "${_MULTIBOOT_PREFERRED_IOMMU_GROUP_ID}" ]]; then
                    _PREFERRED_MENU_ENTRY_TITLE="${MENU_ENTRY_TITLE}"

                elif "${_EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_LAST}" \
                    && [[ "${IOMMU_GROUP_ID}" -eq "${#_IOMMU_GROUP_ID_LIST_WITH_VGA_FOR_VFIO[-1]}" ]]; then
                    _PREFERRED_MENU_ENTRY_TITLE="${MENU_ENTRY_TITLE}"
                fi

                return 0
            }

            function SetThisMenuEntryForMultibootSetup
            {
                local -n REFERENCE="${1}"
                local IOMMU_GROUP_ID="${2}"

                for KERNEL in ${REFERENCE[@]}; do
                    # <remarks> Organize menu entry for excluded VGA group and given system kernel. </remarks>
                    local MENU_ENTRY_TITLE="$SYSTEM_DISTRO, with ${SYSTEM_OS} ${KERNEL} (VFIO, w/o IOMMU '${IOMMU_GROUP_ID}' w/ '${THIS_IOMMU_GROUP_VGA_NAME}')"
                    _MENU_ENTRY_TITLE_LIST+=( "${MENU_ENTRY_TITLE}" )
                    SetPreferredGRUBMenuEntryForMultibootSetup "${IOMMU_GROUP_ID}" "${MENU_ENTRY_TITLE}"

                    _GRUB_CUSTOM_FILE_CONTENTS+=(
                        "menuentry \"${MENU_ENTRY_TITLE}\"{"
                        # "\tload_video"
                        # "insmod gzio"
                        # "if [ x\$grub_platform = xxen ]; then insmod xzio; insmod lzopio; fi"
                        # "insmod part_gpt"
                        "\tinsmod ${SYSTEM_FSTYPE}"
                        "\tset root='/dev/disk/by-uuid/${SYSTEM_UUID}'"
                        "\t"'if [ x$feature_platform_search_hint = xy ]; then'"\n\t\t"'search --no-floppy --fs-uuid --set=root '"${SYSTEM_UUID}\n\t"'fi'
                        "\techo    'Loading ${SYSTEM_OS} ${KERNEL} ...'"
                        "\tlinux   /boot/vmlinuz-${KERNEL} root=UUID=${SYSTEM_UUID} ${LINE_GRUB_CMDLINE_TEMP}"
                        "\tinitrd  /boot/initrd.img-${KERNEL}"
                        "\techo    \"VFIO, w/o IOMMU '${IOMMU_GROUP_ID}' w/ '${THIS_IOMMU_GROUP_VGA_NAME}'\""
                        "}"
                        ""
                    )
                done

                return 0
            }

        # <summary> Update functions </summary>
            function UpdateGRUB
            {
                local OUTPUT="Updating GRUB...\t\t"
                PrintSuffixWait "${OUTPUT}"
                sudo update-grub &> /dev/null
                PrintSuffixPassOrFail "${OUTPUT}"
                return "${?}"
            }

            function UpdateInitramfs
            {
                local OUTPUT="Updating Initramfs...\t"
                PrintSuffixWait "${OUTPUT}"
                sudo update-initramfs -u -k all &> /dev/null
                PrintSuffixPassOrFail "${OUTPUT}"
                return "${?}"
            }

            function SetEntriesForGRUB
            {
                local GRUB_CUSTOM_PROXY_FILE=$( find "${_GRUB_PATH}" -name *"${_GRUB_CUSTOM_PROXY_FILENAME}" )

                if "${_EXECUTE_VFIO_SETUP_UNINSTALL}"; then
                    sed -i "s/-'/+'/g" "${GRUB_CUSTOM_PROXY_FILE}" &> /dev/null
                    return 0

                elif ! "${_EXECUTE_VFIO_SETUP_MULTIBOOT_WITH_GRUB}"; then
                    return 0

                else
                    if [[ ! -e "${GRUB_CUSTOM_PROXY_FILE}" ]]; then
                        echo -e "${_PREFIX_ERROR} Failed to find GRUB proxy file in directory '/etc/grub.d/'."
                        return 1
                    fi

                    if ! sed -i "s/-'/+'/g" "${GRUB_CUSTOM_PROXY_FILE}" &> /dev/null; then
                        echo -e "${_PREFIX_ERROR} Failed to enable entries for GRUB proxy file."
                        return 1
                    fi
                fi

                return 0
            }

        # <summary> Write output </summary>
            function WriteOutputForMultibootSetup
            {
                "${_HAS_RESTORED_DEFAULT_FILES}" || return 1
                IFS=$'\n'
                local LINE_TO_MATCH="GRUB_DEFAULT="

                if "${_EXECUTE_VFIO_SETUP_MULTIBOOT_PREFER_DEFAULT}"; then
                    local LINE_GRUB_DEFAULT="${LINE_TO_MATCH}${_DEFAULT_MENU_ENTRY_TITLE}"
                else
                    local LINE_GRUB_DEFAULT="${LINE_TO_MATCH}\"${_PREFERRED_MENU_ENTRY_TITLE}\""
                fi

                if [[ -d $( dirname "${_GRUB_CUSTOM_DEST_PATH}" ) ]] \
                    && ! sudo mkdir -p $( dirname "${_GRUB_CUSTOM_DEST_PATH}" ); then
                    echo -e "${_PREFIX_ERROR} Failed to create directory '"$( dirname "${_GRUB_CUSTOM_DEST_PATH}" )"'."
                    return 1
                fi

                if ! sed -i '/'"${LINE_TO_MATCH}"'/c\'"${LINE_GRUB_DEFAULT}" "${_GRUB_DEST_PATH_1}" \
                    || ! echo -e "\n${_GRUB_CUSTOM_FILE_CONTENTS[*]}" >> "${_GRUB_CUSTOM_DEST_PATH}" ; then
                    echo -e "${_PREFIX_ERROR} Failed to overwrite target lines of files."
                    return 1
                fi

                unset IFS
                return 0
            }

            function WriteOutputForStaticSetup
            {
                IFS=$'\n'
                "${_HAS_RESTORED_DEFAULT_FILES}" || return 1
                local LINE_TO_MATCH="GRUB_CMDLINE_LINUX_DEFAULT="
                local LINE_TO_REPLACE="${LINE_TO_MATCH}\"${_LINE_GRUB_CMDLINE_DEFAULT}\""

                if ! sed -i '/'"${LINE_TO_MATCH}"'/c\'"${LINE_TO_REPLACE}" "${_GRUB_DEST_PATH_1}" &> /dev/null; then
                    echo -e "${_PREFIX_ERROR} Failed to overwrite target lines of files."
                    return 1
                fi

                if "${_EXECUTE_VFIO_SETUP_STATIC_WITH_GRUB}"; then
                    return 0
                fi

                # <remarks> Write to new file. </remarks>
                local -i KEY=$(( "${#_INITRAMFS_LIST[@]}" - 1 ))

                while [[ "${KEY}" -ge 0 ]]; do
                    local LINE="${_INITRAMFS_LIST[${KEY}]}"

                    if ! sed -i "23i ${LINE}" "${_INITRAMFS_MODULES_DEST_PATH}"; then
                        echo -e "${_PREFIX_ERROR} Failed to overwrite target lines of files."
                        return 1
                    fi

                    (( --KEY ))
                done

                if [[ "${?}" -ne 0 ]]; then
                    echo -e "${_PREFIX_ERROR} Failed to overwrite target lines of files."
                    return 1
                fi

                # <remarks> Write to new file. </remarks>
                local -i KEY=$(( "${#_MODULES_LIST[@]}" - 1 ))

                while [[ "${KEY}" -ge 0 ]]; do
                    local LINE="${_MODULES_LIST[${KEY}]}"

                    if ! sed -i "7i ${LINE}" "${_MODPROBE_VFIO_DEST_PATH}"; then
                        echo -e "${_PREFIX_ERROR} Failed to overwrite target lines of files."
                        return 1
                    fi

                    (( --KEY ))
                done

                if [[ "${?}" -ne 0 ]]; then
                    echo -e "${_PREFIX_ERROR} Failed to overwrite target lines of files."
                    return 1
                fi

                # <remarks> Write to new files. </remarks>
                if ! sed -i "/# options vfio_pci ids=*/c\options vfio_pci_ids=\"${_HWID_DELIM}\"" "${_INITRAMFS_MODULES_DEST_PATH}" &> /dev/null \
                    || ! sed -i "/# vfio_pci ids=*/c\vfio_pci_ids=\"${_HWID_DELIM}\"" "${_INITRAMFS_MODULES_DEST_PATH}" &> /dev/null \
                    || ! echo -e "\n${_BLACKLISTS_LIST[*]}" >> "${_MODPROBE_BLACKLISTS_DEST_PATH}" &> /dev/null \
                    || ! sed -i "/# options vfio_pci ids=*/c\options vfio_pci ids=\"${_HWID_DELIM}\"" "${_MODPROBE_VFIO_DEST_PATH}" &> /dev/null \
                    || ! sed -i "/# vfio_pci ids=*/c\vfio_pci_ids=\"${_HWID_DELIM}\"" "${_MODULES_DEST_PATH}" &> /dev/null; then
                    echo -e "${_PREFIX_ERROR} Failed to overwrite target lines of files."
                    return 1
                fi

                unset IFS
                return 0
            }

# </functions>

# <main>
    SetParameters
    unset SetParameters
# </main>