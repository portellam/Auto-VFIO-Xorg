#!/bin/bash sh

#
# Filename:         vfiolib-setup
# Description:      Select VFIO setup.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source bashlib-all
    source vfiolib-extras
    source vfiolib-iommu
# </code>

# <code>
    # <summary> Backup all system configuration files. </summary>
    # <returns> the exit code </returns>
    function Backup_VFIO
    {
        # <params>
        declare -a arr_files=(
            "${str_file_multiboot_VFIO_GRUB}"
            "${str_file_static_VFIO_GRUB}"
            "${str_file_static_VFIO_initramfs_modules}"
            "${str_file_static_VFIO_modprobe_blacklists}"
            "${str_file_static_VFIO_modprobe_vfio}"
            "${str_file_static_VFIO_modules}"
        )
        # </params>

        for var_file in ${arr_files[@]}; do
            if IsFile "${var_file}"; then
                BackupFile "${var_file}" || return $?
            fi
        done

        return 0
    }

    # <summary> Save default values to GRUB. </summary>     # TODO: fix!
    # <returns> the exit code </returns>
    function Reset_GRUB
    {
        # <params>
        local str_package=""
        # </params>

        case "${str_package_manager}" in
            "apt" )
                str_package="grub-common"
                ;;
        esac

        IsString "${str_package}" || return $?
        InstallPackage "${str_package}" true || return $?
        return 0
    }

    # <summary> Remove changes to system configuration files. </summary>
    # <returns> the exit code </returns>
    function Reset_VFIO
    {
        IsArray "arr_file_template_mulitboot" || return $?
        IsFile "${str_file_multiboot_VFIO_GRUB}" &> /dev/null && OverwriteFile "arr_file_template_mulitboot" "${str_file_multiboot_VFIO_GRUB}" || return $?

        IsArray "arr_file_template_static_initramfs" || return $?
        IsFile "${str_file_static_VFIO_initramfs_modules}" &> /dev/null OverwriteFile "arr_file_template_static_initramfs" "${str_file_static_VFIO_initramfs_modules}" || return $?

        IsArray "arr_file_template_static_modprobe_blacklist" || return $?
        IsFile "${str_file_static_VFIO_modprobe_blacklists}" &> /dev/null OverwriteFile "arr_file_template_static_modprobe_blacklist" "${str_file_static_VFIO_modprobe_blacklists}" || return $?

        IsArray "arr_file_template_static_modprobe_vfio" || return $?
        IsFile "${str_file_static_VFIO_modprobe_vfio}" &> /dev/null OverwriteFile "arr_file_template_static_modprobe_vfio" "${str_file_static_VFIO_modprobe_vfio}" || return $?

        IsArray "arr_file_template_static_modules" || return $?
        IsFile "${str_file_static_VFIO_modules}" &> /dev/null OverwriteFile "arr_file_template_static_modules" "${str_file_static_VFIO_modules}" || return $?

        return 0
    }

    # <summary> Restore all system configuration files. </summary>
    # <returns> the exit code </returns>
    function Restore_VFIO
    {
        # <params>
        declare -a arr_files=(
            "${str_file_multiboot_VFIO_GRUB}"
            "${str_file_static_VFIO_GRUB}"
            "${str_file_static_VFIO_initramfs_modules}"
            "${str_file_static_VFIO_modprobe_blacklists}"
            "${str_file_static_VFIO_modprobe_vfio}"
            "${str_file_static_VFIO_modules}"
        )
        # </params>

        for var_file in ${arr_files[@]}; do
            if IsFile "${var_file}"; then
                RestoreFile "${var_file}" || return $?
            fi
        done

        return 0
    }

    # <summary>
    # Multiple GRUB menu entries for multiple VGA device (GPU) systems.
    # Choose a GRUB menu entry with a VGA device to boot from (exclude that VGA device's IOMMU Group from VFIO).
    # </summary>
    # <returns> the exit code </returns>
    function Multiboot_VFIO
    {
        # <summary> Write custom GRUB entries. </summary>
        function Multiboot_VFIO_GRUB
        {
            # <remarks> Backup existing system files. </remarks>
            if IsFile "${str_file_multiboot_VFIO_GRUB}" &> /dev/null; then
                BackupFile "${str_file1}" || return $?
            fi

            # <remarks> Get file. </remarks>
            declare -a arr_file1=( "${arr_file_template_mulitboot[@]}" )

            # <remarks> Organize new lines. </remarks>
            local str_output_temp_GRUB="${str_kernel_required_args_GRUB}${str_kernel_optional_args_GRUB}"
            declare -a arr_file1_temp=( )

            # <remarks> Parse VGA VFIO IOMMU Groups. </remarks>
            for var_IOMMU in ${arr_IOMMU_VFIOPCI_with_VGA[@]}; do
                local str_output_VFIOPCI_drivers=""
                local str_output_VFIOPCI_HWID=""

                if Multiboot_VFIO_ExcludeThis_VGA_Group "${var_IOMMU}"; then
                    for var_kernel in ${arr_kernels[@]}; do
                        local str_GRUB_line="${str_output_temp_GRUB} ${str_kernel_blacklist_GRUB}${str_output_VFIOPCI_drivers} ${str_kernel_VFIOPCI_modules}${str_output_VFIOPCI_HWID}"

                        # <remarks> Organize menu entry for excluded VGA group and given system kernel. </remarks>
                        arr_file1_temp+=(
                            "menuentry ${str_system_distro}, with ${str_system_kernel} ${var_kernel} (VFIO, w/o IOMMU ${var_IOMMU}, w/ boot VGA \"${str_device_name}\") {"
                            "\tinsmod ${str_system_filesystem_type}"
                            "\tset root='/dev/disk/by-uuid/${str_system_UUID}'"
                            "\t"'if [ x$feature_platform_search_hint = xy ]; then'"\n\t\t"'search --no-floppy --fs-uuid --set=root '"${str_system_UUID}\n\t"'fi'
                            "\techo    'Loading ${str_system_OS} ${var_kernel} ...'"
                            "\tlinux   /boot/vmlinuz-${var_kernel} root=UUID=${str_system_UUID} ${str_GRUB_line}"
                            "\tinitrd  /boot/initrd.img-${var_kernel}"
                        )
                    done
                fi
            done

            # <params>
            arr_file1+=( "${arr_file1_temp[@]}" )
            # </params>

            # <remarks> Write new lines to file. </remarks>
            IsArray "arr_file1_temp" || return $?
            IsArray "arr_file1" || return $?
            OverwriteFile "arr_file1" "${str_file_multiboot_VFIO_GRUB}" || return $?
            return 0
        }

        # <summary> Parse all VGA and non VGA IOMMU Groups, except current VGA VFIO IOMMU Group. </summary>
        # <param name="1"> int: the IOMMU group to ignore </param>
        # <param name="str_output_VFIOPCI_drivers"> string: current list of drivers </param>
        # <param name="str_output_VFIOPCI_HWID"> current list of hardware IDs </param>
        function Multiboot_VFIO_ExcludeThis_VGA_Group
        {
            IsNum $1 || return $?

            # <remarks> Parse all IOMMU groups.  </remarks>
            for int_key in ${!arr_IOMMU[@]}; do
                local var_driver="${arr_driver[$int_key]}"
                local var_HWID="${arr_HWID[$int_key]}"
                local var_IOMMU="${arr_IOMMU[$int_key]}"

                # <remarks> Add IOMMU group if it is not in the VGA list or if it does not match the given IOMMU group, and if it not in the current VFIO list. </remarks>
                if ( ! FindLineInArray "arr_IOMMU_VFIOPCI_with_VGA" "${var_IOMMU}" || [[ "${var_IOMMU} != $1" ]] ) && ! [[ "${str_output_VFIOPCI_drivers}" =~ *"${var_driver}"* ]]; then
                    str_output_VFIOPCI_drivers+="${var_driver}"
                fi

                # <remarks> Add IOMMU group if it is not in the VGA list or if it does not match the given IOMMU group, and if it not in the current VFIO list. </remarks>
                if ( ! FindLineInArray "arr_IOMMU_VFIOPCI_with_VGA" "${var_IOMMU}" || [[ "${var_IOMMU} != $1" ]] ) && ! [[ "${str_output_VFIOPCI_HWID}" =~ *"${var_HWID}"* ]]; then
                    str_output_VFIOPCI_HWID+="${var_HWID}"
                fi

                # <remarks> Append a delimiter should the current element be not the last element. </remarks>
                if IsString "${str_output_VFIOPCI_drivers}" && [[ "${var_IOMMU}" != "${arr_IOMMU[-1]}" ]]; then
                    str_output_VFIOPCI_drivers+=","
                fi

                # <remarks> Append a delimiter should the current element be not the last element. </remarks>
                if IsString "${str_output_VFIOPCI_HWID}" && [[ "${var_IOMMU}" != "${arr_IOMMU[-1]}" ]]; then
                    str_output_VFIOPCI_HWID+=","
                fi
            done

            # <remarks> Validate lists. </remarks>
            ! IsString "${str_output_VFIOPCI_drivers}" || ! IsString "${str_output_VFIOPCI_HWID}" || return $?
            return 0
        }

        function Multiboot_VFIO_Main
        {
            IsArray "arr_IOMMU_VFIOPCI_with_VGA" || return $?
            Backup_VFIO || return $?
            UninstallExisting_VFIO || return $?
            Multiboot_VFIO_GRUB || return $?
            return 0
        }

        # <params>
        local str_output="Installing Multiboot VFIO..."

            # <remarks> System configuration </remarks>
            declare -ir int_max_num_parse_kernels=3
            declare -ar arr_kernels=( $( ls -1 /boot/vmli* | cut -d 'z' -f 2 | sort -r | head -n ${int_max_num_parse_kernels} ) )
            local str_system_disk=$( df / | grep -iv 'filesystem' | cut -d '/' -f3 | cut -d ' ' -f1 )
            local str_system_distro=$( lsb_release -i -s )
            local str_system_filesystem_type=$( blkid -s TYPE | grep ${str_system_disk} | cut -d '"' -f2 )
            local str_system_kernel=$( uname -o )
            local str_system_OS=$( uname )
            local str_system_UUID=$( blkid -s UUID | grep ${str_system_disk} | cut -d '"' -f2 )
        # </params>

        # <remarks> Output statement </remarks>
        echo
        # PrintWait "${str_output}"
        Multiboot_VFIO_Main
        PrintPassOrFail "${str_output}"
        return $?
    }

    # <summary> Setup VFIO statically, with less flexibility. </summary>
    # <returns> the exit code </returns>
    function Static_VFIO
    {
        function Static_VFIO_GetParams
        {
            # <summary> Output: Hardware IDs </summary>
            # <code>
                # <remarks> Driver lists with PCI-STUB </remarks>
                for var_HWID in ${arr_HWID_PCISTUB[@]}; do
                    str_output_PCISTUB_HWID+="${var_HWID},"
                done

                IsString "${str_output_PCISTUB_HWID}" &> /dev/null && str_output_all_HWID+="${str_output_PCISTUB_HWID}"

                # <remarks> Driver lists with VFIO-PCI </remarks>
                for var_HWID in ${arr_HWID_VFIOPCI[@]}; do
                    str_output_VFIOPCI_HWID+="${var_HWID},"
                done

                IsString "${str_output_VFIOPCI_HWID}" &> /dev/null && str_output_all_HWID+="${str_output_VFIOPCI_HWID}"

                # <remarks> Driver lists with VFIO-PCI of device type of VGA </remarks>
                for var_HWID in ${arr_HWID_VFIOPCI_with_VGA[@]}; do
                    str_output_VFIOPCI_with_VGA_HWID+="${var_HWID},"
                done

                IsString "${str_output_VFIOPCI_with_VGA_HWID}" &> /dev/null && str_output_all_HWID+="${str_output_VFIOPCI_with_VGA_HWID}"

                # <remarks> Truncate last delimiter. </remarks>
                if IsString "${str_output_PCISTUB_HWID}" &> /dev/null && [[ ${str_output_PCISTUB_HWID: -1} == "," ]]; then
                    str_output_PCISTUB_HWID="${str_output_PCISTUB_HWID::-1}"
                fi

                if IsString "${str_output_VFIOPCI_HWID}" &> /dev/null && [[ ${str_output_VFIOPCI_HWID: -1} == "," ]]; then
                    str_output_VFIOPCI_HWID="${str_output_VFIOPCI_HWID::-1}"
                fi

                if IsString "${str_output_VFIOPCI_with_VGA_HWID}" &> /dev/null && [[ ${str_output_VFIOPCI_with_VGA_HWID: -1} == "," ]]; then
                    str_output_VFIOPCI_with_VGA_HWID="${str_output_VFIOPCI_with_VGA_HWID::-1}"
                fi

                if IsString "${str_output_all_HWID}" &> /dev/null && [[ ${str_output_all_HWID: -1} == "," ]]; then
                    str_output_all_HWID="${str_output_all_HWID::-1}"
                fi
            # </code>

            # <summary> Output: Drivers </summary>
            # <code>
                IsArray "arr_drivers_PCISTUB" &> /dev/null && arr_all_drivers+=( "${arr_drivers_PCISTUB[@]}" )
                IsArray "arr_drivers_VFIOPCI" &> /dev/null && arr_all_drivers+=( "${arr_drivers_VFIOPCI[@]}" )
                IsArray "arr_drivers_VFIOPCI_with_VGA" &> /dev/null && arr_all_drivers+=( "${arr_drivers_VFIOPCI_with_VGA[@]}" )

                for var_HWID in ${arr_all_drivers[@]}; do
                    str_output_all_drivers+="${var_HWID},"
                done

                # <remarks> Truncate last delimiter. </remarks>
                if IsString "${str_output_all_drivers}" &> /dev/null && [[ ${str_output_all_drivers: -1} == "," ]]; then
                    str_output_all_drivers="${str_output_all_drivers::-1}"
                fi

                # <remarks> Organize new lines. </remarks>
                for var_name_driver in ${arr_all_drivers[@]}; do
                    local str_kernel_softdep="softdep ${var_name_driver} pre: vfio-pci"

                    if IsString "${str_kernel_softdep}"; then
                        arr_all_softdep_without_driver+=(
                            "${str_kernel_softdep}"
                        )

                        arr_all_softdep_with_driver+=(
                            "${str_kernel_softdep}"
                            "${var_name_driver}"
                        )
                    fi
                done
            # </code>

            # <remarks> If any output is empty, exit. </remarks>
            if ! IsString "${str_output_all_drivers}" || ! IsString "${str_output_all_HWID}" || ! IsArray "arr_all_drivers"; then
                return $?
            fi

            # <remarks> Write to files. </remarks>
            IsString "${str_output_allocate_cpu_GRUB}" &> /dev/null && str_output_temp_GRUB+="${str_output_allocate_cpu_GRUB} "
            IsString "${str_output_hugepages_GRUB}" &> /dev/null && str_output_temp_GRUB+="${str_output_hugepages_GRUB} "
            return 0
        }

        # <summary> Write to GRUB. </summary>
        function Static_VFIO_GRUB
        {
            # <params>
            local bool_write_vfio_to_GRUB=false
            local bool_is_file_present=false
            declare -a arr_file1=( )
            # </params>

            # <remarks> Get file. </remarks>
            ReadFile "arr_file1" "${str_file_static_VFIO_GRUB}" && bool_is_file_present=true

            # <params>
            # arr_file1+=( "${arr_file_template_vfio_disclaimer[@]}" )
            local str_output_GRUB=""
            local str_output_temp_GRUB=""
            # </params>

            IsBool $1 &> /dev/null && bool_write_vfio_to_GRUB=$1

            if $bool_write_vfio_to_GRUB; then
                # <remarks> Organize new line. </remarks>
                IsString "${str_output_all_drivers}" && str_output_temp_GRUB+="${str_kernel_blacklist_GRUB}${str_output_all_drivers} "
                IsString "${str_output_PCISTUB_HWID}" && str_output_temp_GRUB+="${str_kernel_PCISTUB_GRUB}${str_output_PCISTUB_HWID} "
                IsString "${str_output_VFIOPCI_HWID}" && str_output_temp_GRUB+="${str_kernel_VFIOPCI_GRUB}${str_output_VFIOPCI_HWID} "
                # IsString "${str_output_temp_GRUB}" || return $?
            fi

            # <remarks> Write new line to file. </remarks>
            str_output_GRUB="${str_kernel_required_args_GRUB}${str_kernel_optional_args_GRUB}${str_output_temp_GRUB}"

            # <remarks> Truncate last delimiter. </remarks>
            if IsString "${str_output_GRUB}" &> /dev/null && [[ ${str_output_GRUB: -1} == " " ]]; then
                str_output_GRUB="${str_output_GRUB::-1}"
            fi

            str_output_GRUB="${str_kernel_GRUB}\"${str_output_GRUB}\""

            if $bool_is_file_present; then
                ReplaceLineInArray "arr_file1" "${str_kernel_GRUB}" "${str_output_GRUB}" || return $?               # TODO: fix this function!
            else
                arr_file1+=( "${str_output_GRUB}" )
            fi

            OverwriteFile "arr_file1" "${str_file_static_VFIO_GRUB}" || return $?
            return 0
        }

        # <summary> Write to modules. </summary>
        function Static_VFIO_ModulesInitramfs
        {
            # <params>
            declare -ar arr_file1=(
                "${arr_file_template_static_initramfs[@]}"
                "${arr_all_softdep_with_driver[@]}"
                "#"
                "${str_kernel_VFIOPCI_modules}${str_output_all_HWID}"
                "${str_kernel_VFIOPCI_initramfs_modules}${str_output_all_HWID}"
                "${str_name_VFIOPCI_driver}"
            )

            declare -ar arr_file2=(
                "${arr_file_template_static_modules[@]}"
                "${str_kernel_VFIOPCI_modules}${str_output_all_HWID}"
            )
            # </params>

            # <remarks> Write new line to file. </remarks>
            OverwriteFile "arr_file1" "${str_file_static_VFIO_initramfs_modules}" || return $?
            OverwriteFile "arr_file2" "${str_file_static_VFIO_modules}" || return $?
            return 0
        }

        # <summary> Write to modprobe. </summary>
        function Static_VFIO_Modprobe
        {
            # <summary> Modprobe: blacklists </summary>
                # <params>
                    # <remarks> Organize new lines. </remarks>
                    declare -a arr_file1=( "${arr_file_template_static_modprobe_blacklist[@]}" )

                    # <remarks> Set new lines. </remarks>
                    for var_name_driver in ${arr_all_drivers[@]}; do
                        arr_file1+=( "${str_kernel_blacklist_modprobe}${var_name_driver}" )
                    done
                # </params>

                # <remarks> Write new lines to file. </remarks>
                OverwriteFile "arr_file1" "${str_file_static_VFIO_modprobe_blacklists}" || return $?

            # <summary> Modprobe: conf </summary>
                # <params>
                    # <remarks> Organize new lines. </remarks>
                    declare -ar arr_file2=(
                        "${arr_file_template_static_modprobe_vfio[@]}"
                        "#"
                        "${arr_all_softdep_without_driver[@]}"
                        "#"
                        "${str_kernel_VFIOPCI_initramfs_modules}${str_output_all_HWID}"
                    )
                # </params>

                # <remarks> Write new lines to file. </remarks>
                OverwriteFile "arr_file2" "${str_file_static_VFIO_modprobe_vfio}" || return $?

            return 0
        }

        # <summary> Write to all system configuration files that are not GRUB. </summary>
        function Static_VFIO_Sysfiles
        {
            Static_VFIO_ModulesInitramfs || return $?
            Static_VFIO_Modprobe || return $?
            Static_VFIO_GRUB false || return $?
            return 0
        }

        function Static_VFIO_Main
        {
            # Backup_VFIO || return $?
            # UninstallExisting_VFIO || return $?

            # <params>
            declare -a arr_all_drivers=( )
            declare -a arr_all_softdep_without_driver=( )
            declare -a arr_all_softdep_with_driver=( )
            local bool_do_not_read_input=false
            local str_output_all_drivers=""
            local str_output_VFIOPCI_HWID=""
            local str_output_PCISTUB_HWID=""
            local str_output_VFIOPCI_with_VGA_HWID=""
            local str_output_all_HWID=""
            local str_output_temp_GRUB=""
            # </params>

            Static_VFIO_GetParams || return $?

            if IsBool $1 &> /dev/null; then
                bool_do_not_read_input=$1
            fi

            if $bool_do_not_read_input && $bool_static_vfio_grub; then
                Static_VFIO_GRUB || return $?
                return 0
            fi

            if $bool_do_not_read_input && $bool_static_vfio_file; then
                Static_VFIO_Sysfiles || return $?
                return 0
            fi

            if ReadInput "Append output to GRUB only (or with system files)?"; then
                Static_VFIO_GRUB true || Static_VFIO_Sysfiles || return $?
            else
                Static_VFIO_Sysfiles || Static_VFIO_GRUB true || return $?
            fi

            return 0
        }

        # <params>
        local str_output="Installing Static VFIO..."
        # </params>

        echo
        # PrintWait "${str_output}"
        Static_VFIO_Main $1
        PrintPassOrFail "${str_output}" || return $?
        return $?
    }

    # <summary> Select a VFIO setup. </summary>
    # <returns> the exit code </returns>
    function Setup_VFIO
    {
        if ! $bool_multiboot_vfio && ! $bool_static_vfio && ! $bool_uninstall_vfio; then
            echo
            local var_choice=""
            ReadMultipleChoiceIgnoreCase "Setup VFIO? ${var_green} Multiboot / Static / Uninstall ${var_reset_color}" "var_choice" "M" "S" "U"

            case "${var_choice}" in
                "M" )
                    bool_multiboot_vfio=true
                    ;;

                "S" )
                    bool_static_vfio=true
                    ;;

                "U" )
                    bool_uninstall_vfio=true
                    ;;
            esac
        fi

        case true in
            $bool_multiboot_vfio )
                # Multiboot_VFIO || Restore_VFIO || return $?
                Multiboot_VFIO || return $?
                ;;

            $bool_static_vfio )
                # Static_VFIO $1  || Restore_VFIO || return $?
                Static_VFIO $1 || return $?
                ;;

            $bool_uninstall_vfio )
                UninstallExisting_VFIO || return $?
                ;;
        esac

        Update_VFIO || return $?
        return 0
    }

    # <summary> Delete changes from system configuration files. </summary>
    # <returns> the exit code </returns>
    function UninstallExisting_VFIO
    {
        function UninstallExisting_VFIO_Main
        {
            Reset_VFIO || return $?
            # Reset_GRUB || return $?
            return 0
        }

        # <params>
        local str_output="Uninstalling VFIO setup..."
        # </params>

        # PrintWait "${str_output}"
        UninstallExisting_VFIO_Main
        PrintPassOrFail "${str_output}"
        return $?
    }

    # <summary> Update system configuration. </summary>
    # <returns> the exit code </returns>
    function Update_VFIO
    {
        function Update_VFIO_Main
        {
            eval "${var_exec_update_GRUB}" && eval "${var_exec_update_initramfs}" || return 1
            return 0
        }

        # <params>
        local str_output="Updating system config..."
        # </params>

        # PrintWait "${str_output}"
        Update_VFIO_Main
        PrintPassOrFail "${str_output}" || return $?
        return 0
    }
# </code>

# <params>
    # <remarks> File names and paths </remarks>
    declare -g str_dir_static_VFIO_modprobe="/etc/modprobe.d/"
    declare -g str_file_multiboot_VFIO_GRUB="/etc/grub.d/proxifiedScripts/custom"
    declare -g str_file_static_VFIO_GRUB="/etc/default/grub"
    declare -g str_file_static_VFIO_initramfs_modules="/etc/initramfs-tools/modules"
    declare -g str_file_static_VFIO_modules="/etc/modules"

    # <remarks> Debug: File names and paths </remarks>
    # declare -g str_dir_static_VFIO_modprobe="etc_modprobe.d_"
    # declare -g str_file_multiboot_VFIO_GRUB="etc_grub.d_proxifiedScripts_custom"
    # declare -g str_file_static_VFIO_GRUB="etc_default_grub"
    # declare -g str_file_static_VFIO_initramfs_modules="etc_initramfs-tools_modules"
    # declare -g str_file_static_VFIO_modules="etc_modules"

    # <remarks> Dependent file names </remarks>
    declare -g str_file_static_VFIO_modprobe_blacklists="${str_dir_static_VFIO_modprobe}pci-blacklists.conf"
    declare -g str_file_static_VFIO_modprobe_vfio="${str_dir_static_VFIO_modprobe}vfio.conf"

    # <remarks> Commands </remarks>
    declare -g var_exec_update_GRUB='update-grub'
    declare -g var_exec_update_initramfs='update-initramfs -u -k all'

    # <remarks> GRUB templates </remarks>
    declare -g str_kernel_GRUB="GRUB_CMDLINE_LINUX_DEFAULT="
    declare -g str_kernel_optional_args_GRUB="video=efifb:off,vesafb:off acpi=force apm=power_off rd.driver.pre=vfio-pci pcie_aspm=off kvm.ignore_msrs=1 "
    declare -g str_kernel_required_args_GRUB="iommu=1,pt amd_iommu=on intel_iommu=on "

    # <remarks> VFIO command lines </remarks>
    declare -g str_kernel_blacklist_GRUB="modprobe.blacklist="
    declare -g str_kernel_blacklist_modprobe="blacklist "
    declare -g str_kernel_PCISTUB_GRUB="pci-stub.ids="
    declare -g str_kernel_VFIOPCI_GRUB="vfio_pci.ids="
    declare -g str_kernel_VFIOPCI_modules="vfio_pci ids="
    declare -g str_name_VFIOPCI_driver="vfio-pci"
    declare -g str_kernel_VFIOPCI_initramfs_modules="options ${str_kernel_VFIOPCI_modules}"

    # <remarks> File templates. Dependencies: VFIO command lines. </remarks>
    declare -ag arr_file_template_mulitboot=(
        # "${arr_file_template_vfio_disclaimer[@]}"
        # "#"
        "#!/bin/sh"
        "exec tail -n +3 \$0"
        "# This file provides an easy way to add custom menu entries.  Simply type the"
        "# menu entries you want to add after this comment.  Be careful not to change"
        "# the 'exec tail' line above."
    )

    declare -ag arr_file_template_static_initramfs=(
        # "${arr_file_template_vfio_disclaimer[@]}"
        # "#"
        "# List of modules that you want to include in your initramfs."
        "# They will be loaded at boot time in the order below."
        "#"
        "# Syntax:  module_name [args ...]"
        "#"
        "# Examples:"
        "#"
        "# raid1"
        "# sd_mod"
        "#"
        "# NOTE: Do not change the following lines, unless you know what you are doing!"
        "vfio"
        "vfio_iommu_type1"
        "vfio_virqfd"
        "#"
        "# Module dependencies:"
        "#   softdep 'DRIVER_NAME' pre: ${str_name_VFIOPCI_driver}"
        "#"
        "# Hardware IDs:"
        "#   ${str_kernel_VFIOPCI_initramfs_modules}"
        "#   ${str_kernel_VFIOPCI_modules}"
        "#   vfio"
        "#"
    )

    declare -ag arr_file_template_static_modprobe_blacklist=(
        # "${arr_file_template_vfio_disclaimer[@]}"
        # "#"
        "# Kernel module blacklist:"
        "#   blacklist 'DRIVER_NAME'"
        "#"
    )

    declare -ag arr_file_template_static_modprobe_vfio=(
        # "${arr_file_template_vfio_disclaimer[@]}"
        # "#"
        "# Module dependencies:"
        "#   softdep 'DRIVER_NAME' pre: ${str_name_VFIOPCI_driver}"
        "#"
        "# Hardware IDs:"
        "#   ${str_kernel_VFIOPCI_initramfs_modules}"
        "#"
    )

    declare -ag arr_file_template_static_modules=(
        # "${arr_file_template_vfio_disclaimer[@]}"
        # "#"
        "# /etc/modules: kernel modules to load at boot time."
        "#"
        "# This file contains the names of kernel modules that should be loaded"
        "# at boot time, one per line. Lines beginning with \"#\" are ignored."
        "#"
        "# NOTE: Do not change the following lines, unless you know what you are doing!"
        "vfio"
        "vfio_iommu_type1"
        "${str_name_VFIOPCI_driver}"
        "vfio_virqfd"
        "kvm"
        "kvm_intel"
        "apm power_off=1"
        "#"
        "# Hardware IDs:"
        "#   ${str_kernel_VFIOPCI_modules}"
        "#"
    )
# </params>