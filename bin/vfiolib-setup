#!/bin/bash sh

#
# Filename:         vfiolib-setup
# Description:      Select VFIO setup.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source bashlib-all
    source vfiolib-extras
    source vfiolib-iommu
# </code>

# <code>
    # <summary> Save default values to GRUB. </summary>
    function Reset_GRUB
    {
        # <params>
        # local str_file1="/etc/default/grub"
        local str_file1="etc_default_grub"         # NOTE: for debug.
        # <params>

        # <remarks> Backup existing system files. </remarks>
        if IsFile "${str_file1}" &> /dev/null; then
            BackupFile "${str_file1}" || DeleteFile "${str_file1}" || return $?
        fi

        # <remarks> Get file. </remarks>
        declare -a arr_file1=( "${arr_vfio_disclaimer[@]}" )
        # ReadFile "arr_file1" "${str_file1}" || return $?

        # <params>
        local str_GRUB_temp="${str_GRUB_required}${str_GRUB_default}"
        # </params>

        # <remarks> Write new line to file. </remarks>
        IsString "${str_GRUB_temp}" &> /dev/null || return $?
        str_GRUB_temp+="\"${str_GRUB_temp}\""
        ReplaceLineInArray "arr_file1" "${str_GRUB_template}" "${str_GRUB_temp}"
        OverwriteFile "arr_file1" "${str_file1}" || return $?
        return 0
    }

    # <summary> Multiple GRUB menu entries for multiple VGA device (GPU) systems. Choose a GRUB menu entry with a VGA device to boot from (exclude that VGA device's IOMMU Group from VFIO). </summary>
    function Multiboot_VFIO
    {
        # <summary> Write custom GRUB entries. </summary>
        function Multiboot_VFIO_GRUB
        {
            # <params>
            # local str_file1="/etc/grub.d/proxifiedScripts/custom"
            local str_file1="etc_grub.d_proxifiedScripts_custom"   # NOTE: for debug.
            # <params>

            # <remarks> Backup existing system files. </remarks>
            if IsFile "${str_file1}" &> /dev/null; then
                BackupFile "${str_file1}" || return $?
            fi

            # <remarks> Get file. </remarks>
            declare -a arr_file1=( "${arr_mulitboot_file_template[@]}" )

            # <remarks> Organize new lines. </remarks>
            local str_GRUB_temp="${str_GRUB_required}${str_GRUB_default}"
            declare -a arr_file1_temp=()

            # <remarks> Parse VGA VFIO IOMMU Groups. </remarks>
            for var_IOMMU in "${arr_IOMMU_VFIO_PCI_with_VGA[@]}"; do
                local str_multiboot_drivers=""
                local str_multiboot_hardware_ID=""

                if Multiboot_VFIO_ExcludeThis_VGA_Group "${var_IOMMU}"; then
                    for var_kernel in "${arr_kernels[@]}"; do
                        local str_GRUB_line="${str_GRUB_temp} ${str_GRUB_blacklist}${str_multiboot_drivers} ${str_modules_VFIO_PCI}${str_multiboot_hardware_ID}"

                        # <remarks> Organize menu entry for excluded VGA group and given system kernel. </remarks>
                        arr_file1_temp+=(
                            "menuentry ${str_system_distro}, with ${str_system_kernel} ${var_kernel} (VFIO, w/o IOMMU ${var_IOMMU}, w/ boot VGA \"${str_device_name}\") {"
                            "\tinsmod ${str_system_filesystem_type}"
                            "\tset root='/dev/disk/by-uuid/${str_system_UUID}'"
                            "\t"'if [ x$feature_platform_search_hint = xy ]; then'"\n\t\t"'search --no-floppy --fs-uuid --set=root '"${str_system_UUID}\n\t"'fi'
                            "\techo    'Loading ${str_system_OS} ${var_kernel} ...'"
                            "\tlinux   /boot/vmlinuz-${var_kernel} root=UUID=${str_system_UUID} ${str_GRUB_line}"
                            "\tinitrd  /boot/initrd.img-${var_kernel}"
                        )
                    done
                fi
            done

            # <params>
            arr_file1+=( "${arr_file1_temp[@]}" )
            # </params>

            # <remarks> Write new lines to file. </remarks>
            IsArray "arr_file1_temp" || return $?
            IsArray "arr_file1" || return $?
            OverwriteFile "arr_file1" "${str_file1}" || return $?
            return 0
        }

        # <summary> Parse all VGA and non VGA IOMMU Groups, except current VGA VFIO IOMMU Group. </summary>
        # <param name="1"> int: the IOMMU group to ignore </param>
        # <param name="str_multiboot_drivers"> string: current list of drivers </param>
        # <param name="str_multiboot_hardware_ID"> current list of hardware IDs </param>
        function Multiboot_VFIO_ExcludeThis_VGA_Group
        {
            IsNum $1 &> /dev/null || return $?
            IsArray "arr_IOMMU_VFIO_PCI_with_VGA" &> /dev/null || return 1

            # <remarks> Parse all IOMMU groups.  </remarks>
            for int_key in "${!arr_IOMMU[@]}"; do
                local str_driver="${arr_driver[$int_key]}"
                local str_hardware_ID="${arr_hardware_ID[$int_key]}"
                local str_IOMMU="${arr_IOMMU[$int_key]}"

                # <remarks> Add IOMMU group if it is not in the VGA list or if it does not match the given IOMMU group, and if it not in the current VFIO list. </remarks>
                if ( ! FindLineInArray "arr_IOMMU_VFIO_PCI_with_VGA" "${str_IOMMU}" || [[ "${str_IOMMU} != $1" ]] ) && ! [[ "${str_multiboot_drivers}" =~ *"${str_driver}"* ]]; then
                    str_multiboot_drivers+="${str_driver}"
                fi

                # <remarks> Add IOMMU group if it is not in the VGA list or if it does not match the given IOMMU group, and if it not in the current VFIO list. </remarks>
                if ( ! FindLineInArray "arr_IOMMU_VFIO_PCI_with_VGA" "${str_IOMMU}" || [[ "${str_IOMMU} != $1" ]] ) && ! [[ "${str_multiboot_hardware_ID}" =~ *"${str_hardware_ID}"* ]]; then
                    str_multiboot_hardware_ID+="${str_hardware_ID}"
                fi

                # <remarks> Append a delimiter should the current element be not the last element. </remarks>
                if IsString "${str_multiboot_drivers}" &> /dev/null && [[ "${str_IOMMU}" != "${arr_IOMMU[-1]}" ]]; then
                    str_multiboot_drivers+=","
                fi

                # <remarks> Append a delimiter should the current element be not the last element. </remarks>
                if IsString "${str_multiboot_hardware_ID}" &> /dev/null && [[ "${str_IOMMU}" != "${arr_IOMMU[-1]}" ]]; then
                    str_multiboot_hardware_ID+=","
                fi
            done

            # <remarks> Validate lists. </remarks>
            if ! IsString "${str_multiboot_drivers}" &> /dev/null || ! IsString "${str_multiboot_hardware_ID}" &> /dev/null; then
                return $?
            fi

            return 0
        }

        # <params>
        str_output="Installing Multiboot VFIO..."

            # <remarks> System configuration </remarks>
            declare -ir int_max_num_parse_kernels=3
            declare -ar arr_kernels=( $( ls -1 /boot/vmli* | cut -d 'z' -f 2 | sort -r | head -n ${int_max_num_parse_kernels} ) )
            local str_system_disk=$( df / | grep -iv 'filesystem' | cut -d '/' -f3 | cut -d ' ' -f1 )
            local str_system_distro=$( lsb_release -i -s )
            local str_system_filesystem_type=$( blkid -s TYPE | grep ${str_system_disk} | cut -d '"' -f2 )
            local str_system_kernel=$( uname -o )
            local str_system_OS=$( uname )
            local str_system_UUID=$( blkid -s UUID | grep ${str_system_disk} | cut -d '"' -f2 )
        # </params>

        echo
        PrintWait "${str_output}"

        # <remarks> Write to files. </remarks>
        Reset_GRUB &> /dev/null || return $?
        Multiboot_VFIO_GRUB &> /dev/null || return $?

        # <remarks> Update system configuration </remarks>
        eval "${var_update_grub}" || return 1
        return 0
    }

    # <summary> Setup VFIO statically, with less flexibility. </summary>
    function Static_VFIO
    {
        # <summary> Write to GRUB. </summary>
        function Static_VFIO_GRUB
        {
            # <params>
            declare -a arr_file1=( "${arr_vfio_disclaimer[@]}" )
            # </params>

            # <remarks> Get file. </remarks>
            ReadFile "arr_file1" "${str_file1}" || return $?

            # <params>
            local str_GRUB_temp=""
            # </params>

            # <remarks> Organize new line. </remarks>
            IsString "${str_GRUB_Allocate_CPU}" &> /dev/null && str_GRUB_temp+="${str_GRUB_Allocate_CPU}"
            IsString "${str_GRUB_hugepages}" &> /dev/null && str_GRUB_temp+=" ${str_GRUB_hugepages}"

            if IsString "${str_driver_list_VFIO}" &> /dev/null; then
                str_GRUB_temp+=" ${str_GRUB_blacklist}${str_driver_list_VFIO}"
            fi

            if IsString "${str_HWID_list_STUB}" &> /dev/null; then
                str_GRUB_temp+=" ${str_GRUB_PCI_STUB}${str_HWID_list_STUB}"
            fi

            if IsString "${str_HWID_list_VFIO}" &> /dev/null; then
                str_GRUB_temp+=" ${str_GRUB_VFIO_PCI}${str_HWID_list_VFIO}"
            fi

            # <params>
            # local str_file1="/etc/default/grub"
            local str_file1="grub"
            # </params>

            # <remarks> Backup existing system files. </remarks>
            BackupFile "${str_file1}"

            # <remarks> Write new line to file. </remarks>
                IsString "${str_GRUB_temp}" &> /dev/null || return $?
                str_GRUB_temp+="${str_GRUB_template}\"${str_GRUB_required}${str_GRUB_default}${str_GRUB_temp}\""
                ReplaceLineInArray "arr_file1" "${str_GRUB}" "${str_GRUB_temp}" || return $?
                OverwriteFile "arr_file1" "${str_file1}" || return $?
            return 0
        }

        # <summary> Write to Modules. </summary>
        function Static_VFIO_ModulesInitramfs
        {
            # <params>
            declare -a arr_softdep=()
            # </params>

            # <remarks> Organize new lines. </remarks>
            for var_driver in "${arr_drivers_VFIO_PCI[@]}"; do
                arr_softdep+=(
                    $( eval "${var_get_softdep}" )
                    "${var_driver}"
                )
            done

            if IsString "${str_HWID_list_STUB}" &> /dev/null; then
                str_new_line_VFIO_temp+="${str_HWID_list_STUB}"
            fi

            # <params>
            local str_new_line_VFIO_temp=""
            # </params>

            if [[ "${#str_new_line_VFIO_temp[@]}" == *","* ]] && IsString "${str_HWID_list_VFIO}" &> /dev/null; then
                str_new_line_VFIO_temp+=",${str_HWID_list_VFIO}"
            fi

            # <params>
            declare -ar arr_initramfs_HWID=(
                "vfio"
                "vfio_iommu_type1"
                "vfio_virqfd"
                "#"
                "${arr_softdep[@]}"
                "#"
                "${str_modules_VFIO_PCI}${str_new_line_VFIO_temp}"
                "${str_initramfs_modules_VFIO_PCI}${str_new_line_VFIO_temp}"
                "${str_VFIO_PCI_driver}"
            )

            declare -ar arr_modules_HWID=(
                "vfio"
                "vfio_iommu_type1"
                "vfio_pci"
                "vfio_virqfd"
                "kvm"
                "kvm_intel"
                "apm power_off=1"
                "#"
                "${str_modules_VFIO_PCI}${str_new_line_VFIO_temp}"
            )

                # <remarks> Set new lines. </remarks>
                declare -ar arr_file1+=(
                    "${arr_static_initramfs_file_template[@]}"
                    "${arr_initramfs_HWID[@]}"
                )

                declare -ar arr_file2+=(
                    "${arr_static_modules_file_template[@]}"
                    "${arr_modules_HWID[@]}"
                )

            # local str_file1="/etc/initramfs-tools/modules"   # NOTE: for debug.
            # local str_file2="/etc/modules"                   # NOTE: for debug.
            local str_file1="initramfs-tools_modules"
            local str_file2="modules"
            # </params>

            # <remarks> Backup existing system files. </remarks>
            BackupFile "${str_file1}"
            BackupFile "${str_file2}"

            # <remarks> Write new line to file. </remarks>
            OverwriteFile "arr_file1" "${str_file1}" || return $?
            OverwriteFile "arr_file2" "${str_file2}" || return $?
            return 0
        }

        # <summary> Write to Modprobe. </summary>
        function Static_VFIO_Modprobe
        {
            # <summary> Modprobe: blacklists </summary>
                # <params>
                local str_file1="pci-blacklists.conf"

                    # <remarks> Organize new lines. </remarks>
                    declare -a arr_file1=( "${arr_static_modprobe_blacklist_file_template[@]}" )

                    # <remarks> Set new lines. </remarks>
                    for var_driver in "${arr_drivers_VFIO_PCI[@]}"; do
                        arr_file1+=( "${str_modprobe_blacklist}${var_driver}" )
                    done

                arr_file1
                # </params>

                # <remarks> Backup existing system files. </remarks>
                # BackupFile "${str_file1}"

                # <remarks> Write new lines to file. </remarks>
                OverwriteFile "arr_file1" "${str_file1}" || return $?

            # <summary> Modprobe: conf </summary>
                # <params>
                local str_file2="vfio.conf"

                    # <remarks> Organize new lines. </remarks>
                    declare -ar arr_file2=(
                        "${arr_static_modprobe_vfio_file_template[@]}"
                        "${arr_softdep[@]}"
                        "${str_initramfs_modules_VFIO_PCI}${str_new_line_VFIO_temp}"
                    )
                # </params>

                # <remarks> Backup existing system files. </remarks>
                # BackupFile "${str_file2}"

                # <remarks> Write new lines to file. </remarks>
                OverwriteFile "arr_file2" "${str_file2}" || return $?

            return 0
        }

        # <params>
        str_output="Installing Static VFIO..."
        local var_get_softdep='softdep ${str_driver} pre: vfio-pci'
        # </params>

        echo
        PrintWait "${str_output}"

        # <remarks> Write to files. </remarks>
        if ! Static_VFIO_GRUB &> /dev/null; then
            Reset_GRUB &> /dev/null || return $?
            Static_VFIO_ModulesInitramfs &> /dev/null || return $?
            Static_VFIO_Modprobe &> /dev/null || return $?
        fi

        # <remarks> Update system configuration </remarks>
        eval "${var_update_grub}" && eval "${var_update_initramfs}" || return 1
        return 0
    }

    # <summary> Select a VFIO setup. </summary>
    function Setup_VFIO
    {
        echo
        ReadMultipleChoiceIgnoreCase "Setup VFIO? ${var_green}None / Multiboot / Static${var_reset_color}" "N" "M" "S"

        case "${var_input}" in
            "M" )
                Multiboot_VFIO
                return "${int_exit_code}"
                ;;

            "S" )
                Static_VFIO
                return "${int_exit_code}"
                ;;
        esac

        return "${int_code_skipped_operation}"
    }

    # # <summary> ??? </summary>
    # function UninstallExisting_VFIO
    # {
    #     return 0
    # }
# </code>

# <params>
    # <remarks> Commands </remarks>
    declare -g var_update_grub='update-grub'
    declare -g var_update_initramfs='update-initramfs -u -k all'

    # <remarks> GRUB templates </remarks>
    declare -g str_GRUB_template="GRUB_CMDLINE_LINUX_DEFAULT="
    declare -g str_GRUB_required="iommu=1,pt amd_iommu=on intel_iommu=on "
    declare -g str_GRUB_default="video=efifb:off,vesafb:off acpi=force apm=power_off rd.driver.pre=vfio-pci pcie_aspm=off kvm.ignore_msrs=1 "

    # <remarks> VFIO command lines </remarks>
    declare -g str_driver_VFIO_PCI="vfio-pci"
    declare -g str_GRUB_blacklist="modprobe.blacklist="
    declare -g str_GRUB_PCI_STUB="pci-stub.ids="
    declare -g str_GRUB_VFIO_PCI="vfio_pci.ids="
    declare -g str_modprobe_blacklist="blacklist "
    declare -g str_modules_VFIO_PCI="vfio_pci ids="
    declare -g str_initramfs_modules_VFIO_PCI="options ${str_modules_VFIO_PCI}"
    declare -g str_VFIO_PCI_driver="vfio-pci"

    # <remarks> File templates. Dependencies: VFIO command lines. </remarks>
    declare -ag arr_mulitboot_file_template=(
        "${arr_file_disclaimer[@]}"
        "#!/bin/sh"
        "exec tail -n +3 \$0"
        "# This file provides an easy way to add custom menu entries.  Simply type the"
        "# menu entries you want to add after this comment.  Be careful not to change"
        "# the 'exec tail' line above."
    )

    declare -ag arr_static_initramfs_file_template=(
        "${arr_vfio_disclaimer[@]}"
        "# List of modules that you want to include in your initramfs."
        "# They will be loaded at boot time in the order below."
        "#"
        "# Syntax:  module_name [args ...]"
        "#"
        "# Examples:"
        "#"
        "# raid1"
        "# sd_mod"
        "#"
        "# NOTE: Do not change the following lines, unless you know what you are doing!"
        "vfio"
        "vfio_iommu_type1"
        "vfio_virqfd"
        "#"
        "# Soft dependencies:    (NOTE: repeat for each driver)"
        "#   softdep 'DRIVER_NAME' pre: ${str_VFIO_PCI_driver}"
        "#"
        "# GRUB command line and PCI hardware IDs:"
        "#   ${str_initramfs_modules_VFIO_PCI}"
        "#   ${str_modules_VFIO_PCI}"
        "#   vfio"
        "#"
    )

    declare -ag arr_static_modprobe_blacklist_file_template=(
        "${arr_vfio_disclaimer[@]}"
        "# Kernel module blacklist:"
        "#   blacklist 'DRIVER_NAME'"
        "#"
    )

    declare -ag arr_static_modprobe_vfio_file_template=(
        "${arr_vfio_disclaimer[@]}"
        "# Soft dependencies:    (NOTE: repeat for each driver)"
        "#   softdep 'DRIVER_NAME' pre: ${str_VFIO_PCI_driver}"
        "#"
        "# GRUB command line and PCI hardware IDs:"
        "#   ${str_initramfs_modules_VFIO_PCI}"
        "#"
    )

    declare -ag arr_static_modules_file_template=(
        "${arr_vfio_disclaimer[@]}"
        "#"
        "# /etc/modules: kernel modules to load at boot time."
        "#"
        "# This file contains the names of kernel modules that should be loaded"
        "# at boot time, one per line. Lines beginning with \"#\" are ignored."
        "#"
        "# NOTE: Do not change the following lines, unless you know what you are doing!"
        "vfio"
        "vfio_iommu_type1"
        "${str_VFIO_PCI_driver}"
        "vfio_virqfd"
        "kvm"
        "kvm_intel"
        "apm power_off=1"
        "#"
        "# PCI hardware IDs:"
        "#   ${str_modules_VFIO_PCI}"
        "#"
    )
# </params>