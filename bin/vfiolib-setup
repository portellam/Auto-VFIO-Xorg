#!/bin/bash sh

#
# Filename:         vfiolib-setup
# Description:      Select VFIO setup.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source vfiolib-files
    source vfiolib-extras
    source vfiolib-parse
    source vfiolib-select
    source vfiolib-usage
# </code>

# <code>
    function AskToSpecifyStaticSetup
    {
        for _TRIES_COUNT in $( seq 0 2 ); do
            read -r -p "Write output to system configuration files (and not GRUB)? [Y/n]: " _ANSWER

            case "$_ANSWER" in
                [Yy]* )
                    _EXECUTE_GRUB_STATIC_SETUP=false
                    return 0 ;;

                [Nn]* )
                    _EXECUTE_GRUB_STATIC_SETUP=true
                    return 0 ;;

                * )
                    echo "Please answer \"Y\" or \"N\"." ;;
            esac
        done

        echo -e "$_PREFIX_ERROR Failed to answer."
        return 1
    }

    function ExcludeGivenVGAIOMMUGroup
    {
        if ! [[ $1 =~ ^[0-9]+$ ]]; then
            return 1
        fi

        # <remarks> Parse all IOMMU groups.  </remarks>
        for _KEY in ${!_IOMMU_LIST[@]}; do
            local _DRIVER="${_DRIVER_LIST[$_KEY]}"
            local _HWID="${_HWID_LIST[$_KEY]}"
            local _IOMMU="${_IOMMU_LIST[$_KEY]}"
            local _VGA_VFIOPCI_HAS_IOMMU=false

            for _VGA_VFIOPCI_IOMMU in ${_VGA_VFIOPCI_IOMMU_LIST[@]}; do
                if [[ "$_VGA_VFIOPCI_IOMMU" == "$_IOMMU" ]]; then
                    _VGA_VFIOPCI_HAS_IOMMU=true
                    break
                fi
            done

            # <remarks> Add IOMMU group if it is not in the VGA list or if it does not match the given IOMMU group, and if it is not in the current VFIO list. </remarks>
            if ( ! $_VGA_VFIOPCI_HAS_IOMMU || [[ "$_IOMMU" != "$1" ]] ) && ! [[ "$_VGA_DRIVER_DELIM" =~ *"$_DRIVER"* ]]; then
                _VGA_DRIVER_DELIM+="$_DRIVER"
            fi

            # <remarks> Add IOMMU group if it is not in the VGA list or if it does not match the given IOMMU group, and if it is not in the current VFIO list. </remarks>
            if ( ! $_VGA_VFIOPCI_HAS_IOMMU || [[ "$_IOMMU" != "$1" ]] ) && ! [[ "$_VGA_HWID_DELIM" =~ *"$_HWID"* ]]; then
                _VGA_HWID_DELIM+="$_HWID"
            fi

            # <remarks> Append a delimiter, should the current element be not the last element. </remarks>
            if [[ "$_VGA_DRIVER_DELIM" != "" ]] && [[ "$_IOMMU" != "${_IOMMU_LIST[-1]}" ]]; then
                _VGA_DRIVER_DELIM+=","
            fi

            # <remarks> Append a delimiter, should the current element be not the last element. </remarks>
            if [[ "$_VGA_HWID_DELIM" != "" ]] && [[ "$_IOMMU" != "${_IOMMU_LIST[-1]}" ]]; then
                _VGA_HWID_DELIM+=","
            fi
        done

        # <remarks> Validate lists. </remarks>
        if ! [[ "$_VGA_DRIVER_DELIM" != "$1" ]] || ! [[ "$_VGA_HWID_DELIM" != "$1" ]]; then
            return 1
        fi

        return 0
    }

    function ExecuteMultibootSetup
    {
        if ! "$_HAS_EXECUTED_BACKUPS" \
            || ! GetParamsForSetup \
            || ! SetParamsForMultibootSetup \
            || ! WriteFilesForMultibootSetup \
            || ! ExecuteUpdateAfterSetup; then
            echo -e "$_PREFIX_ERROR Multiboot setup has failed."
            return 1
        fi

        return 0
    }

    function ExecuteStaticSetup
    {
        local -r _PRINT_FAIL="$_PREFIX_ERROR Static setup has failed."

        if ! DoesVGAListNotContainAllVGAGroups; then
            echo -e "$_PRINT_FAIL"
            return 1
        fi

        if "$_ASK_TO_SELECT_TYPE_OF_STATIC_SETUP"; then
            AskToSpecifyStaticSetup || return 1
        fi

        if "$_EXECUTE_GRUB_STATIC_SETUP" \
            && ( ! "$_HAS_EXECUTED_BACKUPS" \
            || ! GetParamsForSetup \
            || ! SetParamsForGRUBStaticSetup \
            || ! WriteFilesForGRUBStaticSetup \
            || ! ExecuteUpdateAfterSetup ); then
            echo -e "$_PRINT_FAIL"
            return 1
        fi

        if ! "$_EXECUTE_GRUB_STATIC_SETUP" \
            && ( ! "$_HAS_EXECUTED_BACKUPS" \
            || ! GetParamsForSetup \
            || ! SetParamsForNoGRUBStaticSetup \
            || ! WriteFilesForNoGRUBStaticSetup \
            || ! ExecuteUpdateAfterSetup ); then
            echo -e "$_PRINT_FAIL"
            return 1
        fi

        return 0
    }

    function ExecuteUninstallSetup
    {
        if ! "$_HAS_EXECUTED_BACKUPS" \
            || ! ExecuteUpdateAfterSetup; then
            echo -e "$_PREFIX_ERROR Uninstall has failed."
        fi

        return 0
    }

    function ExecuteUpdateAfterSetup
    {
        if ! sudo update-grub \
            || ! sudo update-initramfs -u -k all; then
            echo -e "$_PREFIX_ERROR Failed to update system configuration."
            return 1
        fi

        return 0
    }

    function GetParamsForSetup
    {
        if [[ "${#_DRIVER_LIST_VFIOPCI[@]}" -eq 0 ]] \
            || ( [[ "${#_HWID_LIST_VFIOPCI[@]}" -eq 0 ]] \
                && [[ "${#_HWID_LIST_PCISTUB[@]}" -eq 0 ]] \
                && [[ "${#_DRIVER_LIST_VFIOPCI_WITH_VGA[@]}" -eq 0 ]] \
                && [[ "${#_HWID_LIST_VFIOPCI_WITH_VGA[@]}" -eq 0 ]] ); then
            echo -e "$_PREFIX_ERROR Some or all parsed IOMMU group lists are empty."
            return 1
        fi

        return 0
    }

    function ExecuteSetup
    {
        function Main
        {
            if ! "$_EXECUTE_MULTIBOOT_SETUP" \
                && ! "$_EXECUTE_STATIC_SETUP" \
                && ! "$_EXECUTE_UNINSTALL_SETUP"; then
                for _TRIES_COUNT in $( seq 0 2 ); do
                    read -r -p "Execute VFIO setup? [(M)ultiboot/(S)tatic/(U)ninstall]: " _ANSWER

                    case "$_ANSWER" in
                        [Mm]* )
                            _EXECUTE_MULTIBOOT_SETUP=true
                            break;;

                        [Ss]* )
                            _EXECUTE_STATIC_SETUP=true
                            break;;

                        [Uu]* )
                            _EXECUTE_UNINSTALL_SETUP=true
                            break;;

                        * )
                            echo "Please answer M, S, or U.";;
                    esac
                done

                if ! [[ "$_ANSWER" =~ [MmSsUu] ]]; then
                    echo -e "$_PREFIX_ERROR Failed to answer."
                    return 1
                fi
            fi

            case true in
                "$_EXECUTE_MULTIBOOT_SETUP" )
                    ExecuteMultibootSetup || return 1
                    ;;

                "$_EXECUTE_STATIC_SETUP" )
                    ExecuteStaticSetup || return 1
                    ;;

                "$_EXECUTE_UNINSTALL_SETUP" )
                    ExecuteUninstallSetup || return 1
                    ;;
            esac
        }

        Main
        PrintPassOrFail "Deploying VFIO setup...\t"
        return "$_LAST_EXIT_CODE"
    }

    function SetParamsForGRUBStaticSetup
    {
        IFS=$'\n'
        local -a _STATIC_DRIVER_LIST=( "${_DRIVER_LIST_VFIOPCI[@]}" "${_DRIVER_LIST_VFIOPCI_WITH_VGA[@]}" )
        local -a _STATIC_HWID_LIST=( "${_HWID_LIST_VFIOPCI[@]}" "${_HWID_LIST_VFIOPCI_WITH_VGA[@]}" )
        _STATIC_DRIVER_LIST=( $( sort --uniq <<<"${_STATIC_DRIVER_LIST[*]}" ) )
        _STATIC_HWID_LIST=( $( sort --uniq <<<"${_STATIC_HWID_LIST[*]}" ) )
        declare -g _DRIVER_DELIM=""
        declare -g _HWID_DELIM=""
        declare -g _STATIC_PCISTUB_HWID_DELIM=""
        unset IFS

        for _DRIVER in ${_STATIC_DRIVER_LIST[@]}; do
            if [[ "$_DRIVER" != "" ]]; then
                _DRIVER_DELIM+="$_DRIVER,"
            fi
        done

        for _HWID in ${_STATIC_HWID_LIST[@]}; do
            if [[ "$_HWID" != "" ]]; then
                _HWID_DELIM+="$_HWID,"
            fi
        done

        if [[ "${#_HWID_LIST_PCISTUB[@]}" -gt 0 ]]; then
            for _HWID in ${_HWID_LIST_PCISTUB[@]}; do
                if [[ "$_HWID" != "" ]]; then
                    _STATIC_PCISTUB_HWID_DELIM+="$_HWID,"
                fi
            done
        fi

        _DRIVER_DELIM="${_DRIVER_DELIM::-1}"
        _HWID_DELIM="${_HWID_DELIM::-1}"

        if [[ "${#_STATIC_PCISTUB_HWID_DELIM}" -gt 0 ]]; then
            _STATIC_PCISTUB_HWID_DELIM="${_STATIC_PCISTUB_HWID_DELIM::-1}"
        fi

        if ( [[ "${#_DRIVER_DELIM}" -eq 0 ]] \
            && [[ "${#_HWID_DELIM}" -eq 0 ]] ) \
            || ( [[ "${#_DRIVER_DELIM}" -eq 0 ]] \
            && [[ "${#_STATIC_PCISTUB_HWID_DELIM}" -eq 0 ]] ); then
            echo -e "$_PREFIX_ERROR Driver and HWID output is empty."
            return 1
        fi

        return 0
    }

    function SetParamsForNoGRUBStaticSetup
    {
        GetParamsForSetup || return 1
        IFS=$'\n'
        declare -ag _FILE_CONTENTS_LIST=( )
        declare -ag _STATIC_DRIVER_LIST=( "${_DRIVER_LIST_VFIOPCI[@]}" "${_DRIVER_LIST_VFIOPCI_WITH_VGA[@]}" )
        declare -ag _STATIC_HWID_LIST=( "${_HWID_LIST_PCISTUB[@]}" "${_HWID_LIST_VFIOPCI[@]}" "${_HWID_LIST_VFIOPCI_WITH_VGA[@]}" )
        _STATIC_DRIVER_LIST=( $( sort --uniq <<<"${_STATIC_DRIVER_LIST[*]}" ) )
        _STATIC_HWID_LIST=( $( sort --uniq <<<"${_STATIC_HWID_LIST[*]}" ) )
        declare -ag _BLACKLISTS_LIST=( )
        declare -ag _INITRAMFS_LIST=( )
        declare -ag _MODULES_LIST=( )
        declare -g _DRIVER_DELIM=""
        declare -g _HWID_DELIM=""
        unset IFS

        for _DRIVER in ${_STATIC_DRIVER_LIST[@]}; do
            if [[ "$_DRIVER" != "" ]] \
                && [[ "$_DRIVER" != "N/A" ]]; then
                _DRIVER_DELIM+="$_DRIVER,"

                _BLACKLISTS_LIST+=(
                    "blacklist $_DRIVER"
                )

                _INITRAMFS_LIST+=(
                    "softdep $_DRIVER pre: vfio-pci"
                    "$_DRIVER"
                )

                _MODULES_LIST+=(
                    "softdep $_DRIVER pre: vfio-pci"
                )
            fi
        done

        for _HWID in ${_STATIC_HWID_LIST[@]}; do
            if [[ "$_HWID" != "" ]]; then
                _HWID_DELIM+="$_HWID,"
            fi
        done

        _DRIVER_DELIM="${_DRIVER_DELIM::-1}"
        _HWID_DELIM="${_HWID_DELIM::-1}"

        if [[ "${#_DRIVER_DELIM}" -eq 0 ]] \
            && [[ "${#_HWID_DELIM}" -eq 0 ]]; then
            echo -e "$_PREFIX_ERROR Driver and HWID output is empty."
            return 1
        fi

        return 0
    }

    function SetParamsForMultibootSetup
    {
        GetParamsForSetup || return 1

        # <remarks> System configuration </remarks>
        local -i _MAX_NUM_PARSE_KERNELS=3
        declare -a _KERNELS_LIST=( $( ls -1 /boot/vmli* | cut -d 'z' -f 2 | cut -c 2- | sort -r | head -n $_MAX_NUM_PARSE_KERNELS ) )
        local _SYSTEM_DISK=$( df / | grep -iv 'filesystem' | cut -d '/' -f3 | cut -d ' ' -f1 )
        local _SYSTEM_DISTRO=$( lsb_release -i -s )
        local _SYSTEM_FSTYPE=$( blkid -s TYPE | grep $_SYSTEM_DISK | cut -d '"' -f2 )
        local _SYSTEM_KERNEL=$( uname -o )
        local _SYSTEM_OS=$( uname )
        local _SYSTEM_UUID=$( blkid -s UUID | grep $_SYSTEM_DISK | cut -d '"' -f2 )
        local _LINE_GRUB_CMDLINE_PREFIX=""
        _LINE_GRUB_CMDLINE_PREFIX+="$_LINE_GRUB_CMDLINE "
        _LINE_GRUB_CMDLINE_PREFIX+="$_LINE_GRUB_CMDLINE_ISOLCPU "
        _LINE_GRUB_CMDLINE_PREFIX+="$_OUTPUT_GRUB_CMDLINE_HUGEPAGES "

        # <remarks> Parse VGA VFIO IOMMU Groups. </remarks>
        for _IOMMU in ${_VGA_VFIOPCI_IOMMU_LIST[@]}; do
            local -a _NO_VGA_DRIVER_LIST=( )
            local -a _NO_VGA_HWID_LIST=( )
            local _NO_VGA_DRIVER_DELIM=""
            local _NO_VGA_HWID_DELIM=""
            local _DEVICE_NAME=""
            local _MENU_ENTRY_TEMP=""

            for _KEY in ${!_IOMMU_LIST[@]}; do
                local _THIS_IOMMU="${_IOMMU_LIST[$_KEY]}"
                local _DRIVER="${_DRIVER_LIST_VFIOPCI[$_KEY]}"
                local _PCISTUB_HWID="${_HWID_LIST_PCISTUB[$_KEY]}"
                local _VFIOPCI_HWID="${_HWID_LIST_VFIOPCI[$_KEY]}"
                local _VFIOPCI_WITH_VGA_HWID="${_HWID_LIST_VFIOPCI_WITH_VGA[$_KEY]}"

                if [[ "$_THIS_IOMMU" == "$_IOMMU" ]]; then
                    local -l _CLASS="${_CLASS_LIST[$_KEY]}"

                    case "$_CLASS" in
                        *"vga"* | *"graphics"* )
                            _DEVICE_NAME="${_DEVICE_NAME_LIST[$_KEY]}"
                            _MENU_ENTRY_TEMP=", w/ boot VGA \"$_DEVICE_NAME\"" ;;
                    esac
                else
                    if [[ "$_DRIVER" != "" ]] \
                        && [[ "$_DRIVER" != "N/A" ]]; then
                        _NO_VGA_DRIVER_LIST+=( "$_DRIVER" )
                    fi

                    if [[ "$_PCISTUB_HWID" != "" ]]; then
                        _NO_VGA_HWID_LIST+=( "$_PCISTUB_HWID" )
                    fi

                    if [[ "$_VFIOPCI_HWID" != "" ]]; then
                        _NO_VGA_HWID_LIST+=( "$_VFIOPCI_HWID" )
                    fi

                    if [[ "$_VFIOPCI_WITH_VGA_HWID" != "" ]]; then
                        _NO_VGA_HWID_LIST+=( "$_VFIOPCI_WITH_VGA_HWID" )
                    fi
                fi
            done

            _NO_VGA_DRIVER_LIST=( $( sort --uniq <<<"${_NO_VGA_DRIVER_LIST[*]}" ) )
            _NO_VGA_HWID_LIST=( $( sort --uniq <<<"${_NO_VGA_HWID_LIST[*]}" ) )

            for _DRIVER in ${_NO_VGA_DRIVER_LIST[@]}; do
                _NO_VGA_DRIVER_DELIM+="$_DRIVER,"
            done

            for _HWID in ${_NO_VGA_HWID_LIST[@]}; do
                _NO_VGA_HWID_DELIM+="$_HWID,"
            done

            _NO_VGA_DRIVER_DELIM="${_NO_VGA_DRIVER_DELIM::-1}"
            _NO_VGA_HWID_DELIM="${_NO_VGA_HWID_DELIM::-1}"

            echo "_NO_VGA_DRIVER_DELIM == '$_NO_VGA_DRIVER_DELIM'"
            echo "_NO_VGA_HWID_DELIM == '$_NO_VGA_HWID_DELIM'"

            if ExcludeGivenVGAIOMMUGroup "$_IOMMU"; then
                for _KERNEL in ${_KERNELS_LIST[@]}; do
                    local _LINE_GRUB_CMDLINE_TEMP=""
                    _LINE_GRUB_CMDLINE_TEMP+="modprobe.blacklist=$_NO_VGA_DRIVER_DELIM "
                    _LINE_GRUB_CMDLINE_TEMP+="vfio_pci.ids=$_NO_VGA_HWID_DELIM "
                    _LINE_GRUB_CMDLINE_TEMP="$_LINE_GRUB_CMDLINE_PREFIX${_LINE_GRUB_CMDLINE_TEMP::-1}"

                    # <remarks> Organize menu entry for excluded VGA group and given system kernel. </remarks>
                    _FILE_CONTENTS_LIST+=(
                        "menuentry $_SYSTEM_DISTRO, with $_SYSTEM_OS $_KERNEL (VFIO, w/o IOMMU $_IOMMU$_MENU_ENTRY_TEMP) {"
                        "\tinsmod $_SYSTEM_FSTYPE"
                        "\tset root='/dev/disk/by-uuid/$_SYSTEM_UUID'"
                        "\t"'if [ x$feature_platform_search_hint = xy ]; then'"\n\t\t"'search --no-floppy --fs-uuid --set=root '"$_SYSTEM_UUID\n\t"'fi'
                        "\techo    'Loading $_SYSTEM_OS $_KERNEL ...'"
                        "\tlinux   /boot/vmlinuz-$_KERNEL root=UUID=$_SYSTEM_UUID $_LINE_GRUB_CMDLINE_TEMP"
                        "\tinitrd  /boot/initrd.img-$_KERNEL"
                        "}"
                        ""
                    )
                done
            fi
        done

        if [[ "${#_FILE_CONTENTS_LIST[@]}" -eq 0 ]]; then
            echo -e "$_PREFIX_ERROR Multiboot setup output is empty."
            return 1
        fi

        return 0
    }

    function WriteFilesForNoGRUBStaticSetup
    {
        "$_HAS_EXECUTED_BACKUPS" || return 1
        IFS=$'\n'
        local -r _LINE_TO_MATCH="GRUB_CMDLINE_LINUX_DEFAULT="
        local _LINE_GRUB_CMDLINE_TEMP=""
        _LINE_GRUB_CMDLINE_TEMP+="$_LINE_GRUB_CMDLINE "
        _LINE_GRUB_CMDLINE_TEMP+="$_LINE_GRUB_CMDLINE_ISOLCPU "
        _LINE_GRUB_CMDLINE_TEMP+="$_OUTPUT_GRUB_CMDLINE_HUGEPAGES "
        _LINE_GRUB_CMDLINE_TEMP+="modprobe.blacklist= "
        _LINE_GRUB_CMDLINE_TEMP+="pci-stub.ids= "
        _LINE_GRUB_CMDLINE_TEMP+="vfio_pci.ids= "
        _LINE_GRUB_CMDLINE_TEMP="${_LINE_GRUB_CMDLINE_TEMP::-1}"
        local -r _LINE_GRUB_CMDLINE_DEFAULT="GRUB_CMDLINE_LINUX_DEFAULT=\"$_LINE_GRUB_CMDLINE_TEMP\""

        # <remarks> Write to new file. </remarks>
        local -i _KEY=$(( "${#_INITRAMFS_LIST[@]}" - 1 ))
        local -i _NUM_LINE=23

        while [[ "$_KEY" -ge 0 ]]; do
            _LINE="${_INITRAMFS_LIST[$_KEY]}"

            if ! sed -i "23i $_LINE" "$_INITRAMFS_MODULES_DEST_PATH"; then
                echo -e "$_PREFIX_ERROR Failed to overwrite target lines of files."
                return 1
            fi

            (( --_KEY ))
        done

        if [[ "$?" -ne 0 ]]; then
            echo -e "$_PREFIX_ERROR Failed to overwrite target lines of files."
            return 1
        fi

        # <remarks> Write to new file. </remarks>
        local -i _KEY=$(( "${#_MODULES_LIST[@]}" - 1 ))
        local -i _NUM_LINE=7

        while [[ "$_KEY" -ge 0 ]]; do
            _LINE="${_MODULES_LIST[$_KEY]}"

            if ! sed -i "7i $_LINE" "$_MODPROBE_VFIO_DEST_PATH"; then
                echo -e "$_PREFIX_ERROR Failed to overwrite target lines of files."
                return 1
            fi

            (( --_KEY ))
        done

        if [[ "$?" -ne 0 ]]; then
            echo -e "$_PREFIX_ERROR Failed to overwrite target lines of files."
            return 1
        fi

        # <remarks> Write to new files. </remarks>
        if ! sed -i '/'$_LINE_TO_MATCH'/c\'"$_LINE_GRUB_CMDLINE_DEFAULT" "$_GRUB_DEST_PATH_1" \
            || ! sed -i "/options vfio_pci ids=*/c\options vfio_pci_ids=\"$_HWID_DELIM\"" "$_INITRAMFS_MODULES_DEST_PATH" \
            || ! sed -i "/vfio_pci ids=*/c\vfio_pci_ids=\"$_HWID_DELIM\"" "$_INITRAMFS_MODULES_DEST_PATH" \
            || ! echo -e "\n${_BLACKLISTS_LIST[*]}" >> "$_MODPROBE_BLACKLISTS_DEST_PATH" \
            || ! sed -i "/options vfio_pci ids=*/c\options vfio_pci ids=\"$_HWID_DELIM\"" "$_MODPROBE_VFIO_DEST_PATH" \
            || ! sed -i "/vfio_pci ids=*/c\vfio_pci_ids=\"$_HWID_DELIM\"" "$_MODULES_DEST_PATH"; then
            echo -e "$_PREFIX_ERROR Failed to overwrite target lines of files."
            return 1
        fi

        unset IFS
        return 0
    }

    function WriteFilesForGRUBStaticSetup
    {
        "$_HAS_EXECUTED_BACKUPS" || return 1
        IFS=$'\n'
        local -r _LINE_TO_MATCH="GRUB_CMDLINE_LINUX_DEFAULT="
        local _LINE_GRUB_CMDLINE_TEMP=""
        _LINE_GRUB_CMDLINE_TEMP+="$_LINE_GRUB_CMDLINE "
        _LINE_GRUB_CMDLINE_TEMP+="$_LINE_GRUB_CMDLINE_ISOLCPU "
        _LINE_GRUB_CMDLINE_TEMP+="$_OUTPUT_GRUB_CMDLINE_HUGEPAGES "
        _LINE_GRUB_CMDLINE_TEMP+="modprobe.blacklist=$_DRIVER_DELIM "
        _LINE_GRUB_CMDLINE_TEMP+="pci-stub.ids=$_STATIC_PCISTUB_HWID_DELIM "
        _LINE_GRUB_CMDLINE_TEMP+="vfio_pci.ids=$_HWID_DELIM "
        _LINE_GRUB_CMDLINE_TEMP="${_LINE_GRUB_CMDLINE_TEMP::-1}"
        local -r _LINE_GRUB_CMDLINE_DEFAULT="$_LINE_TO_MATCH\"$_LINE_GRUB_CMDLINE_TEMP\""

        if ! sed -i '/'"$_LINE_TO_MATCH"'/c\'"$_LINE_GRUB_CMDLINE_DEFAULT" "$_GRUB_DEST_PATH_1"; then
            echo -e "$_PREFIX_ERROR Failed to overwrite target lines of files."
            return 1
        fi

        unset IFS
        return 0
    }

    function WriteFilesForMultibootSetup
    {
        "$_HAS_EXECUTED_BACKUPS" || return 1
        IFS=$'\n'

        if [[ -d $( dirname "$_CUSTOM_GRUB_DEST_PATH" ) ]] \
            && ! sudo mkdir -p $( dirname "$_CUSTOM_GRUB_DEST_PATH" ); then
            echo -e "$_PREFIX_ERROR Failed to create directory '"$( dirname "$_CUSTOM_GRUB_DEST_PATH" )"'."
            return 1
        fi

        if ! echo -e "\n${_FILE_CONTENTS_LIST[*]}" >> "$_CUSTOM_GRUB_DEST_PATH"; then
            echo -e "$_PREFIX_ERROR Failed to overwrite target lines of files."
            return 1
        fi

        unset IFS
        return 0
    }
# </code>

# <params>
    declare -g _LINE_GRUB_CMDLINE="quiet iommu=1,pt amd_iommu=on intel_iommu=on video=efifb:off,vesafb:off acpi=force apm=power_off rd.driver.pre=vfio-pci pcie_aspm=off kvm.ignore_msrs=1"
# </params>