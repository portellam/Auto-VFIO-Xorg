#!/bin/bash sh

#
# Filename:         vfiolib-common
# Description:      Common-use functions.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source vfiolib-globals
# </code>

# <code>
    function AskToExecuteOrSkip
    {
        local _OUTPUT=""

        if [[ ! -z "$1" ]]; then
            _OUTPUT="$1 "
        fi

        for _TRIES_COUNT in $( seq 0 2 ); do
            read -r -p "$_OUTPUT[Y/n]: " _ANSWER

            case "$_ANSWER" in
                [Yy]* )
                    return 0 ;;

                [Nn]* )
                    return 255 ;;

                * )
                    echo "Please answer \"Y\" or \"N\"." ;;
            esac
        done

        return 1
    }

    function FindPackage
    {
        if [[ "$1" == "" ]] \
            || [[ "$_PACKAGE_MANAGER" == "" ]]; then
            echo -e "$_PREFIX_ERROR Input values are empty."
            return 1
        fi

        case "$_PACKAGE_MANAGER" in
            "apt" )
                apt list "$1" ;;

            "dnf" )
                dnf search "$1" ;;

            "pacman" )
                pacman -Ss "$1" ;;

            "gentoo" )
                emerge --search "$1" ;;

            "urpmi" )
                urpmq "$1" ;;

            "yum" )
                yum search "$1" ;;

            "zypper" )
                zypper se "$1" ;;

            * )
                echo -e "$_OUTPUT_INVALID_PACKAGE_MANAGER"
                return 1 ;;
        esac

        SaveExitCode

        if [[ "$_LAST_EXIT_CODE" -ne 0 ]]; then
            case "$_PACKAGE_MANAGER" in
                *" "* )
                    echo -e "$_PREFIX_ERROR Packages '$_PACKAGE_MANAGER' were not found." ;;

                * )
                    echo -e "$_PREFIX_ERROR Package '$_PACKAGE_MANAGER' was not found." ;;
            esac

            return 1
        fi

        return "$_LAST_EXIT_CODE"
    }

    function GetInternetStatus
    {
        function PingServer
        {
            IsString $1 || return 1
            ping -q -c 1 $1 &> /dev/null
            return "$?"
        }

        local _IS_VERBOSE=false

        if [[ "$1" == true ]]; then
            _IS_VERBOSE=true
        fi

        if "$_IS_VERBOSE"; then
            echo -en "Testing Internet connection...\t"
        fi

        if ! PingServer "8.8.8.8" || ! PingServer "1.1.1.1"; then
            false
        fi

        SaveExitCode

        if "$_IS_VERBOSE"; then
            ( return "$_LAST_EXIT_CODE" )
            PrintPassOrFail
            echo -en "Testing connection to DNS...\t"
        fi

        if ! PingServer "www.google.com" || ! PingServer "www.yandex.com"; then
            false
        fi

        SaveExitCode

        if "$_IS_VERBOSE"; then
            ( return "$_LAST_EXIT_CODE" )
            PrintPassOrFail
        fi

        if [[ "$_LAST_EXIT_CODE" -ne 0 ]]; then
            echo -e "Failed to ping Internet/DNS servers. Check network settings or firewall, and try again."
        fi

        return "$_LAST_EXIT_CODE"
    }

    function GetLinuxDistro
    {
        # <summary> Check if current Operating System matches Package Manager, and Check if PM is installed. </summary>
        function GetPackageManagerBy_OS
        {
            if [[ "$_OS_WITH_APT" =~ .*${_OPERATING_SYSTEM}.* ]]; then
                _PACKAGE_MANAGER="apt"

            elif [[ "$_OS_WITH_DNF_OR_YUM" =~ .*${_OPERATING_SYSTEM}.* ]]; then
                _PACKAGE_MANAGER="dnf"

                if command -v "$_PACKAGE_MANAGER"; then
                    return 0
                fi

                _PACKAGE_MANAGER="yum"

            elif [[ "$_OS_WITH_PACMAN" =~ .*${_OPERATING_SYSTEM}.* ]]; then
                _PACKAGE_MANAGER="pacman"

            elif [[ "$_OS_WITH_PORTAGE" =~ .*${_OPERATING_SYSTEM}.* ]]; then
                _PACKAGE_MANAGER="portage"

            elif [[ "$_OS_WITH_URPMI" =~ .*${_OPERATING_SYSTEM}.* ]]; then
                _PACKAGE_MANAGER="urpmi"

            elif [[ "$_OS_WITH_ZYPPER" =~ .*${_OPERATING_SYSTEM}.* ]]; then
                _PACKAGE_MANAGER="zypper"

            else
                _PACKAGE_MANAGER=""
            fi

            if ! command -v "$_PACKAGE_MANAGER"; then
                return 1
            fi

            return 0
        }

        local _KERNEL="$( uname -o | tr '[:upper:]' '[:lower:]' )"
        local _OS_WITH_APT="debian bodhi deepin knoppix mint peppermint pop ubuntu kubuntu lubuntu xubuntu "
        local _OS_WITH_DNF_OR_YUM="redhat berry centos cern clearos elastix fedora fermi frameos mageia opensuse oracle scientific suse"
        local _OS_WITH_PACMAN="arch manjaro"
        local _OS_WITH_PORTAGE="gentoo"
        local _OS_WITH_URPMI="opensuse"
        local _OS_WITH_ZYPPER="mandriva mageia"

        if [[ "$_KERNEL" == "" || "$_OPERATING_SYSTEM" == "" ]]; then
            echo -e "$_PREFIX_ERROR Null values."
            return 1
        fi

        if [[ "$_KERNEL" != *"linux"* ]]; then
            echo -e "$_PREFIX_ERROR Kernel '$( uname -o )' is not supported."
            return 1
        fi

        if ! GetPackageManagerBy_OS; then
            echo -e "$_PREFIX_ERROR Distribution '$( lsb_release -is )' is not supported."
            return 1
        fi

        return 0
    }

    function InstallPackage
    {
        if [[ "$_PACKAGE_MANAGER" == "" ]] \
            || [[ "$1" == "" ]]; then
            echo -e "$_PREFIX_ERROR Input values are empty."
            return 1
        fi

        local _DO_REINSTALL=false
        local _OPTION=""

        if [[ "$2" == true ]]; then
            _DO_REINSTALL=true
        fi

        # <remarks> Auto-update and auto-install selected packages </remarks>
        case "$_PACKAGE_MANAGER" in
            "apt" )
                if "$_DO_REINSTALL"; then
                    _OPTION="--reinstall -o Dpkg::Options::=--force-confmiss"
                fi

                apt update && apt full-upgrade -y && apt install -y "$_OPTION" "$1" || return 1 ;;

            "dnf" )
                dnf upgrade && dnf install "$1" ;;

            "pacman" )
                pacman -Syu && pacman -S "$1" ;;

            "gentoo" )
                emerge -u @world && emerge "$1" ;;

            "urpmi" )
                urpmi --auto-update && urpmi "$1" ;;

            "yum" )
                yum update && yum install "$1" ;;

            "zypper" )
                zypper refresh && zypper in "$1" ;;

            * )
                echo -e "$_OUTPUT_INVALID_PACKAGE_MANAGER"
                false ;;
        esac

        PrintPassOrFail "Installing software packages..."
        return "$?"
    }

    function IsInstalledPackage
    {
        if [[ "$_PACKAGE_MANAGER" == "" ]] \
            || [[ "$1" == "" ]]; then
            echo -e "$_PREFIX_ERROR Input values are empty."
            return 1
        fi

        local _GET_COMMAND=""

        # <remarks> Check if package is not installed </remarks>
        case "$_PACKAGE_MANAGER" in
            "apt" )
                _GET_COMMAND="sudo dpkg -s $1" ;;

            * )
                echo -e "$_OUTPUT_INVALID_PACKAGE_MANAGER"
                return 1 ;;
        esac

        local -i _COUNT_DELIM=$( echo "$1" | wc -w )

        while [[ "$_COUNT_DELIM" -gt 0 ]]; do
            local str_package=$( echo "$1" | cut -d ' ' -f "$_COUNT_DELIM" )
            eval "$_GET_COMMAND" || return 1
            (( _COUNT_DELIM-- ))
        done

        return 0
    }

    function IsSudoUser
    {
        if [[ $( whoami ) != "root" ]]; then
            echo -e "$_PREFIX_ERROR User is not sudo/root."
            return 1
        fi

        return 0
    }

    function PrintPassOrFail
    {
        SaveExitCode

        if [[ "$1" != "" ]]; then
            echo -en "$1\t"
        fi

        case "$_LAST_EXIT_CODE" in
            0 )
                echo -e "$_SUFFIX_PASS" ;;

            255 )
                echo -e "$_SUFFIX_SKIP" ;;

            * )
                echo -e "$_SUFFIX_FAIL" ;;
        esac

        return "$_LAST_EXIT_CODE"
    }

    function SaveExitCode
    {
        _LAST_EXIT_CODE="$?"
    }

    function UninstallPackage
    {
        if [[ "$_PACKAGE_MANAGER" == "" ]] \
            || [[ "$1" == "" ]]; then
            echo -e "$_PREFIX_ERROR Input values are empty."
            return 1
        fi

        # <remarks> Uninstall selected packages </remarks>
        case "$_PACKAGE_MANAGER" in
            "apt" )
                apt uninstall "$1" ;;

            "dnf" )
                dnf remove "$1" ;;

            "pacman" )
                pacman -R "$1" ;;

            "gentoo" )
                emerge -Cv "$1" ;;

            "urpmi" )
                urpme "$1" ;;

            "yum" )
                yum remove "$1" ;;

            "zypper" )
                zypper remove "$1" ;;

            * )
                echo -e "$_OUTPUT_INVALID_PACKAGE_MANAGER"
                false ;;
        esac

        PrintPassOrFail "Uninstalling software packages..."
        return "$?"
    }

    function UpdateOrCloneGitRepo
    {
        local _AUTO_ANSWER_YES=false

        if [[ "$4" == true ]]; then
            _AUTO_ANSWER_YES=true
        fi

        if [[ "$3" == "" ]] \
            || [[ "$2" == "" ]] \
            || [[ "$1" == "" ]]; then
            echo -e "$_PREFIX_ERROR Input values are empty."
            return 1
        fi

        if [[ ! -d "$1$2" ]] \
            && ! sudo mkdir -p "$1$3"; then
            echo -e "$_PREFIX_ERROR Failed to create directory '$1$3'."
            return 1
        fi

        # <remarks> Update existing GitHub repository. </remarks>
        if [[ -d "$1$2" ]]; then
            cd "$1$2"

            if ! git pull &> /dev/null; then
                echo -e "$_PREFIX_ERROR Failed to update repository."
                return 1
            fi

            return 0

        # <remarks> Clone new GitHub repository. </remarks>
        elif [[ -d "$1$3" ]]; then
            for _TRIES_COUNT in $( seq 0 2 ); do
                if ! "$_AUTO_ANSWER_YES"; then
                    read -r -p "Clone repo '$2'? [Y/n]: " _ANSWER
                else
                    _ANSWER="Y"
                fi

                case "$_ANSWER" in
                    [Yy]* )
                        cd "$1$3"

                        if ! git clone "https://github.com/$2" &> /dev/null; then
                            echo -e "$_PREFIX_ERROR Failed to download repository."
                            return 1
                        fi

                        return 0 ;;

                    [Nn]* )
                        return 255 ;;

                    * )
                        echo "Please answer \"Y\" or \"N\"." ;;
                esac
            done

            return 1

        else
            return 1
        fi
    }
# </code>

# <params>
    declare -g _OUTPUT_INVALID_PACKAGE_MANAGER="$_PREFIX_ERROR Command '$_PACKAGE_MANAGER' is not supported."

    # <remarks> System validation </remarks>
    declare -gl _PACKAGE_MANAGER=""
    declare -gl _OPERATING_SYSTEM="$( lsb_release -is )"
    GetLinuxDistro &> /dev/null
# </params>