#!/bin/false

#
# Filename:       deploy-vfio_logic_common
# Description:    Common-use functions and variables.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

# <functions>
  function declare_parameters
  {
    if [[ "${COMMON_ARE_PARAMS_SET}" == true ]]; then
      return 0
    fi

    declare -g COMMON_ARE_PARAMS_SET=true

    declare -gr REPO_NAME="deploy-vfio"
    declare -gr DEPLOY_VFIO_NAME="deploy-vfio"

    # <remarks>
    # Color coding
    # Reference URL: 'https://www.shellhacks.com/bash-colors'
    # </remarks>
    declare -gr SET_COLOR_GREEN='\033[0;32m'
    declare -gr SET_COLOR_RED='\033[0;31m'
    declare -gr SET_COLOR_YELLOW='\033[0;33m'
    declare -gr RESET_COLOR='\033[0m'

    # <remarks>Append output</remarks>
    declare -gr PREFIX_NOTE="${SET_COLOR_YELLOW}Note:${RESET_COLOR}"
    declare -gr PREFIX_ERROR="${SET_COLOR_YELLOW}An error occurred:${RESET_COLOR}"
    declare -gr PREFIX_FAIL="${SET_COLOR_RED}Failure:${RESET_COLOR}"
    declare -gr PREFIX_PASS="${SET_COLOR_GREEN}Success:${RESET_COLOR}"
    declare -gr SUFFIX_FAIL="${SET_COLOR_RED}[Failure]${RESET_COLOR}"
    declare -gr SUFFIX_PASS="${SET_COLOR_GREEN}[Success]${RESET_COLOR}"
    declare -gr SUFFIX_SKIP="${SET_COLOR_YELLOW}[Skipped]${RESET_COLOR}"
    declare -gr SUFFIX_WORK="${SET_COLOR_YELLOW}[Working]${RESET_COLOR}"

    declare -g PREFIX_COMMENT="#" # <note>Added this var, to prevent IDE from showing visual errors when a string contains a comment variable.</note>

    # <remarks>File templates.</remarks>
    declare -gar DISCLAIMER_FILE_CONTENTS=(
      "${PREFIX_COMMENT} Generated by '${REPO_NAME}/${DEPLOY_VFIO_NAME}'"
      "${PREFIX_COMMENT} WARNING: Any modifications to this file will be modified by '${DEPLOY_VFIO_NAME}'"
      "${PREFIX_COMMENT}"
    )

    declare -gar VFIO_DISCLAIMER_FILE_CONTENTS=(
      "${DISCLAIMER_FILE_CONTENTS[@]}"
      "${PREFIX_COMMENT} Run lspci to view hardware information."
      "${PREFIX_COMMENT} You must run update-initramfs(8) to effect this change."
      "${PREFIX_COMMENT}"
    )

    # <remarks>Memory</remarks>
    declare -gi AVAILABLE_MEMORY=0
    declare -gir ONE_GIB_IN_KIB=1048576
    declare -gir TWO_MIB_IN_KIB=2048
    declare -gir MAX_MEMORY=$( cat /proc/meminfo | grep MemTotal | cut -d ":" -f 2 | awk 'END {print $1}' )
    declare -gir MIN_MEMORY=$(( 8 * ${ONE_GIB_IN_KIB} ))
    set_free_memory
  }

  function is_user_superuser
  {
    if [[ $( whoami ) != "root" ]]; then
      print_prefix_error "User is not sudo or root."
      exit 1
    fi
  }

  function reverse_array
  {
    is_enum "${1}" || return 1
    local -n reference="${1}"
    reference="$( printf '%s\n' "${reference[@]}" | tac | tr '\n' ' '; echo )"
  }

  function set_ifs_to_newline
  {
    IFS=$'\n'
  }

  function unset_ifs
  {
    unset IFS
  }

  # <summary>Interaction</summary>
    function execute_or_skip_prompt
    {
      local output=""

      if [[ ! -z "${1}" ]]; then
        output="${1} "
      fi

      for counter in $( seq 0 2 ); do
        echo -en "${output}[Y/n]: "
        read -r -p "" answer

        case "${answer}" in
          [Yy]* )
            return 0 ;;

          [Nn]* )
            return 255 ;;

          * )
            echo "Please answer 'Y' or 'N'." ;;
        esac
      done

      return 1
    }

  # <summary>Presentation/summary>
    function is_file
    {
      if [[ -z "${1}" ]] \
        || [[ ! -e "${1}" ]]; then
        print_prefix_error "File does not exist."
        return 1
      fi
    }

    function is_file_not_empty
    {
      if [[ -z "${1}" ]] \
        || [[ ! -s "${1}" ]]; then
        print_prefix_error "File is empty."
        return 1
      fi
    }

    function print_prefix_error
    {
       echo -e "${PREFIX_ERROR} ${1}"
    }

    function print_prefix_fail
    {
      echo -e "${PREFIX_FAIL} ${1}"
    }

    function print_prefix_note
    {
      echo -e "${PREFIX_NOTE} ${1}"
    }

    function print_prefix_pass
    {
      echo -e "${PREFIX_PASS} ${1}"
    }

    function print_suffix_error
    {
      echo -e "${SUFFIX_ERROR} ${1}"
    }

    function print_suffix_fail
    {
      echo -e "${SUFFIX_FAIL} ${1}"
    }

    function print_suffix_note
    {
      echo -e "${SUFFIX_NOTE} ${1}"
    }

    function print_suffix_pass
    {
      echo -e "${SUFFIX_PASS} ${1}"
    }

  # <summary>Variable data-type validation</summary>
    function get_comma_delimited_string_from_enum
    {
      local -n enum_reference="${1}"
      local -n delim_reference="${2}"

      for value in ${enum_reference[@]}; do
        delim_reference+="${value},"
      done

      if [[ ${delim_reference: -1} == "," ]]; then
        delim_reference="${delim_reference::-1}"
      fi
    }

    function is_enum
    {
      local -n reference="${1}"

      if ! [[ "${#reference[@]}" -gt 0 ]]; then
        return 1
      fi
    }

    function is_enum_empty
    {
      is_enum "${1}" || return 1
      local -n reference="${1}"

      for value in "${reference[@]}"; do
        if ! [[ ! -z "${value}" ]]; then
          return 1
        fi
      done
    }

    function is_int
    {
      if ! [[ "${1}" =~ ^[0-9]+$ ]] \
        && ! [[ "${1}" =~ ^[-][0-9]+$ ]]; then
        return 1
      fi
    }

  # <summary>System validation</summary>
    function get_free_memory
    {
      if [[ "${AVAILABLE_MEMORY}" -le 0 ]]; then
        return 1
      fi

      return 0
    }

    function set_free_memory
    {
      AVAILABLE_MEMORY=$(( MAX_MEMORY - MIN_MEMORY ))
    }

# </functions>

# <code>
  declare_parameters
  unset declare_parameters
# </code