#!/bin/false

#
# Filename:       deploy-vfio_logic_common
# Description:    Common-use functions and variables.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

# <functions>
  function declare_parameters
  {
    if [[ "${COMMON_ARE_PARAMS_SET}" == true ]]; then
      return 0
    fi

    declare -g COMMON_ARE_PARAMS_SET=true

    declare -gr REPO_NAME="deploy-vfio"
    declare -gr DEPLOY_VFIO_NAME="deploy-vfio"

    # <remarks>
    # Color coding
    # Reference URL: 'https://www.shellhacks.com/bash-colors'
    # </remarks>
    declare -gr SET_COLOR_GREEN='\033[0;32m'
    declare -gr SET_COLOR_RED='\033[0;31m'
    declare -gr SET_COLOR_YELLOW='\033[0;33m'
    declare -gr RESET_COLOR='\033[0m'

    # <remarks>Append output</remarks>
    declare -gr PREFIX_NOTE="${SET_COLOR_YELLOW}Note:${RESET_COLOR}"
    declare -gr PREFIX_ERROR="${SET_COLOR_YELLOW}An error occurred:${RESET_COLOR}"
    declare -gr PREFIX_FAIL="${SET_COLOR_RED}Failure:${RESET_COLOR}"
    declare -gr PREFIX_PASS="${SET_COLOR_GREEN}Success:${RESET_COLOR}"
    declare -gr SUFFIX_FAIL="${SET_COLOR_RED}[Failure]${RESET_COLOR}"
    declare -gr SUFFIX_PASS="${SET_COLOR_GREEN}[Success]${RESET_COLOR}"
    declare -gr SUFFIX_SKIP="${SET_COLOR_YELLOW}[Skipped]${RESET_COLOR}"
    declare -gr SUFFIX_WORK="${SET_COLOR_YELLOW}[Working]${RESET_COLOR}"

    declare -g PREFIX_COMMENT="#" # <note>Added this var, to prevent IDE from showing visual errors when a string contains a comment variable.</note>

    declare -gr BIN_PATH="/usr/local/bin/${DEPLOY_VFIO_NAME}.d/"
    declare -gr ETC_BACKUPS_PATH="/usr/local/etc/${DEPLOY_VFIO_NAME}.d/"

    # <remarks>File templates.</remarks>
    declare -gar DISCLAIMER_FILE_CONTENTS=(
      "${PREFIX_COMMENT} Generated by '${REPO_NAME}/${DEPLOY_VFIO_NAME}'"
      "${PREFIX_COMMENT} WARNING: Any modifications to this file will be modified by '${DEPLOY_VFIO_NAME}'"
      "${PREFIX_COMMENT}"
    )

    # <remarks>Memory</remarks>
    declare -gi AVAILABLE_MEMORY=0
    declare -gir ONE_GIB_IN_KIB=1048576
    declare -gir TWO_MIB_IN_KIB=2048
    declare -gir MAX_MEMORY=$( cat /proc/meminfo | grep MemTotal | cut -d ":" -f 2 | awk 'END {print $1}' )
    declare -gir MIN_MEMORY=$(( 8 * ${ONE_GIB_IN_KIB} ))
    set_free_memory
  }

  function is_user_superuser
  {
    if [[ $( whoami ) != "root" ]]; then
      print_prefix_error "User is not sudo or root."
      exit 1
    fi
  }

  function reverse_array
  {
    is_enum "${1}" || return 1
    local -n reference="${1}"
    reference="$( printf '%s\n' "${reference[@]}" | tac | tr '\n' ' '; echo )"
  }

  function set_ifs_to_newline
  {
    IFS=$'\n'
  }

  function unset_ifs
  {
    unset IFS
  }

  # <summary>GitHub</summary>
    function clone_git_repo
    {
      local -r full_repo="${1}"

      if ! git clone "https://github.com/${full_repo}" &> /dev/null; then
        print_prefix_error "Failed to download repository."
        return 1
      fi
    }

    function update_git_repo
    {
      if ! git pull &> /dev/null; then
        print_prefix_error "Failed to update repository."
        return 1
      fi
    }

    function update_or_clone_git_repo
    {
      local -r full_repo="${1}"
      local -r user_name="${2}"
      local -r full_path="${BIN_PATH}${full_repo}"
      local -r user_path="${BIN_PATH}${user_name}"

      if [[ ! -d "${user_path}" ]] \
        && ! sudo mkdir --parents "${user_path}" &> /dev/null; then
        print_prefix_error "Failed to create directory '${user_path}'."
        return 1
      fi

      if [[ ! -d "${full_path}" ]]; then
        cd "${full_path}"
        update_git_repo

      elif [[ -d "${user_path}" ]]; then
        clone_git_repo "${full_repo}"

      else
        return 1
      fi
    }

  # <summary>File manipulation</summary>
    function create_temp_file_of_file
    {
      is_file "${1}" &> /dev/null || return 0

      local -r file="${1}"
      local -r temp_file="${file}.tmp"

      if ! cp --force "${file}" "${temp_file}"; then
        print_prefix_error "Failed to create temp file of '${file}'."
        return 1
      fi
    }

    function copy_temp_file_to_file
    {
      is_file "${1}" &> /dev/null || return 0

      local -r file="${1}"
      local -r temp_file="${file}.tmp"

      is_file "${temp_file}" || return 1

      if ! cp --force "${temp_file}" "${file}"; then
        print_prefix_error "Failed to overwrite file '${file}'."
        return 1
      fi
    }

    function copy_this_file_to_other_file
    {
      if [[ "${2}" == "" ]]; then
        return 1
      fi

      is_file "${1}" || return 1
      cp --force "${1}" "${2}" || return 1
    }

    function delete_temp_file_of_file
    {
      is_file "${1}" &> /dev/null || return 0

      local -r file="${1}"
      local -r temp_file="${file}.tmp"

      is_file "${temp_file}" &> /dev/null || return 0

      if ! rm --force --recursive "${temp_file}"; then
        print_prefix_error "Failed to delete temp file '${temp_file}'."
        return 1
      fi
    }

    function append_to_file_correctly
    {
      if ! is_file "${2}" \
        || [[ -z "${1}" ]]; then
        return 1
      fi

      local -nr reference="${1}"
      local -r file="${2}"

      for line in ${reference[*]}; do
        if ! sudo echo -e "${line}" >> "${file}"; then
          print_prefix_error "Could not append to file."
          return 1
        fi
      done
    }

  # <summary>Interaction</summary>
    function execute_or_skip_prompt
    {
      local output=""

      if [[ ! -z "${1}" ]]; then
        output="${1} "
      fi

      for counter in $( seq 0 2 ); do
        echo -en "${output}[Y/n]: "
        read -r -p "" answer

        case "${answer}" in
          [Yy]* )
            return 0 ;;

          [Nn]* )
            return 255 ;;

          * )
            echo "Please answer 'Y' or 'N'." ;;
        esac
      done

      return 1
    }

  # <summary>Presentation/summary>
    function is_file
    {
      if [[ -z "${1}" ]] \
        || [[ ! -e "${1}" ]]; then
        print_prefix_error "File does not exist."
        return 1
      fi
    }

    function is_file_not_empty
    {
      if [[ -z "${1}" ]] \
        || [[ ! -s "${1}" ]]; then
        print_prefix_error "File is empty."
        return 1
      fi
    }

    function print_prefix_error
    {
       echo -e "${PREFIX_ERROR} ${1}"
    }

    function print_prefix_fail
    {
      echo -e "${PREFIX_FAIL} ${1}"
    }

    function print_prefix_note
    {
      echo -e "${PREFIX_NOTE} ${1}"
    }

    function print_prefix_pass
    {
      echo -e "${PREFIX_PASS} ${1}"
    }

    function print_suffix_error
    {
      echo -e "${1} ${SUFFIX_ERROR}"
    }

    function print_suffix_fail
    {
      echo -e "${1} ${SUFFIX_FAIL}"
    }

    function print_suffix_note
    {
      echo -e "${1} ${SUFFIX_NOTE}"
    }

    function print_suffix_pass
    {
      echo -e "${1} ${SUFFIX_PASS}"
    }

  # <summary>Variable data-type validation</summary>
    function get_comma_delimited_string_from_enum
    {
      local -n enum_reference="${1}"
      local -n delim_reference="${2}"

      for value in ${enum_reference[@]}; do
        delim_reference+="${value},"
      done

      if [[ ${delim_reference: -1} == "," ]]; then
        delim_reference="${delim_reference::-1}"
      fi
    }

    function is_enum
    {
      local -n reference="${1}"

      if ! [[ "${#reference[@]}" -gt 0 ]]; then
        return 1
      fi
    }

    function is_enum_empty
    {
      is_enum "${1}" || return 1
      local -n reference="${1}"

      for value in "${reference[@]}"; do
        if ! [[ ! -z "${value}" ]]; then
          return 1
        fi
      done
    }

    function is_int
    {
      if ! [[ "${1}" =~ ^[0-9]+$ ]] \
        && ! [[ "${1}" =~ ^[-][0-9]+$ ]]; then
        return 1
      fi
    }

  # <summary>System validation</summary>
    function get_free_memory
    {
      if [[ "${AVAILABLE_MEMORY}" -le 0 ]]; then
        return 1
      fi
    }

    function set_free_memory
    {
      AVAILABLE_MEMORY=$(( MAX_MEMORY - MIN_MEMORY ))
    }

# </functions>

# <code>
  declare_parameters
  unset declare_parameters
# </code