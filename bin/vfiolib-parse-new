#!/bin/bash/env bash

#
# Filename:         bashlib-vfio
# Description:
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <summary> Libraries </summary>
# <code>
    source bashlib-lists
    source bashlib-vars
    source vfiolib-all
# </code>

# <functions>
    # <summary> Public setters </summary>
        function SetParameters
        {
            declare -g GET_DEVICES_FOR_IOMMU_GROUP='ls /sys/kernel/iommu_groups/$IOMMU_GROUP_ID/devices/'
            declare -ag IOMMU_GROUP_ID_LIST=( $( ls /sys/kernel/iommu_groups/ | sort -n ) )
            declare -ag IOMMU_GROUPS_FOR_HOST_LIST IOMMU_GROUPS_FOR_VFIO_LIST
            declare -g _DEFAULT_DATABASE_FILE="/usr/local/etc/vfiolib_lspci_database"
            declare -g PARSE_OPTIONS=""
            declare -g REGEX_DOMAIN_ID='^[0-9A-F][1-9A-F]$'
        }

        function AreParametersValid
        {
            IsEnum "IOMMU_GROUP_ID_LIST" || return "$?"

            for VALUE in ${IOMMU_GROUP_ID_LIST[@]}; do
                IsInt "$VALUE" || return "$?"
            done

            return 0
        }

        function IsParseSelectionValid
        {
            if ! IsValidEnumOfIOMMUGroups "IOMMU_GROUPS_FOR_HOST_LIST"; then
                echo -e "An error occurred: Invalid allocation of devices for host."
                return 1
            fi

            if ! IsValidEnumOfIOMMUGroups "IOMMU_GROUPS_FOR_VFIO_LIST"; then
                echo -e "An error occurred: Invalid selection of devices for VFIO setup."
                return 1
            fi

            return 0
        }

    # <summary> Private setters </summary>
        function SetDeviceClass
        {
            IsString "$2" || return "$?"
            IsString "$1" || return "$?"
            local DEVICE="$1"
            local -n REFERENCE="$2"
            REFERENCE="$( lspci $PARSE_OPTIONS -ms $DEVICE | cut -d '"' -f 2 )"
            return 0
        }

        function SetDeviceDriver
        {
            IsString "$2" || return "$?"
            IsString "$1" || return "$?"
            local DEVICE="$1"
            local -n REFERENCE="$2"
            REFERENCE="$( lspci $PARSE_OPTIONS-ks "$DEVICE" | grep -i "driver" | cut -d " " -f 5 )"
            return 0
        }

        function SetDeviceHardwareID
        {
            IsString "$2" || return "$?"
            IsString "$1" || return "$?"
            local DEVICE="$1"
            local -n REFERENCE="$2"
            REFERENCE="$( lspci $PARSE_OPTIONS-ns $DEVICE | cut -d " " -f 3 )"
            return 0
        }

        function SetDeviceName
        {
            IsString "$2" || return "$?"
            IsString "$1" || return "$?"
            local DEVICE="$1"
            local -n REFERENCE="$2"
            REFERENCE="$( lspci $PARSE_OPTIONS-ms $DEVICE  | cut -d '"' -f 6 )"
            return 0
        }

        function SetDeviceVendor
        {
            IsString "$2" || return "$?"
            IsString "$1" || return "$?"
            local DEVICE="$1"
            local -n REFERENCE="$2"
            REFERENCE="$( lspci $PARSE_OPTIONS-ms $DEVICE | cut -d '"' -f 4 )"
            return 0
        }

    # <summary> Device validation </summary>
        function IsDeviceExternal
        {
            IsString "$1" || return "$?"
            local FULL_ID="$1"
            local -u DOMAIN_ID=$( echo "$FULL_ID" | cut -d ':' -f 2 )

            if echo "$DOMAIN_ID" | grep -E -q "$REGEX_DOMAIN_ID"; then
                return 0
            fi

            return 1
        }

        function IsDeviceVGA
        {
            IsString "$1" || return "$?"
            local FULL_ID="$1"
            local -l CLASS="$( lspci $PARSE_OPTIONS-ms $FULL_ID | cut -d '"' -f 2 )"

            case "$CLASS" in
                *"vga"* | *"graphic"* )
                    return 0 ;;
            esac

            return 1
        }

        function IsDeviceBindedToVFIO
        {
            IsString "$1" || return "$?"
            local FULL_ID="$1"
            local -l DRIVER="$( lspci $PARSE_OPTIONS-ks "$FULL_ID" | grep -i "driver" | cut -d " " -f 5 )"

            case "$DRIVER" in
                *"vfio-pci"* | *"vfio"* )
                    return 0 ;;
            esac

            return 1
        }

    # <summary> Device group validation </summary>
        function DoesIOMMUGroupHaveExternalDevices
        {
            IsInt "$1" || return "$?"
            local -i IOMMU_GROUP_ID="$1"
            local -a DEVICE_LIST="$( eval "$GET_DEVICES_FOR_IOMMU_GROUP" )"

            for DEVICE in ${DEVICE_LIST[@]}; do
                IsDeviceExternal "$DEVICE" && return 0
            done

            return 1
        }

        function DoesIOMMUGroupHaveVGADevice
        {
            IsInt "$1" || return "$?"
            local -i IOMMU_GROUP_ID="$1"
            local -a DEVICE_LIST="$( eval "$GET_DEVICES_FOR_IOMMU_GROUP" )"

            for DEVICE in ${DEVICE_LIST[@]}; do
                IsDeviceVGA "$DEVICE" && return 0
            done

            return 1
        }

        function IsIOMMUGroupNotBindedToVFIO
        {
            IsInt "$1" || return "$?"
            local -i IOMMU_GROUP_ID="$1"
            local -a DEVICE_LIST="$( eval "$GET_DEVICES_FOR_IOMMU_GROUP" )"

            for DEVICE in ${DEVICE_LIST[@]}; do
                IsDeviceBindedToVFIO "$DEVICE" || return 1
            done

            return 0
        }

        function IsValidEnumOfIOMMUGroups
        {
            IsEnum "$1" || return "$?"
            local -n REFERENCE="$1"

            for VALUE in ${REFERENCE[@]}; do
                IsInt "$VALUE" || return "$?"
            done
        }

    # <summary> Host validation </summary>
        function DoesHostHaveVGADevicesAfterVFIOSetup
        {
            local VALIDATE_VFIO_LIST=false
            IsBool "$_EXECUTE_VFIO_SETUP_MULTIBOOT_WITH_GRUB" && VALIDATE_VFIO_LIST=true

            if ! "$VALIDATE_VFIO_LIST"; then
                return 0
            fi

            local -n REFERENCE="IOMMU_GROUPS_FOR_HOST_LIST"

            for IOMMU_GROUP_ID in ${REFERENCE[@]}; do
                DoesIOMMUGroupHaveVGADevice "$IOMMU_GROUP_ID" && return 0
            done

            echo -e "An error occurred: No VGA devices allocated for host."
            return 1
        }

        function DoesHostHaveExistingVFIOSetup
        {
            # TODO: check if parsing from XML file

            local -n REFERENCE="IOMMU_GROUP_ID_LIST"

            for IOMMU_GROUP_ID in ${REFERENCE[@]}; do
                if ! IsIOMMUGroupNotBindedToVFIO "$IOMMU_GROUP_ID"; then
                    echo -e "An error occurred: Detected existing VFIO setup."
                    return 1
                fi
            done

            return 0
        }

    # <summary> Presentation </summary>
        function PrintThisIOMMUGroupDevices
        {
            IsInt "$1" || return "$?"
            local -i IOMMU_GROUP_ID="$1"
            local -a DEVICE_LIST="$( eval "$GET_DEVICES_FOR_IOMMU_GROUP" )"

            for DEVICE in ${DEVICE_LIST[@]}; do
                if IsDeviceExternal "$DEVICE"; then
                    local CLASS DRIVER HW_ID NAME VENDOR

                    SetDeviceClass "$DEVICE" "CLASS"
                    SetDeviceDriver "$DEVICE" "DRIVER"
                    SetDeviceHardwareID "$DEVICE" "HW_ID"
                    SetDeviceName "$DEVICE" "NAME"
                    SetDeviceVendor "$DEVICE" "VENDOR"

                    echo -e "\tSlot ID:\t$DEVICE"
                    echo -e "\tVendor name:\t$VENDOR"
                    echo -e "\tDevice name:\t$NAME"
                    echo -e "\tClass/Type:\t$CLASS"
                    echo -e "\tHardware ID:\t$HW_ID"
                    local DRIVER_OUTPUT="\tKernel driver:\t"

                    if IsString "$DRIVER"; then
                        echo -e "$DRIVER_OUTPUT$DRIVER"
                    else
                        echo -e "${DRIVER_OUTPUT}N/A"
                    fi

                    echo
                fi
            done

            return 0
        }

    # <summary> Interaction </summary>
        function AskToSelectThisIOMMUGroup
        {
            IsInt "$1" || return "$?"
            local -i IOMMU_GROUP_ID="$1"

            if AskToExecuteOrSkip "Select IOMMU group '$IOMMU_GROUP_ID'?"; then
                IOMMU_GROUPS_FOR_VFIO_LIST+=( "$IOMMU_GROUP_ID" )
            else
                IOMMU_GROUPS_FOR_HOST_LIST+=( "$IOMMU_GROUP_ID" )
            fi

            echo
            return 0
        }

        function ExportParseDatabase
        {
            if [[ ! -z "$_DEFAULT_DATABASE_FILE" ]] \
                && [[ ! -e "$_DEFAULT_DATABASE_FILE" ]] \
                && ! sudo mkdir -p $( dirname "$_DEFAULT_DATABASE_FILE" ) &> /dev/null; then
                echo -e "$_PREFIX_ERROR Failed to create directory for database file."
                return 1
            fi

            if [[ ! -z "$_DEFAULT_DATABASE_FILE" ]] \
                && [[ ! -e "$_DEFAULT_DATABASE_FILE" ]] \
                && ! sudo touch "$_DEFAULT_DATABASE_FILE" &> /dev/null; then
                echo -e "$_PREFIX_ERROR Failed to create database file."
                return 1
            fi

            if "$_DO_PARSE_DATABASE_FROM_CACHE" \
                && [[ ! -s "$_DEFAULT_DATABASE_FILE" ]] \
                && ! lspci -x >> "$_DEFAULT_DATABASE_FILE" &> /dev/null; then
                echo -e "$_PREFIX_ERROR Failed to reference local database and save to file."
                return 1
            fi

            if "$_DO_PARSE_DATABASE_FROM_INTERNET" \
                && [[ ! -s "$_DEFAULT_DATABASE_FILE" ]] \
                && ! lspci -q -x >> "$_DEFAULT_DATABASE_FILE" &> /dev/null; then
                echo -e "$_PREFIX_ERROR Failed to reference online database and/or save to file."
                return 1
            fi

            if [[ -s "$_DEFAULT_DATABASE_FILE" ]] \
                && ! lspci -F "$_DEFAULT_DATABASE_FILE" &> /dev/null; then
                echo -e "$_PREFIX_ERROR File is corrupt."
                return 1
            fi

            return 0
        }

        function SelectFileToExportDatabase
        {
            ExportParseDatabase || return "$?"
            read -r -p "Enter filename (leave blank for default): " _ANSWER

            if [[ ! -z "$_ANSWER" ]] \
                && [[ ! -e "$_ANSWER" ]]; then
                echo -e "$_PREFIX_ERROR File does not exist."
            fi

            if [[ ! -z "$_ANSWER" ]] \
                && [[ ! -s "$_ANSWER" ]]; then
                echo -e "$_PREFIX_ERROR File is empty."
            fi

            if [[ ! -z "$_ANSWER" ]] \
                && [[ -e "$_ANSWER" ]] \
                && [[ -s "$_ANSWER" ]]; then
                _DATABASE_FILE="$_ANSWER"
                return 0
            fi

            _DATABASE_FILE="$_DEFAULT_DATABASE_FILE"

            if [[ ! -e "$_DATABASE_FILE" ]]; then
                echo -e "$_PREFIX_ERROR File does not exist."
                return 1
            fi

            if [[ ! -s "$_DATABASE_FILE" ]]; then
                echo -e "$_PREFIX_ERROR File is empty."
                return 1
            fi

            return 0
        }

        function SelectIOMMUGroups
        {
            local -n REFERENCE="IOMMU_GROUP_ID_LIST"

            for IOMMU_GROUP_ID in ${REFERENCE[@]}; do
                SelectThisIOMMUGroup "$IOMMU_GROUP_ID"
            done

            return 0
        }

        function SelectThisIOMMUGroup
        {
            IsInt "$1" || return "$?"
            local -i IOMMU_GROUP_ID="$1"

            if ! DoesIOMMUGroupHaveExternalDevices "$1"; then
                IOMMU_GROUPS_FOR_HOST_LIST+=( "$IOMMU_GROUP_ID" )
                return 1
            fi

            PrintThisIOMMUGroupDevices "$1" || return "$?"
            AskToSelectThisIOMMUGroup "$1" || return "$?"
            return 0
        }

        function SelectMethodToParseDatabase
        {
            case true in
                "$_DO_PARSE_DATABASE_FROM_CACHE" | "$_DO_PARSE_DATABASE_FROM_FILE" | "$_DO_PARSE_DATABASE_FROM_INTERNET" )
                    return 0 ;;
            esac

            for COUNT in $( seq 0 2 ); do
                read -r -p "Select method of parsing IOMMU groups? [(F)ile/(I)nternal/(O)nline/(N)o]: " _ANSWER

                case "$_ANSWER" in
                    [Ff]* )
                        _DO_PARSE_DATABASE_FROM_FILE=true ;;

                    [Ii]* )
                        _DO_PARSE_DATABASE_FROM_CACHE=true ;;

                    [Oo]* )
                        _DO_PARSE_DATABASE_FROM_INTERNET=true ;;

                    [Nn]* )
                        return 255 ;;

                    * )
                        echo "Please answer 'F', 'I', 'O', or 'N'."
                        continue ;;
                esac

                return 0
            done

            echo -e "$_PREFIX_ERROR Failed to answer."
            return 1
        }

        function SetOptionsToImportDatabase
        {
            if ! "$_DO_PARSE_DATABASE_FROM_INTERNET" \
                && ! "$_DO_PARSE_DATABASE_FROM_FILE"; then
                return 0
            fi

            local FILE=""

            if [[ ! -s "$_DATABASE_FILE" ]]; then
                FILE="$_DATABASE_FILE"
            elif [[ ! -s "$_DEFAULT_DATABASE_FILE" ]]; then
                FILE="$_DEFAULT_DATABASE_FILE"
            else
                return 1
            fi

            if [[ ! -s "$FILE" ]]; then
                return 1
            fi

            PARSE_OPTIONS="-F $FILE"
            return 0
        }

    # <summary> Public functions </summary>
        function ExecuteParseSelection
        {
            SetParameters || return "$?"
            AreParametersValid || return "$?"
            SelectFileToExportDatabase || return "$?"          ## NOTE: somewhere, add support for parsing from XML.
            SelectMethodToParseDatabase || return "$?"
            SetOptionsToImportDatabase || return "$?"
            DoesHostHaveExistingVFIOSetup || return "$?"
            SelectIOMMUGroups
            IsParseSelectionValid || return "$?"
            DoesHostHaveVGADevicesAfterVFIOSetup || return "$?"
            return 0
        }
# </functions>

ExecuteParseSelection
# PrintEnum "IOMMU_GROUPS_FOR_HOST_LIST"
# PrintEnum "IOMMU_GROUPS_FOR_VFIO_LIST"