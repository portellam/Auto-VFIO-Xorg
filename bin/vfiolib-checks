#!/bin/bash/env bash

#
# Filename:         vfiolib-checks
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <sources>
    source vfiolib-common
    source vfiolib-globals
# </sources>

# <code>
    function AreRequiredLibrariesInstalled
    {
        for _LIBRARY in ${_REQUIRED_LIBRARIES[@]}; do
            IsInstalledPackage "$_LIBRARY" &> /dev/null || return 1
        done

        return 0
    }

    function GetRequiredLibraries
    {
        local -a _ALMA_REQUIRED_LIBRARIES=(
            "qemu-kvm"
            "virt-manager"
            "virt-viewer"
            "virt-install"
            "libvirt-daemon-config-network"
            "libvirt-daemon-kvm"
            "swtpm"
            "git"
            "make"
            "gcc"
            "g++"
            "ninja-build"
            "nasm"
            "iasl"
            "libuuid-devel"
            "glib2-devel"
            "pixman-devel"
            "spice-protocol"
            "spice-server-devel" )

        local -a _ARCH_REQUIRED_LIBRARIES=(
            "qemu-base"
            "virt-manager"
            "virt-viewer"
            "dnsmasq"
            "vde2"
            "bridge-utils"
            "openbsd-netcat"
            "libguestfs"
            "swtpm"
            "git"
            "make"
            "ninja"
            "nasm"
            "iasl"
            "pkg-config"
            "spice-protocol"
            "dmidecode"
            "gcc" )

        local -a _DEBIAN_REQUIRED_LIBRARIES=(
            "qemu-kvm"
            "virt-manager"
            "virt-viewer"
            "libvirt-daemon-system"
            "libvirt-clients"
            "bridge-utils"
            "swtpm"
            "mesa-utils"
            "git"
            "ninja-build"
            "nasm"
            "iasl"
            "pkg-config"
            "libglib2.0-dev"
            "libpixman-1-dev"
            "meson"
            "build-essential"
            "uuid-dev"
            "python-is-python3"
            "libspice-protocol-dev"
            "libspice-server-dev" )

        local -a _FEDORA_REQUIRED_LIBRARIES=(
            "qemu-kvm"
            "virt-manager"
            "virt-viewer"
            "virt-install"
            "libvirt-daemon-config-network"
            "libvirt-daemon-kvm"
            "swtpm"
            "g++"
            "ninja-build"
            "nasm"
            "iasl"
            "libuuid-devel"
            "glib2-devel"
            "pixman-devel"
            "spice-protocol"
            "spice-server-devel" )

        SetLibraries
        return "$?"
    }

    function InstallRequiredLibraries
    {
        if ! AreRequiredLibrariesInstalled \
            && ! InstallPackage "${_REQUIRED_LIBRARIES[@]}"; then
            echo -e "$_PREFIX_ERROR Required libraries are not installed."
            return 1
        fi

        return 0
    }

    function Is_IOMMU_Enabled
    {
        if ! compgen -G "/sys/kernel/iommu_groups/*/devices/*" &> /dev/null; then
            echo -e "$_PREFIX_ERROR System does not support IOMMU groups."
            return 1
        fi
    }

    function IsSystemdInstalled
    {
        if ! command -v systemd &> /dev/null; then
            echo -e "$_PREFIX_ERROR 'systemd' is not installed."
            return 1
        fi
    }

    function IsSystemSupported
    {
        if ! ( IsSystemdInstalled \
            && IsVirtualizationEnabled \
            && Is_IOMMU_Enabled \
            && IsSystemdInstalled ); then
            return 1
        fi

        if ! GetLibraries \
            || ( ! AreRequiredLibrariesInstalled \
                && ! InstallRequiredLibraries ); then
            echo -e "$_PREFIX_ERROR System is not supported in its current state."
            return 1
        fi

        return 0
    }

    function IsVirtualizationEnabled
    {
        if ! LC_ALL=C lscpu | grep Virtualization &> /dev/null \
            && ! grep -E -q --color=auto 'vmx|svm|0xc0f' /proc/cpuinfo &> /dev/null; then
            echo -e "$_PREFIX_ERROR System does not support hardware virtualization."
            return 1
        fi
    }

    function SetRequiredLibraries
    {
        case "$_PACKAGE_MANAGER" in
            "apt" )
                _REQUIRED_LIBRARIES=${_DEBIAN_REQUIRED_LIBRARIES[@]} ;;

            "dnf" | "yum" )
                case "$_OPERATING_SYSTEM" in
                    *"alma"* )
                        _REQUIRED_LIBRARIES=${_ALMA_REQUIRED_LIBRARIES[@]} ;;
                    * )
                        _REQUIRED_LIBRARIES=${_FEDORA_REQUIRED_LIBRARIES[@]} ;;
                esac ;;

            "pacman" )
                _REQUIRED_LIBRARIES=${_ARCH_REQUIRED_LIBRARIES[@]} ;;

            * )
                return 1 ;;
        esac

        return 0
    }
# </code>

# <params>
    declare -g _IS_SYSTEM_SUPPORTED=false
    declare -g _REQUIRED_LIBRARIES=( )
# </params>