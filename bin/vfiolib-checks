#!/bin/false

#
# Filename:         vfiolib-checks
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <sources>
    source vfiolib-common
# </sources>

# <functions>
    # <summary> Public </summary>
        # <summary> Global setters </summary>
            function SetParameters
            {
                if [[ ! -z "${_ARE_CHECKS_PARAMS_SET}" ]] \
                    && "${_ARE_CHECKS_PARAMS_SET}"; then
                    return 0
                fi

                declare -g _ARE_CHECKS_PARAMS_SET=true

                declare -g _USER="${USER}"
                SetUser &> /dev/null
                declare -ga _REQUIRED_LIBRARIES=( )

                # <remarks> Execution Flags </remarks>
                declare -g _IS_SYSTEM_SUPPORTED=false
            }

        function IsSystemSupported
        {
            if ! ( IsSystemdInstalled \
                && IsVirtualizationEnabled \
                && IsIOMMUEnabled \
                && IsSystemdInstalled ); then
                return 1
            fi

            GetRequiredLibraries

            if ! SetRequiredLibraries \
                || ( ! AreRequiredLibrariesInstalled \
                    && ! InstallRequiredLibraries ); then
                echo -e "${_PREFIX_ERROR} System is not supported in its current state."
                return 1
            fi

            return 0
        }

    # <summary> Private </summary>
        # <summary> Local getters </summary>
            function GetRequiredLibraries
            {
                local -a ALMA_REQUIRED_LIBRARIES=(
                    "qemu-kvm"
                    "virt-manager"
                    "virt-viewer"
                    "virt-install"
                    "libvirt-daemon-config-network"
                    "libvirt-daemon-kvm"
                    "swtpm"
                    "git"
                    "make"
                    "gcc"
                    "g++"
                    "ninja-build"
                    "nasm"
                    "iasl"
                    "libuuid-devel"
                    "glib2-devel"
                    "pixman-devel"
                    "spice-protocol"
                    "spice-server-devel" )

                local -a ARCH_REQUIRED_LIBRARIES=(
                    "qemu-base"
                    "virt-manager"
                    "virt-viewer"
                    "dnsmasq"
                    "vde2"
                    "bridge-utils"
                    "openbsd-netcat"
                    "libguestfs"
                    "swtpm"
                    "git"
                    "make"
                    "ninja"
                    "nasm"
                    "iasl"
                    "pkg-config"
                    "spice-protocol"
                    "dmidecode"
                    "gcc" )

                local -a DEBIAN_REQUIRED_LIBRARIES=(
                    "qemu-kvm"
                    "virt-manager"
                    "virt-viewer"
                    "libvirt-daemon-system"
                    "libvirt-clients"
                    "bridge-utils"
                    "swtpm"
                    "mesa-utils"
                    "git"
                    "ninja-build"
                    "nasm"
                    "iasl"
                    "pkg-config"
                    "libglib2.0-dev"
                    "libpixman-1-dev"
                    "meson"
                    "build-essential"
                    "uuid-dev"
                    "python-is-python3"
                    "libspice-protocol-dev"
                    "libspice-server-dev" )

                local -a FEDORA_REQUIRED_LIBRARIES=(
                    "qemu-kvm"
                    "virt-manager"
                    "virt-viewer"
                    "virt-install"
                    "libvirt-daemon-config-network"
                    "libvirt-daemon-kvm"
                    "swtpm"
                    "g++"
                    "ninja-build"
                    "nasm"
                    "iasl"
                    "libuuid-devel"
                    "glib2-devel"
                    "pixman-devel"
                    "spice-protocol"
                    "spice-server-devel" )

                return 0
            }

        # <summary> Local setters </summary>
            function SetRequiredLibraries
            {
                case "${_PACKAGE_MANAGER}" in
                    "apt" )
                        _REQUIRED_LIBRARIES=${DEBIAN_REQUIRED_LIBRARIES[@]} ;;

                    "dnf" | "yum" )
                        case "${_OPERATING_SYSTEM}" in
                            *"alma"* )
                                _REQUIRED_LIBRARIES=${ALMA_REQUIRED_LIBRARIES[@]} ;;
                            * )
                                _REQUIRED_LIBRARIES=${FEDORA_REQUIRED_LIBRARIES[@]} ;;
                        esac ;;

                    "pacman" )
                        _REQUIRED_LIBRARIES=${ARCH_REQUIRED_LIBRARIES[@]} ;;

                    * )
                        return 1 ;;
                esac

                return 0
            }

            function SetUser
            {
                if [[ "${SUDO_USER}" != "" ]]; then
                    _USER="${SUDO_USER}"
                    return 0
                fi

                if [[ "${USER}" != "" ]]; then
                    _USER="${USER}"
                    return 0
                fi

                return 1
            }

        function AreRequiredLibrariesInstalled
        {
            for LIBRARY in ${_REQUIRED_LIBRARIES[@]}; do
                IsInstalledPackage "${LIBRARY}" &> /dev/null || return 1
            done

            return 0
        }

        function InstallRequiredLibraries
        {
            if ! AreRequiredLibrariesInstalled \
                && ! InstallPackage "${_REQUIRED_LIBRARIES[@]}"; then
                echo -e "${_PREFIX_ERROR} Required libraries are not installed."
                return 1
            fi

            return 0
        }

        function IsIOMMUEnabled
        {
            if ! compgen -G "/sys/kernel/iommu_groups/*/devices/*" &> /dev/null; then
                echo -e "${_PREFIX_ERROR} System does not support IOMMU groups."
                return 1
            fi
        }

        function IsSystemdInstalled
        {
            if ! command -v systemd &> /dev/null; then
                echo -e "${_PREFIX_ERROR} 'systemd' is not installed."
                return 1
            fi
        }

        function IsVirtualizationEnabled
        {
            if ! LC_ALL=C lscpu | grep Virtualization &> /dev/null \
                && ! grep -E -q --color=auto 'vmx|svm|0xc0f' /proc/cpuinfo &> /dev/null; then
                echo -e "${_PREFIX_ERROR} System does not or cannot support hardware virtualization."
                return 1
            fi
        }
# </functions>

# <main>
    SetParameters
    unset SetParameters
# </main>