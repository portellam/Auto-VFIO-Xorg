#!/bin/false

#
# Filename:         vfiolib-parse
# Description:      Reference a database, parse IOMMU groups, and save to lists.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <sources>
    source vfiolib-common
# </sources>

# <functions>
    # <summary> Public </summary>
        function ExecuteParseSelection
        {
            AreParametersValid || return "${?}"
            AskToSelectDatabase
            SetExitCode

            if GetPassExitCode; then
                AskToParseFromXML
                AreParsedIOMMUGroupsValid || return "${?}"
                SelectIOMMUGroups
                AreSelectedIOMMUGroupsValid || return "${?}"

                if ! "${_EXECUTE_VFIO_SETUP_MULTIBOOT_WITH_GRUB}"; then
                    IsParseSelectionOfVGAValid || return "${?}"
                fi

                return 0
            fi

            return "${_LAST_EXIT_CODE}"
        }

        # <summary> Global getters </summary>
            function GetListsForSelection
            {
                # IsEnum "${4}" || return "${?}"    # NOTE: this validation is not necessary, as this will always work.
                # IsEnum "${3}" || return "${?}"
                # IsEnum "${2}" || return "${?}"
                # IsValidEnumOfIOMMUGroups "${1}" || return "${?}"
                local -n REFERENCE="${1}"
                local -n DRIVER_REFERENCE="${2}"
                local -n STUB_HWID_REFERENCE="${3}"
                local -n VFIO_HWID_REFERENCE="${4}"

                for IOMMU_GROUP_ID in ${REFERENCE[@]}; do
                    local -a DEVICE_LIST="$( eval "${_GET_DEVICES_FOR_IOMMU_GROUP}" )"

                    for DEVICE in ${DEVICE_LIST[@]}; do
                        local DRIVER=""
                        local HWID=""
                        SetDeviceDriver "${DEVICE}" "DRIVER"
                        SetDeviceHardwareID "${DEVICE}" "HWID"

                        if [[ ! -z "${DRIVER}" ]] \
                            && IsDeviceNotExcluded "${DEVICE}"; then
                            DRIVER_REFERENCE+=( "${DRIVER}" )
                        fi

                        if [[ ! -z "${HWID}" ]]; then
                            if IsDeviceForPCISTUB "${DEVICE}"; then
                                STUB_HWID_REFERENCE+=( "${HWID}" )
                            else
                                VFIO_HWID_REFERENCE+=( "${HWID}" )
                            fi
                        fi
                    done
                done

                IFS=$'\n'
                DRIVER_REFERENCE=( $( sort -u <<<"${DRIVER_REFERENCE[*]}" ) )
                STUB_HWID_REFERENCE=( $( sort -u <<<"${STUB_HWID_REFERENCE[*]}" ) )
                VFIO_HWID_REFERENCE=( $( sort -u <<<"${VFIO_HWID_REFERENCE[*]}" ) )
                unset IFS

                if IsEmptyEnum "DRIVER_REFERENCE"; then
                    if IsEmptyEnum "STUB_HWID_REFERENCE" \
                        && IsEmptyEnum "VFIO_HWID_REFERENCE"; then
                        return 0
                    fi

                    echo -e "${_PREFIX_ERROR} No drivers or hardware IDs found for selection."
                    return 1
                fi

                return 0
            }

            function GetNameForFirstVGADeviceInIOMMUGroup
            {
                [[ ! -z "${2}" ]] || return "${?}"
                IsInt "${1}" || return "${?}"
                local -i IOMMU_GROUP_ID="${1}"
                local -n DEVICE_NAME="${2}"
                local -a DEVICE_LIST="$( eval "${_GET_DEVICES_FOR_IOMMU_GROUP}" )"
                local NAME=""

                for DEVICE in ${DEVICE_LIST[@]}; do
                    if ! IsDeviceVGA "${DEVICE}"; then
                        continue
                    fi

                    SetDeviceName "${DEVICE}" "NAME" && break
                done

                if [[ -z "${NAME}" ]]; then
                    echo -e "${_PREFIX_ERROR} Failed to find device name of any VGA device in IOMMU group '${IOMMU_GROUP_ID}'."
                    return 1
                fi

                DEVICE_NAME="${NAME}"
                return 0
            }

        # <summary> Global setters </summary>
            function SetParameters
            {
                if [[ ! -z "${_ARE_PARSE_PARAMS_SET}" ]] \
                    && "${_ARE_PARSE_PARAMS_SET}"; then
                    return 0
                fi

                declare -g _ARE_PARSE_PARAMS_SET=true

                # <remarks> IOMMU groups lists and validation. </remarks>
                declare -gr _GET_DEVICES_FOR_IOMMU_GROUP='ls /sys/kernel/iommu_groups/${IOMMU_GROUP_ID}/devices/'
                declare -gA _DEVICE_DRIVER_XML_LIST
                declare -ga _IOMMU_GROUP_ID_LIST=( $( ls /sys/kernel/iommu_groups/ | sort -n ) )
                declare -ga _IOMMU_GROUPS_FOR_HOST_LIST=( )
                declare -ga _IOMMU_GROUPS_FOR_VFIO_LIST=( )
                declare -ga _IOMMU_GROUPS_WITH_VGA_FOR_HOST_LIST=( )
                declare -gr _REGEX_DOMAIN_ID='^[0-9A-F][1-9A-F]$'

                # <remarks> Parse arguments </remarks>
                declare -gr _GET_PARSE_FROM_XML='echo "cat /*" | xmllint  --shell ${_XML_FILE} | grep -v "^/ >" | grep -Ev xml'
                declare -g _PARSE_OPTIONS=""
                declare -gr _DEFAULT_DATABASE_FILE="${_BACKUPS_PATH}/parse.txt"
                declare -gr _DEFAULT_XML_FILE="${_BACKUPS_PATH}/parse.xml"
                declare -g _DATABASE_FILE="${_DEFAULT_DATABASE_FILE}"
                declare -g _XML_FILE="${_DEFAULT_XML_FILE}"

                # <remarks> Execution Flags </remarks>
                declare -g _DO_PARSE_DATABASE_FROM_CACHE=false
                declare -g _DO_PARSE_DATABASE_FROM_FILE=false
                declare -g _DO_PARSE_DATABASE_FROM_INTERNET=false
                declare -g _DO_PARSE_DATABASE_FROM_XML=false
                declare -g _DOES_XML_HAVE_VFIO=true
                declare -g _DOES_HOST_HAVE_VFIO=true
                declare -g _HAS_ARG_PARSE_IOMMU=false
                declare -g _HAS_ARG_PARSE_IOMMU_SELECT_ALL=false
                declare -g _HAS_ARG_PARSE_IOMMU_SELECT_ALL_NON_VGA=false
                declare -g _HAS_ARG_PARSE_IOMMU_SELECT_SOME=false
                return 0
            }

            function AreParametersValid
            {
                IsEnum "_IOMMU_GROUP_ID_LIST" || return "${?}"

                for VALUE in ${_IOMMU_GROUP_ID_LIST[@]}; do
                    IsInt "${VALUE}" || return "${?}"
                done

                return 0
            }

            function AreSelectedIOMMUGroupsValid
            {
                if ! IsValidEnumOfIOMMUGroups "_IOMMU_GROUPS_FOR_HOST_LIST"; then
                    echo -e "${_PREFIX_ERROR} Invalid allocation of devices for host."
                    return 1
                fi

                if ! IsValidEnumOfIOMMUGroups "_IOMMU_GROUPS_FOR_VFIO_LIST"; then
                    echo -e "${_PREFIX_ERROR} Invalid selection of devices for VFIO setup."
                    return 1
                fi

                return 0
            }

            function IsParseSelectionOfVGAValid
            {
                if ! "${_EXECUTE_VFIO_SETUP_MULTIBOOT_WITH_GRUB}" \
                    && ! IsValidEnumOfIOMMUGroups "_IOMMU_GROUPS_WITH_VGA_FOR_HOST_LIST"; then
                    echo -e "${_PREFIX_ERROR} No groups with VGA devices selected."
                    return 1
                fi

                return 0
            }

    # <summary> Private </summary
        # <summary> Database </summary
            function ExportParseDatabase
            {
                DoesHostNotHaveExistingVFIOSetup || return "${?}"

                if [[ -z "${_DATABASE_FILE}" ]]; then
                    echo -e "${_PREFIX_ERROR} Database filename is invalid."
                    return 1
                fi

                if [[ ! -z "${_DATABASE_FILE}" ]] \
                    && [[ ! -e "${_DATABASE_FILE}" ]] \
                    && ! sudo mkdir -p $( dirname "${_DATABASE_FILE}" ) &> /dev/null; then
                    echo -e "${_PREFIX_ERROR} Failed to create directory for database file."
                    return 1
                fi

                if [[ ! -z "${_DATABASE_FILE}" ]] \
                    && [[ ! -e "${_DATABASE_FILE}" ]] \
                    && ! sudo touch "${_DATABASE_FILE}" &> /dev/null; then
                    echo -e "${_PREFIX_ERROR} Failed to create database file."
                    return 1
                fi

                if "${_DO_PARSE_DATABASE_FROM_CACHE}" \
                    && [[ ! -s "${_DATABASE_FILE}" ]] \
                    && ! lspci -x >> "${_DATABASE_FILE}" &> /dev/null; then
                    echo -e "${_PREFIX_ERROR} Failed to reference local database and save to file."
                    return 1
                fi

                if "${_DO_PARSE_DATABASE_FROM_INTERNET}" \
                    && [[ ! -s "${_DATABASE_FILE}" ]] \
                    && ! lspci -q -x >> "${_DATABASE_FILE}" &> /dev/null; then
                    echo -e "${_PREFIX_ERROR} Failed to reference online database and/or save to file."
                    return 1
                fi

                IsDatabaseFile "${_DATABASE_FILE}" || return "${?}"
                return 0
            }

            function ImportParseDatabase
            {
                DoesHostNotHaveExistingVFIOSetup || return "${?}"
                IsDatabaseFile "${_DATABASE_FILE}" || return "${?}"
                _PARSE_OPTIONS="-F ${_DATABASE_FILE}"
                return 0
            }

            function IsDatabaseFile
            {
                local FILE="${1}"

                if [[ ! -e "${1}" ]]; then
                    echo -e "${_PREFIX_ERROR} Failed to find database file."
                    return 1
                fi

                if [[ -s "${FILE}" ]] \
                    && ! lspci -F "${FILE}" &> /dev/null; then
                    echo -e "${_PREFIX_ERROR} Database file is corrupt."
                    return 1
                fi

                return 0
            }

            function AreParsedIOMMUGroupsValid
            {
                if "${_DO_PARSE_DATABASE_FROM_XML}"; then
                    AreXMLLibrariesInstalled || return "${?}"

                    if ! ImportParseXML &> /dev/null; then
                        ImportParseDatabase || return "${?}"
                        ExportParseXML || return "${?}"
                        ImportParseXML || return "${?}"
                    fi
                else
                    if ! ImportParseDatabase &> /dev/null; then
                        ExportParseDatabase || return "${?}"
                    fi
                fi

                return 0
            }

        # <summary> XML </summary
            function AreXMLLibrariesInstalled
            {
                if ! command -v "xmllint" &> /dev/null \
                    # || ! command -v "xmlstarlet" &> /dev/null \
                    then
                    echo -e "$_PREFIX_ERROR Required 'XML' libraries are not installed."
                    return 1
                fi

                return 0
            }

            function ExportParseXML
            {
                DoesXMLNotHaveExistingVFIOSetup || return "${?}"

                local -a OUTPUT=( )
                local -a IOMMU_OUTPUT=( )

                for IOMMU_GROUP_ID in $( ls -1v /sys/kernel/iommu_groups/ | sort -h ); do
                    local -a DEVICE_OUTPUT=( )
                    local LINE_IOMMU_ID="id=\"${IOMMU_GROUP_ID}\""

                    for DEVICE in $( eval "${_GET_DEVICES_FOR_IOMMU_GROUP}" ); do
                        # local -u _DEVICE_BUS_ID=${DEVICE:5}
                        # local DEVICE_CLASS="$( lspci -ms ${DEVICE} | cut -d \" -f 2 )"
                        local DEVICE_DRIVER=$( lspci -ks ${DEVICE} | grep -i "driver" | cut -d " " -f 5 )
                        # local DEVICE_HWID=$( lspci -ns ${DEVICE} | cut -d " " -f 3 )
                        # local DEVICE_NAME="$( lspci -ms ${DEVICE} | cut -d \" -f 6 )"
                        # local DEVICE_VENDOR="$( lspci -ms ${DEVICE} | cut -d \" -f 4 )"
                        # local LINE_DEVICE_ID="dev_id=\"${DEVICE_BUS_ID}\""
                        local LINE_DEVICE_ID="dev_id=\"${DEVICE}\""
                        # local LINE_DEVICE_CLASS="class=\"${DEVICE_CLASS}\""
                        local LINE_DEVICE_DRIVER="driver=\"${DEVICE_DRIVER}\""
                        # local LINE_DEVICE_HWID="hw_id=\"${DEVICE_HWID}\""
                        # local LINE_DEVICE_NAME="name=\"${DEVICE_NAME}\""
                        # local LINE_DEVICE_VENDOR="vendor=\"${DEVICE_VENDOR}\""
                        # local LINE_DEVICE="${LINE_DEVICE_ID} ${LINE_DEVICE_HWID} ${LINE_DEVICE_DRIVER} ${LINE_DEVICE_CLASS} ${LINE_DEVICE_VENDOR} ${LINE_DEVICE_NAME}"
                        local LINE_DEVICE="${LINE_DEVICE_ID} ${LINE_DEVICE_DRIVER}"
                        local LINE_IOMMU="<iommu ${LINE_IOMMU_ID} ${LINE_DEVICE}/>"

                        DEVICE_OUTPUT+=(
                            "\t${LINE_IOMMU}"
                        )
                    done

                    IOMMU_OUTPUT+=(
                        "${DEVICE_OUTPUT[@]}"
                    )
                done

                OUTPUT=(
                    "<xml>"
                    "${IOMMU_OUTPUT[@]}"
                    "</xml>"
                )

                IFS=$'\n'

                if ! sudo echo -e "${OUTPUT[*]}" > "${_XML_FILE}"; then
                    echo -e "${_PREFIX_ERROR} Failed to write to file '${FILE}'."
                fi

                unset IFS
                return 0
            }

            function ImportParseXML
            {
                IsXMLValid || return "${?}"

                IFS=$'\n'
                local -a XML_CONTENTS=( $( eval "${_GET_PARSE_FROM_XML}" ) )
                unset IFS

                for LINE in "${XML_CONTENTS[@]}"; do
                    local DRIVER=$( echo "${LINE}" | cut -d '"' -f 6 )
                    local DEVICE=$( echo "${LINE}" | cut -d '"' -f 4 )
                    _DEVICE_DRIVER_XML_LIST["${DEVICE}"]="${DRIVER}"
                done

                if ! IsEnum "_DEVICE_DRIVER_XML_LIST"; then
                    echo -e "${_PREFIX_ERROR} XML file is empty."
                    return 1
                fi

                return 0
            }

            function IsXMLValid
            {
                # local -a DEVICE_LIST=$( lspci -mn | cut -d ' ' -f 1 )

                # if [[ "${#DEVICE_LIST[@]}" -ne "${#_DEVICE_DRIVER_XML_LIST[@]}" ]]; then
                #     return 1
                # fi

                # for KEY in ${!DEVICE_LIST[@]}; do
                #     local THIS_DEVICE="${DEVICE_LIST[KEY]}"
                #     local THAT_DEVICE="${_DEVICE_DRIVER_XML_LIST}"
                # done

                if ! xmllint "${_XML_FILE}" &> /dev/null; then
                    echo -e "${_PREFIX_ERROR} XML file '${FILE}' is invalid."
                    return 1
                fi

                DoesXMLNotHaveExistingVFIOSetup || return "${?}"
                return 0
            }

        # <summary> Local setters </summary>
            function SetDeviceClass
            {
                [[ ! -z "${2}" ]] || return "${?}"
                [[ ! -z "${1}" ]] || return "${?}"
                local DEVICE="${1}"
                local -n REFERENCE="${2}"
                REFERENCE="$( lspci ${_PARSE_OPTIONS} -ms ${DEVICE} | cut -d '"' -f 2 )"
                return 0
            }

            function SetDeviceDriver
            {
                [[ ! -z "${2}" ]] || return "${?}"
                [[ ! -z "${1}" ]] || return "${?}"
                local DEVICE="${1}"
                local -n REFERENCE="${2}"

                if ! "${_DO_PARSE_DATABASE_FROM_XML}"; then
                    REFERENCE="$( lspci ${_PARSE_OPTIONS} -ks "${DEVICE}" | grep -i "driver" | cut -d " " -f 5 )"
                else
                    REFERENCE="${_DEVICE_DRIVER_XML_LIST["${DEVICE}"]}"
                fi

                return 0
            }

            function SetDeviceHardwareID
            {
                [[ ! -z "${2}" ]] || return "${?}"
                [[ ! -z "${1}" ]] || return "${?}"
                local DEVICE="${1}"
                local -n REFERENCE="${2}"
                REFERENCE="$( lspci ${_PARSE_OPTIONS} -ns ${DEVICE} | cut -d " " -f 3 )"
                return 0
            }

            function SetDeviceName
            {
                [[ ! -z "${2}" ]] || return "${?}"
                [[ ! -z "${1}" ]] || return "${?}"
                local DEVICE="${1}"
                local -n REFERENCE="${2}"
                REFERENCE="$( lspci ${_PARSE_OPTIONS} -ms ${DEVICE}  | cut -d '"' -f 6 )"
                return 0
            }

            function SetDeviceVendor
            {
                [[ ! -z "${2}" ]] || return "${?}"
                [[ ! -z "${1}" ]] || return "${?}"
                local DEVICE="${1}"
                local -n REFERENCE="${2}"
                REFERENCE="$( lspci ${_PARSE_OPTIONS} -ms ${DEVICE} | cut -d '"' -f 4 )"
                return 0
            }

        # <summary> Device validation </summary>
            function IsDeviceDriverNotExcluded
            {
                [[ ! -z "${1}" ]] || return 1
                local DRIVER="${1}"

                case "${DRIVER}" in
                    *"snd_hda_intel"* )
                        return 1 ;;
                esac

                return 0
            }

            function IsDeviceDriverNotVFIO
            {
                [[ ! -z "${1}" ]] || return 1
                local DRIVER="${1}"

                case "${DRIVER}" in
                    *"vfio-pci"* | *"vfio"* )
                        return 1 ;;
                esac

                return 0
            }

            function IsDeviceExternal
            {
                [[ ! -z "${1}" ]] || return "${?}"
                local DEVICE="${1}"
                local -u DOMAIN_ID=$( echo "${DEVICE}" | cut -d ':' -f 2 )

                if echo "${DOMAIN_ID}" | grep -E -q "${_REGEX_DOMAIN_ID}"; then
                    return 0
                fi

                return 1
            }

            # <note> Update here for devices' that benefit from pci-stub dummy driver. </note>
            function IsDeviceForPCISTUB
            {
                [[ ! -z "${1}" ]] || return "${?}"
                local DEVICE="${1}"
                local -l CLASS="$( lspci ${_PARSE_OPTIONS} -ms ${DEVICE} | cut -d '"' -f 2 )"

                case "${CLASS}" in
                    *"usb"* )
                        return 0 ;;
                esac

                return 1
            }

            function IsDeviceNotBindedToVFIO
            {
                [[ ! -z "${1}" ]] || return 1
                local DEVICE="${1}"
                local DRIVER=""
                SetDeviceDriver "${DEVICE}" "DRIVER"
                IsDeviceDriverNotVFIO "${DRIVER}" || return 1
                return 0
            }

            function IsDeviceNotExcluded
            {
                [[ ! -z "${1}" ]] || return 1
                local DEVICE="${1}"
                local DRIVER=""
                SetDeviceDriver "${DEVICE}" "DRIVER"
                IsDeviceDriverNotExcluded "${DRIVER}" || return 1
                return 0
            }

            function IsDeviceNotExternal
            {
                [[ ! -z "${1}" ]] || return 1
                local DEVICE="${1}"
                local DRIVER=""
                SetDeviceDriver "${DEVICE}" "DRIVER"
                IsDeviceExternal "${DEVICE}" || return 1
                return 0
            }

            function IsDeviceVGA
            {
                [[ ! -z "${1}" ]] || return 1
                local DEVICE="${1}"
                local -l CLASS="$( lspci ${_PARSE_OPTIONS} -ms ${DEVICE} | cut -d '"' -f 2 )"

                case "${CLASS}" in
                    *"vga"* | *"graphic"* | *"display"* )
                        return 0 ;;
                esac

                return 1
            }

        # <summary> Device group validation </summary>
            function AddSomeIOMMUGroupsParseList
            {
                local REGEX_FOR_RANGE_OF_NUMS='^[0-9]+[-][0-9]+$'
                local -a IOMMU_GROUPS_TEMP_LIST

                if echo "${1}" | grep -E -q "${REGEX_FOR_RANGE_OF_NUMS}"; then
                    local -i RANGE_START=$( echo "${1}" | cut -d '-' -f 1 )
                    local -i RANGE_STOP=$( echo "${1}" | cut -d '-' -f 2 )
                    IsIOMMUGroupIDValid "${RANGE_START}" || return 1
                    IsIOMMUGroupIDValid "${RANGE_STOP}" || return 1
                    IOMMU_GROUPS_TEMP_LIST+=( $( seq "${RANGE_START}" "${RANGE_STOP}" ) )

                elif IsInt "${1}"; then
                    IsIOMMUGroupIDValid "${1}" || return 1
                    IOMMU_GROUPS_TEMP_LIST+=( "${1}" )

                else
                    echo -e "${_PREFIX_ERROR} Invalid IOMMU group ID(s)."
                    return 1
                fi

                IFS=$'\n'
                IOMMU_GROUPS_TEMP_LIST=( $( sort -hu <<<"${IOMMU_GROUPS_TEMP_LIST[*]}" ) )
                unset IFS

                for IOMMU_GROUP_ID in ${IOMMU_GROUPS_TEMP_LIST[@]}; do
                    if DoesIOMMUGroupHaveExternalDevices "${IOMMU_GROUP_ID}"; then
                        _IOMMU_GROUPS_FOR_VFIO_LIST+=( "${IOMMU_GROUP_ID}" )
                        break
                    fi
                done

                for IOMMU_GROUP_ID in ${_IOMMU_GROUP_ID_LIST[@]}; do
                    local IS_IN_VFIO_LIST=false

                    for THIS_IOMMU_GROUP_ID in ${_IOMMU_GROUPS_FOR_VFIO_LIST[@]}; do
                        if [[ "${THIS_IOMMU_GROUP_ID}" -eq "${IOMMU_GROUP_ID}" ]]; then
                            IS_IN_VFIO_LIST=true
                            break
                        fi
                    done

                    if "$IS_IN_VFIO_LIST"; then
                        continue
                    fi

                    if DoesIOMMUGroupHaveVGADevice "${IOMMU_GROUP_ID}"; then
                        _IOMMU_GROUPS_WITH_VGA_FOR_HOST_LIST+=( "${IOMMU_GROUP_ID}" )
                    else
                        _IOMMU_GROUPS_FOR_HOST_LIST+=( "${IOMMU_GROUP_ID}" )
                    fi
                done

                return 0
            }

            function AddValidIOMMUGroupsParseList
            {
                SetParseParameters

                for IOMMU_GROUP_ID in ${_IOMMU_GROUP_ID_LIST[@]}; do
                    local -a DEVICE_LIST=( $( eval "${_GET_IOMMU_GROUP_DEVICE_LIST}" ) )

                    if ! DoesIOMMUGroupHaveExternalDevices "${IOMMU_GROUP_ID}"; then
                        _IOMMU_GROUPS_FOR_VFIO_LIST+=( "${IOMMU_GROUP_ID}" )
                        break
                    else
                        if DoesIOMMUGroupHaveVGADevice "${IOMMU_GROUP_ID}"; then
                            _IOMMU_GROUPS_WITH_VGA_FOR_HOST_LIST+=( "${IOMMU_GROUP_ID}" )
                        else
                            _IOMMU_GROUPS_FOR_HOST_LIST+=( "${IOMMU_GROUP_ID}" )
                        fi
                    fi
                done

                return 0
            }

            function DoesIOMMUGroupHaveExternalDevices
            {
                IsInt "${1}" || return "${?}"
                local -i IOMMU_GROUP_ID="${1}"
                local -a DEVICE_LIST="$( eval "${_GET_DEVICES_FOR_IOMMU_GROUP}" )"

                for DEVICE in ${DEVICE_LIST[@]}; do
                    IsDeviceExternal "${DEVICE}" && return 0
                done

                return 1
            }

            function DoesIOMMUGroupHaveVGADevice
            {
                IsInt "${1}" || return "${?}"
                local -i IOMMU_GROUP_ID="${1}"
                local -a DEVICE_LIST="$( eval "${_GET_DEVICES_FOR_IOMMU_GROUP}" )"

                for DEVICE in ${DEVICE_LIST[@]}; do
                    IsDeviceVGA "${DEVICE}" && return 0
                done

                echo -e "${_PREFIX_ERROR} Please enter valid IOMMU group ID which contains one or more VGA devices."
                return 1
            }

            function DoesListHaveVGADevice
            {
                local -n REFERENCE="${1}"

                if [[ "${#REFERENCE[@]}" -eq 0 ]]; then
                    return 1
                fi

                for IOMMU_GROUP_ID in ${REFERENCE[@]}; do
                    DoesIOMMUGroupHaveVGADevice "${IOMMU_GROUP_ID}" &> /dev/null && return 0
                done

                return 1
            }

            function IsIOMMUGroupNotBindedToVFIO
            {
                IsInt "${1}" || return "${?}"
                local -i IOMMU_GROUP_ID="${1}"
                local -a DEVICE_LIST="$( eval "${_GET_DEVICES_FOR_IOMMU_GROUP}" )"

                for DEVICE in ${DEVICE_LIST[@]}; do
                    IsDeviceNotBindedToVFIO "${DEVICE}" || return 1
                done

                return 0
            }

            function IsIOMMUGroupIDValid
            {
                if ! IsInt "${1}" \
                    || IsLessOrEqual "${1}" "0" \
                    || IsGreaterOrEqual "${1}" "${_IOMMU_GROUP_ID_LIST[-1]}"; then
                    echo -e "${_PREFIX_ERROR} Please enter valid IOMMU group ID(s), between 0 and ${_IOMMU_GROUP_ID_LIST[-1]}."
                    return 1
                fi

                return 0
            }

            function IsValidEnumOfIOMMUGroups
            {
                IsEnum "${1}" || return "${?}"
                local -n REFERENCE="${1}"

                for VALUE in ${REFERENCE[@]}; do
                    IsInt "${VALUE}" || return "${?}"
                done
            }

        # <summary> Host validation </summary>
            function DoesHostNotHaveExistingVFIOSetup
            {
                for IOMMU_GROUP_ID in ${_IOMMU_GROUP_ID_LIST[@]}; do
                    if ! IsIOMMUGroupNotBindedToVFIO "${IOMMU_GROUP_ID}"; then
                        echo -e "${_PREFIX_ERROR} Detected existing VFIO setup."
                        return 1
                    fi
                done

                _DOES_HOST_HAVE_VFIO=false
                return 0
            }

            function DoesXMLNotHaveExistingVFIOSetup
            {
                if eval "${_GET_PARSE_FROM_XML}" | grep -E "vfio" &> /dev/null; then
                    echo -e "${_PREFIX_ERROR} Detected VFIO drivers in XML file."
                    return 1
                fi

                _DOES_XML_HAVE_VFIO=false
                return 0
            }

        # <summary> Interaction </summary>
            function AskToSelectThisIOMMUGroup
            {
                IsInt "${1}" || return "${?}"
                local -i IOMMU_GROUP_ID="${1}"

                if AskToExecuteOrSkip "Select IOMMU group '${IOMMU_GROUP_ID}'?"; then
                    _IOMMU_GROUPS_FOR_VFIO_LIST+=( "${IOMMU_GROUP_ID}" )
                else
                    if DoesIOMMUGroupHaveVGADevice "${IOMMU_GROUP_ID}"; then
                        _IOMMU_GROUPS_WITH_VGA_FOR_HOST_LIST+=( "${IOMMU_GROUP_ID}" )
                    else
                        _IOMMU_GROUPS_FOR_HOST_LIST+=( "${IOMMU_GROUP_ID}" )
                    fi
                fi

                echo
                return 0
            }

            function AskToParseFromXML
            {
                if "${_DO_PARSE_DATABASE_FROM_XML}"; then
                    return 0
                fi

                AskToExecuteOrSkip "Cross-reference database with XML file?" || return 1
                _DO_PARSE_DATABASE_FROM_XML=true
                return 0
            }

            function SelectDatabaseFile
            {
                if "${_DO_PARSE_DATABASE_FROM_CACHE}"; then
                     _DATABASE_FILE="${_DEFAULT_DATABASE_FILE}"
                else
                    if "${_DO_PARSE_DATABASE_FROM_FILE}" ; then
                        local OUTPUT="Enter filename to save database (leave blank for default): "
                    else
                        local OUTPUT="Enter filename to read database (leave blank for default): "
                    fi

                    for COUNT in $( seq 0 2 ); do
                        read -r -p "${OUTPUT}" ANSWER

                        if "${_DO_PARSE_DATABASE_FROM_FILE}"; then
                            if [[ ! -z "${ANSWER}" ]] \
                                && [[ ! -e "${ANSWER}" ]]; then
                                echo -e "${_PREFIX_ERROR} File does not exist."
                                continue
                            fi

                            if [[ ! -z "${ANSWER}" ]] \
                                && [[ ! -s "${ANSWER}" ]]; then
                                echo -e "${_PREFIX_ERROR} File is empty."
                                continue
                            fi
                        else
                            if [[ -z "${ANSWER}" ]]; then
                                _DATABASE_FILE="${_DEFAULT_DATABASE_FILE}"
                                break
                            fi
                        fi

                        _DATABASE_FILE="${ANSWER}"
                        return 0
                    done
                fi

                if [[ "${_DEFAULT_DATABASE_FILE}" == "${_DEFAULT_DATABASE_FILE}" ]] \
                    || cmp -s "${_DEFAULT_DATABASE_FILE}" "${_DATABASE_FILE}"; then
                    echo -e "${_PREFIX_NOTE} Using default database file."
                fi

                return 0
            }

            function SelectXMLFile
            {
                ExportParseXML || return "${?}"

                for COUNT in $( seq 0 2 ); do
                        read -r -p "${OUTPUT}" ANSWER

                        if "${_DO_PARSE_DATABASE_FROM_FILE}"; then
                            if [[ ! -z "${ANSWER}" ]] \
                                && [[ ! -e "${ANSWER}" ]]; then
                                echo -e "${_PREFIX_ERROR} File does not exist."
                                continue
                            fi

                            if [[ ! -z "${ANSWER}" ]] \
                                && [[ ! -s "${ANSWER}" ]]; then
                                echo -e "${_PREFIX_ERROR} File is empty."
                                continue
                            fi
                        else
                            if [[ -z "${ANSWER}" ]]; then
                                _DATABASE_FILE="${_DEFAULT_DATABASE_FILE}"
                                break
                            fi
                        fi

                        _DATABASE_FILE="${ANSWER}"
                        return 0
                    done

                ImportParseXML || return "${?}"
                return 1
            }

            function SelectIOMMUGroups
            {
                local -n REFERENCE="_IOMMU_GROUP_ID_LIST"
                echo

                for IOMMU_GROUP_ID in ${REFERENCE[@]}; do
                    SelectThisIOMMUGroup "${IOMMU_GROUP_ID}"
                done

                return 0
            }

            function SelectThisIOMMUGroup
            {
                IsInt "${1}" || return "${?}"
                local -i IOMMU_GROUP_ID="${1}"

                if ! DoesIOMMUGroupHaveExternalDevices "${1}"; then
                    _IOMMU_GROUPS_FOR_HOST_LIST+=( "${IOMMU_GROUP_ID}" )
                    return 1
                fi

                PrintThisIOMMUGroupDevices "${1}" || return "${?}"
                AskToSelectThisIOMMUGroup "${1}" || return "${?}"
                return 0
            }

            function AskToSelectDatabase
            {
                if "${_DO_PARSE_DATABASE_FROM_CACHE}" \
                    || "${_DO_PARSE_DATABASE_FROM_FILE}" \
                    || "${_DO_PARSE_DATABASE_FROM_INTERNET}"; then
                    return 0
                fi

                for COUNT in $( seq 0 2 ); do
                    read -r -p "Select method of parsing IOMMU groups? [(F)ile/(I)nternal/(O)nline/(N)o]: " ANSWER

                    case "${ANSWER}" in
                        [Ff]* )
                            _DO_PARSE_DATABASE_FROM_FILE=true ;;

                        [Ii]* )
                            _DO_PARSE_DATABASE_FROM_CACHE=true ;;

                        [Oo]* )
                            _DO_PARSE_DATABASE_FROM_INTERNET=true ;;

                        [Nn]* )
                            (return 255)
                            return "${?}" ;;

                        * )
                            echo "Please answer 'F', 'I', 'O', or 'N'."
                            continue ;;
                    esac

                    return 0
                done

                echo -e "${_PREFIX_ERROR} Failed to answer."
                return 1
            }

        # <summary> Presentation </summary>
            function PrintThisIOMMUGroupDevices
            {
                IsInt "${1}" || return "${?}"
                local -i IOMMU_GROUP_ID="${1}"
                local -a DEVICE_LIST="$( eval "${_GET_DEVICES_FOR_IOMMU_GROUP}" )"

                for DEVICE in ${DEVICE_LIST[@]}; do
                    if IsDeviceExternal "${DEVICE}"; then
                        local CLASS DRIVER HWID NAME VENDOR

                        SetDeviceClass "${DEVICE}" "CLASS"
                        SetDeviceDriver "${DEVICE}" "DRIVER"
                        SetDeviceHardwareID "${DEVICE}" "HWID"
                        SetDeviceName "${DEVICE}" "NAME"
                        SetDeviceVendor "${DEVICE}" "VENDOR"

                        echo -e "\tSlot ID:\t${DEVICE}"
                        echo -e "\tVendor name:\t${VENDOR}"
                        echo -e "\tDevice name:\t${NAME}"
                        echo -e "\tClass/Type:\t${CLASS}"
                        echo -e "\tHardware ID:\t${HWID}"
                        local DRIVER_OUTPUT="\tDriver:\t"

                        if [[ ! -z "${DRIVER}" ]]; then
                            echo -e "${DRIVER_OUTPUT}${DRIVER}"
                        else
                            echo -e "${DRIVER_OUTPUT}N/A"
                        fi

                        echo
                    fi
                done

                return 0
            }
# </functions>

# <main>
    SetParameters
    unset SetParameters
# </main>