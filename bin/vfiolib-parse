#!/bin/bash/env bash

#
# Filename:         vfiolib-parse
# Description:      Reference a database, parse IOMMU groups, and save to lists.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

## TODO:
# -add XML
# -test

# <sources>
    source bashlib-all
    source bashlib-vars
    source vfiolib-calcs
    source vfiolib-common
    source vfiolib-usage
# </sources>

# <functions>
    # <summary> Public </summary>
        function ExecuteParseSelection
        {
            SetParseParameters
            AreParametersValid || return "$?"
            SelectFileToExportDatabase || return "$?"          ## NOTE: somewhere, add support for parsing from XML.
            SelectMethodToParseDatabase || return "$?"
            SetOptionsToImportDatabase || return "$?"
            DoesHostHaveExistingVFIOSetup || return "$?"
            SelectIOMMUGroups
            IsParseSelectionValid || return "$?"
            DoesHostHaveVGADevicesAfterVFIOSetup || return "$?"
            return 0
        }

        # <summary> Global getters </summary>
            function GetListsForSelection
            {
                IsEnum "$4" || return "$?"
                IsEnum "$3" || return "$?"
                IsEnum "$2" || return "$?"
                IsValidEnumOfIOMMUGroups "$1" || return "$?"
                local -i IOMMU_GROUP_ID_REFERENCE="$1"
                local -n DRIVER_REFERENCE="$2"
                local -n VFIO_HWID_REFERENCE="$3"
                local -n STUB_HWID_REFERENCE="$4"

                for IOMMU_GROUP_ID in ${IOMMU_GROUP_ID_REFERENCE[@]}; do
                    local -a DEVICE_LIST=$( eval GET_DEVICES_FOR_IOMMU_GROUP )

                    for DEVICE in ${DEVICE_LIST[@]}; do
                        local DRIVER HWID
                        SetDeviceDriver "$DEVICE" "DRIVER"
                        SetDeviceHardwareID "$DEVICE" "HWID"

                        if IsString "$DRIVER"; then
                            DRIVER_REFERENCE+=( "$DRIVER" )
                        fi

                        if IsString "$HWID" && \
                            IsDeviceForPCISTUB "$DEVICE"; then
                            STUB_HWID_REFERENCE+=( "$HWID" )
                        fi

                        if IsString "$HWID" && \
                            ! IsDeviceForPCISTUB "$DEVICE"; then
                            VFIO_HWID_REFERENCE+=( "$HWID" )
                        fi
                    done
                done

                if IsEmptyEnum "DRIVER_REFERENCE"; then
                    if ! IsEmptyEnum "STUB_HWID_REFERENCE" \
                        || ! IsEmptyEnum "VFIO_HWID_REFERENCE"; then
                        return 0
                    fi

                    return 1
                fi

                return 0
            }

            function GetNameForFirstVGADeviceInIOMMUGroup
            {
                IsString "$2" || return "$?"
                IsInt "$1" || return "$?"
                local -i IOMMU_GROUP_ID="$1"
                local -n DEVICE_NAME="$2"
                local -a DEVICE_LIST="$( eval "$GET_DEVICES_FOR_IOMMU_GROUP" )"

                for DEVICE in ${DEVICE_LIST[@]}; do
                    if ! IsDeviceVGA "$DEVICE"; then
                        continue
                    fi

                    local NAME
                    SetDeviceName "NAME"
                    return 0
                done

                return 1
            }

        # <summary> Global setters </summary>
            function SetParseParameters
            {
                if [[ ! -z "$_ARE_PARSE_PARAMS_SET" ]] \
                    && "$_ARE_PARSE_PARAMS_SET"; then
                    return 0
                fi

                declare -g GET_DEVICES_FOR_IOMMU_GROUP='ls /sys/kernel/iommu_groups/$IOMMU_GROUP_ID/devices/'
                declare -ag _IOMMU_GROUP_ID_LIST=( $( ls /sys/kernel/iommu_groups/ | sort -n ) )
                declare -ag _IOMMU_GROUPS_FOR_HOST_LIST _IOMMU_GROUPS_WITH_VGA_FOR_HOST_LIST _IOMMU_GROUPS_FOR_VFIO_LIST
                declare -g _DEFAULT_DATABASE_FILE="/usr/local/etc/vfiolib_lspci_database"
                declare -g _PARSE_OPTIONS=""
                declare -g _REGEX_DOMAIN_ID='^[0-9A-F][1-9A-F]$'
                declare -g _ARE_PARSE_PARAMS_SET=true

                return 0
            }

            function AreParametersValid
            {
                IsEnum "_IOMMU_GROUP_ID_LIST" || return "$?"

                for VALUE in ${_IOMMU_GROUP_ID_LIST[@]}; do
                    IsInt "$VALUE" || return "$?"
                done

                return 0
            }

            function IsParseSelectionValid
            {
                if ! IsValidEnumOfIOMMUGroups "_IOMMU_GROUPS_FOR_HOST_LIST"; then
                    echo -e "An error occurred: Invalid allocation of devices for host."
                    return 1
                fi

                if ! IsValidEnumOfIOMMUGroups "_IOMMU_GROUPS_FOR_VFIO_LIST"; then
                    echo -e "An error occurred: Invalid selection of devices for VFIO setup."
                    return 1
                fi

                return 0
            }

            function IsParseSelectionOfVGAValid
            {
                if ! IsValidEnumOfIOMMUGroups "_IOMMU_GROUPS_WITH_VGA_FOR_HOST_LIST"; then
                    echo -e "$_PREFIX_ERROR No groups with VGA devices selected."
                    return 1
                fi

                return 0
            }

    # <summary> Private </summary
        # <summary> Local setters </summary>
            function SetDeviceClass
            {
                IsString "$2" || return "$?"
                IsString "$1" || return "$?"
                local DEVICE="$1"
                local -n REFERENCE="$2"
                REFERENCE="$( lspci $_PARSE_OPTIONS -ms $DEVICE | cut -d '"' -f 2 )"
                return 0
            }

            function SetDeviceDriver
            {
                IsString "$2" || return "$?"
                IsString "$1" || return "$?"
                local DEVICE="$1"
                local -n REFERENCE="$2"
                REFERENCE="$( lspci $_PARSE_OPTIONS-ks "$DEVICE" | grep -i "driver" | cut -d " " -f 5 )"
                return 0
            }

            function SetDeviceHardwareID
            {
                IsString "$2" || return "$?"
                IsString "$1" || return "$?"
                local DEVICE="$1"
                local -n REFERENCE="$2"
                REFERENCE="$( lspci $_PARSE_OPTIONS-ns $DEVICE | cut -d " " -f 3 )"
                return 0
            }

            function SetDeviceName
            {
                IsString "$2" || return "$?"
                IsString "$1" || return "$?"
                local DEVICE="$1"
                local -n REFERENCE="$2"
                REFERENCE="$( lspci $_PARSE_OPTIONS-ms $DEVICE  | cut -d '"' -f 6 )"
                return 0
            }

            function SetDeviceVendor
            {
                IsString "$2" || return "$?"
                IsString "$1" || return "$?"
                local DEVICE="$1"
                local -n REFERENCE="$2"
                REFERENCE="$( lspci $_PARSE_OPTIONS-ms $DEVICE | cut -d '"' -f 4 )"
                return 0
            }

        # <summary> Device validation </summary>
            function IsDeviceBindedToVFIO
            {
                IsString "$1" || return "$?"
                local DEVICE="$1"
                local -l DRIVER="$( lspci $_PARSE_OPTIONS-ks "$DEVICE" | grep -i "driver" | cut -d " " -f 5 )"

                case "$DRIVER" in
                    *"vfio-pci"* | *"vfio"* )
                        return 0 ;;
                esac

                return 1
            }

            function IsDeviceExternal
            {
                IsString "$1" || return "$?"
                local DEVICE="$1"
                local -u DOMAIN_ID=$( echo "$DEVICE" | cut -d ':' -f 2 )

                if echo "$DOMAIN_ID" | grep -E -q "$_REGEX_DOMAIN_ID"; then
                    return 0
                fi

                return 1
            }

            function IsDeviceForPCISTUB
            {
                IsString "$1" || return "$?"
                local DEVICE="$1"
                local -l CLASS="$( lspci $_PARSE_OPTIONS -ms $DEVICE | cut -d '"' -f 2 )"

                case "$CLASS" in
                    *"usb"* )
                        return 0 ;;
                esac

                return 1
            }

            function IsDeviceVGA
            {
                IsString "$1" || return "$?"
                local DEVICE="$1"
                local -l CLASS="$( lspci $_PARSE_OPTIONS-ms $DEVICE | cut -d '"' -f 2 )"

                case "$CLASS" in
                    *"vga"* | *"graphic"* )
                        return 0 ;;
                esac

                return 1
            }

        # <summary> Device group validation </summary>
            function AddSome_IOMMU_GroupsParseList
            {
                local -a IOMMU_GROUP_ID_PARTIAL_LIST=( )
                local -r REGEX_FOR_RANGE_OF_NUMS='^[0-9]+[-][0-9]+$'

                if echo "$1" | grep -E -q "$REGEX_FOR_RANGE_OF_NUMS"; then
                    local -ir _RANGE_START=$( echo "$1" | cut -d '-' -f 1 )
                    local -ir _RANGE_STOP=$( echo "$1" | cut -d '-' -f 2 )
                    IsIOMMUGroupIDValid "$_RANGE_START" || return 1
                    IsIOMMUGroupIDValid "$_RANGE_STOP" || return 1
                    IOMMU_GROUP_ID_PARTIAL_LIST+=( $( seq "$_RANGE_START" "$_RANGE_STOP" ) )

                elif IsInt "$1"; then
                    IsIOMMUGroupIDValid "$1" || return 1
                    IOMMU_GROUP_ID_PARTIAL_LIST+=( "$1" )

                else
                    echo -e "$_PREFIX_ERROR Invalid IOMMU group ID(s)."
                    return 1
                fi

                for _IOMMU_GROUP_ID in ${IOMMU_GROUP_ID_PARTIAL_LIST[@]}; do
                    IsIOMMUGroupIDValid "$_IOMMU_GROUP_ID" || return 1
                    local -a DEVICE_LIST=( $( eval "$GET_DEVICES_FOR_IOMMU_GROUP" ) )
                    local _HAS_EXTERNAL_PCI=false

                    for _DEVICE in ${DEVICE_LIST[@]}; do
                        local -u _DEVICE_DOMAIN_ID=$( echo "$_DEVICE" | cut -d ':' -f 2 )
                        local -l _DEVICE_CLASS="$( lspci -m -s $_DEVICE $__PARSE_OPTIONS | cut -d '"' -f 2 )"

                        if IsDeviceExternal "$_DEVICE_DOMAIN_ID"; then
                            _HAS_EXTERNAL_PCI=true
                            break
                        fi
                    done

                    if ! "$_HAS_EXTERNAL_PCI"; then
                        echo -e "$_PREFIX_ERROR IOMMU group(s) contains no external PCI devices."
                        return 1
                    fi
                done

                __IOMMU_GROUPS_FOR_HOST_LIST_TO_USE+=( "${IOMMU_GROUP_ID_PARTIAL_LIST[@]}" )
                SortListOf_IOMMU_Groups
                return 0
            }

            function AddValid_IOMMU_GroupsParseList
            {
                local -a __IOMMU_GROUPS_FOR_HOST_LIST_TEMP=( )

                for _IOMMU_GROUP_ID in ${__IOMMU_GROUPS_FOR_HOST_LIST[@]}; do
                    local -a DEVICE_LIST=( $( eval "$GET_DEVICES_FOR_IOMMU_GROUP" ) )
                    local _THIS_IOMMU_GROUP_HAS_EXTERNAL_PCI=false
                    local _THIS_IOMMU_GROUP_HAS_VGA=false

                    for _DEVICE in ${DEVICE_LIST[@]}; do
                        local -u _DEVICE_DOMAIN_ID=$( echo "$_DEVICE" | cut -d ':' -f 2 )
                        local -l _DEVICE_CLASS="$( lspci -m -s $_DEVICE $__PARSE_OPTIONS | cut -d '"' -f 2 )"

                        if IsDeviceExternal "$_DEVICE_DOMAIN_ID"; then
                            _THIS_IOMMU_GROUP_HAS_EXTERNAL_PCI=true

                            if "$_HAS_ARG_PARSE_IOMMU_SELECT_ALL"; then
                                __IOMMU_GROUPS_FOR_HOST_LIST_TEMP+=( "$_IOMMU_GROUP_ID" )
                            fi

                            if "$_HAS_ARG_PARSE_IOMMU_SELECT_ALL_NON_VGA" \
                                && IsDevice_VGA "$_DEVICE_CLASS"; then
                                __IOMMU_GROUPS_FOR_HOST_LIST_TEMP+=( "$_IOMMU_GROUP_ID" )
                            fi

                            break
                        fi
                    done
                done

                if [[ "${#__IOMMU_GROUPS_FOR_HOST_LIST_TEMP[@]}" -eq 0 ]]; then
                    echo -e "$_PREFIX_ERROR List is empty."
                    return 1
                fi

                __IOMMU_GROUPS_FOR_HOST_LIST_TO_USE+=( "${__IOMMU_GROUPS_FOR_HOST_LIST_TEMP[@]}" )
                SortListOf_IOMMU_Groups
                return 0
            }

            function DoesIOMMUGroupHaveExternalDevices
            {
                IsInt "$1" || return "$?"
                local -i IOMMU_GROUP_ID="$1"
                local -a DEVICE_LIST="$( eval "$GET_DEVICES_FOR_IOMMU_GROUP" )"

                for DEVICE in ${DEVICE_LIST[@]}; do
                    IsDeviceExternal "$DEVICE" && return 0
                done

                return 1
            }

            function DoesIOMMUGroupHaveVGADevice
            {
                IsInt "$1" || return "$?"
                local -i IOMMU_GROUP_ID="$1"
                local -a DEVICE_LIST="$( eval "$GET_DEVICES_FOR_IOMMU_GROUP" )"

                for DEVICE in ${DEVICE_LIST[@]}; do
                    IsDeviceVGA "$DEVICE" && return 0
                done

                echo -e "$_PREFIX_ERROR Please enter valid IOMMU group ID which contains one or more VGA devices."
                return 1
            }

            function IsIOMMUGroupNotBindedToVFIO
            {
                IsInt "$1" || return "$?"
                local -i IOMMU_GROUP_ID="$1"
                local -a DEVICE_LIST="$( eval "$GET_DEVICES_FOR_IOMMU_GROUP" )"

                for DEVICE in ${DEVICE_LIST[@]}; do
                    IsDeviceBindedToVFIO "$DEVICE" || return 1
                done

                return 0
            }

            function IsIOMMUGroupIDValid
            {
                if ! IsInt "$1" \
                    || IsLessOrEqual "$1" "0" \
                    || IsGreaterOrEqual "$1" "${_IOMMU_GROUP_ID_LIST[-1]}"; then
                    echo -e "$_PREFIX_ERROR Please enter valid IOMMU group ID(s), between 0 and ${_IOMMU_GROUP_ID_LIST[-1]}."
                    return 1
                fi

                return 0
            }

            function IsValidEnumOfIOMMUGroups
            {
                IsEnum "$1" || return "$?"
                local -n REFERENCE="$1"

                for VALUE in ${REFERENCE[@]}; do
                    IsInt "$VALUE" || return "$?"
                done
            }

        # <summary> Host validation </summary>
            function DoesHostHaveVGADevicesAfterVFIOSetup
            {
                local VALIDATE_VFIO_LIST=false
                IsBool "$_EXECUTE_VFIO_SETUP_MULTIBOOT_WITH_GRUB" && VALIDATE_VFIO_LIST=true

                if ! "$VALIDATE_VFIO_LIST"; then
                    return 0
                fi

                local -n REFERENCE="_IOMMU_GROUPS_FOR_HOST_LIST"

                for IOMMU_GROUP_ID in ${REFERENCE[@]}; do
                    DoesIOMMUGroupHaveVGADevice "$IOMMU_GROUP_ID" &> /dev/null && return 0
                done

                echo -e "An error occurred: No VGA devices allocated for host."
                return 1
            }

            function DoesHostHaveExistingVFIOSetup
            {
                # TODO: check if parsing from XML file

                local -n REFERENCE="_IOMMU_GROUP_ID_LIST"

                for IOMMU_GROUP_ID in ${REFERENCE[@]}; do
                    if ! IsIOMMUGroupNotBindedToVFIO "$IOMMU_GROUP_ID"; then
                        echo -e "An error occurred: Detected existing VFIO setup."
                        return 1
                    fi
                done

                return 0
            }

        # <summary> Interaction </summary>
            function AskToSelectThisIOMMUGroup
            {
                IsInt "$1" || return "$?"
                local -i IOMMU_GROUP_ID="$1"

                if AskToExecuteOrSkip "Select IOMMU group '$IOMMU_GROUP_ID'?"; then
                    _IOMMU_GROUPS_FOR_VFIO_LIST+=( "$IOMMU_GROUP_ID" )

                    if DoesIOMMUGroupHaveVGADevice "$IOMMU_GROUP_ID"; then
                        _IOMMU_GROUPS_WITH_VGA_FOR_HOST_LIST+=( "$IOMMU_GROUP_ID" )
                    fi
                else
                    _IOMMU_GROUPS_FOR_HOST_LIST+=( "$IOMMU_GROUP_ID" )
                fi

                echo
                return 0
            }

            function ExportParseDatabase
            {
                if [[ ! -z "$_DEFAULT_DATABASE_FILE" ]] \
                    && [[ ! -e "$_DEFAULT_DATABASE_FILE" ]] \
                    && ! sudo mkdir -p $( dirname "$_DEFAULT_DATABASE_FILE" ) &> /dev/null; then
                    echo -e "$_PREFIX_ERROR Failed to create directory for database file."
                    return 1
                fi

                if [[ ! -z "$_DEFAULT_DATABASE_FILE" ]] \
                    && [[ ! -e "$_DEFAULT_DATABASE_FILE" ]] \
                    && ! sudo touch "$_DEFAULT_DATABASE_FILE" &> /dev/null; then
                    echo -e "$_PREFIX_ERROR Failed to create database file."
                    return 1
                fi

                if "$_DO_PARSE_DATABASE_FROM_CACHE" \
                    && [[ ! -s "$_DEFAULT_DATABASE_FILE" ]] \
                    && ! lspci -x >> "$_DEFAULT_DATABASE_FILE" &> /dev/null; then
                    echo -e "$_PREFIX_ERROR Failed to reference local database and save to file."
                    return 1
                fi

                if "$_DO_PARSE_DATABASE_FROM_INTERNET" \
                    && [[ ! -s "$_DEFAULT_DATABASE_FILE" ]] \
                    && ! lspci -q -x >> "$_DEFAULT_DATABASE_FILE" &> /dev/null; then
                    echo -e "$_PREFIX_ERROR Failed to reference online database and/or save to file."
                    return 1
                fi

                if [[ -s "$_DEFAULT_DATABASE_FILE" ]] \
                    && ! lspci -F "$_DEFAULT_DATABASE_FILE" &> /dev/null; then
                    echo -e "$_PREFIX_ERROR File is corrupt."
                    return 1
                fi

                return 0
            }

            function SelectFileToExportDatabase
            {
                ExportParseDatabase || return "$?"
                read -r -p "Enter filename (leave blank for default): " _ANSWER

                if [[ ! -z "$_ANSWER" ]] \
                    && [[ ! -e "$_ANSWER" ]]; then
                    echo -e "$_PREFIX_ERROR File does not exist."
                fi

                if [[ ! -z "$_ANSWER" ]] \
                    && [[ ! -s "$_ANSWER" ]]; then
                    echo -e "$_PREFIX_ERROR File is empty."
                fi

                if [[ ! -z "$_ANSWER" ]] \
                    && [[ -e "$_ANSWER" ]] \
                    && [[ -s "$_ANSWER" ]]; then
                    _DATABASE_FILE="$_ANSWER"
                    return 0
                fi

                _DATABASE_FILE="$_DEFAULT_DATABASE_FILE"

                if [[ ! -e "$_DATABASE_FILE" ]]; then
                    echo -e "$_PREFIX_ERROR File does not exist."
                    return 1
                fi

                if [[ ! -s "$_DATABASE_FILE" ]]; then
                    echo -e "$_PREFIX_ERROR File is empty."
                    return 1
                fi

                return 0
            }

            function SelectIOMMUGroups
            {
                local -n REFERENCE="_IOMMU_GROUP_ID_LIST"

                for IOMMU_GROUP_ID in ${REFERENCE[@]}; do
                    SelectThisIOMMUGroup "$IOMMU_GROUP_ID"
                done

                return 0
            }

            function SelectThisIOMMUGroup
            {
                IsInt "$1" || return "$?"
                local -i IOMMU_GROUP_ID="$1"

                if ! DoesIOMMUGroupHaveExternalDevices "$1"; then
                    _IOMMU_GROUPS_FOR_HOST_LIST+=( "$IOMMU_GROUP_ID" )
                    return 1
                fi

                PrintThisIOMMUGroupDevices "$1" || return "$?"
                AskToSelectThisIOMMUGroup "$1" || return "$?"
                return 0
            }

            function SelectMethodToParseDatabase
            {
                case true in
                    "$_DO_PARSE_DATABASE_FROM_CACHE" | "$_DO_PARSE_DATABASE_FROM_FILE" | "$_DO_PARSE_DATABASE_FROM_INTERNET" )
                        return 0 ;;
                esac

                for COUNT in $( seq 0 2 ); do
                    read -r -p "Select method of parsing IOMMU groups? [(F)ile/(I)nternal/(O)nline/(N)o]: " _ANSWER

                    case "$_ANSWER" in
                        [Ff]* )
                            _DO_PARSE_DATABASE_FROM_FILE=true ;;

                        [Ii]* )
                            _DO_PARSE_DATABASE_FROM_CACHE=true ;;

                        [Oo]* )
                            _DO_PARSE_DATABASE_FROM_INTERNET=true ;;

                        [Nn]* )
                            return 255 ;;

                        * )
                            echo "Please answer 'F', 'I', 'O', or 'N'."
                            continue ;;
                    esac

                    return 0
                done

                echo -e "$_PREFIX_ERROR Failed to answer."
                return 1
            }

            function SetOptionsToImportDatabase
            {
                if ! "$_DO_PARSE_DATABASE_FROM_INTERNET" \
                    && ! "$_DO_PARSE_DATABASE_FROM_FILE"; then
                    return 0
                fi

                local FILE=""

                if [[ ! -s "$_DATABASE_FILE" ]]; then
                    FILE="$_DATABASE_FILE"
                elif [[ ! -s "$_DEFAULT_DATABASE_FILE" ]]; then
                    FILE="$_DEFAULT_DATABASE_FILE"
                else
                    return 1
                fi

                if [[ ! -s "$FILE" ]]; then
                    return 1
                fi

                _PARSE_OPTIONS="-F $FILE"
                return 0
            }

        # <summary> Presentation </summary>
        function PrintThisIOMMUGroupDevices
        {
            IsInt "$1" || return "$?"
            local -i IOMMU_GROUP_ID="$1"
            local -a DEVICE_LIST="$( eval "$GET_DEVICES_FOR_IOMMU_GROUP" )"

            for DEVICE in ${DEVICE_LIST[@]}; do
                if IsDeviceExternal "$DEVICE"; then
                    local CLASS DRIVER HWID NAME VENDOR

                    SetDeviceClass "$DEVICE" "CLASS"
                    SetDeviceDriver "$DEVICE" "DRIVER"
                    SetDeviceHardwareID "$DEVICE" "HWID"
                    SetDeviceName "$DEVICE" "NAME"
                    SetDeviceVendor "$DEVICE" "VENDOR"

                    echo -e "\tSlot ID:\t$DEVICE"
                    echo -e "\tVendor name:\t$VENDOR"
                    echo -e "\tDevice name:\t$NAME"
                    echo -e "\tClass/Type:\t$CLASS"
                    echo -e "\tHardware ID:\t$HWID"
                    local DRIVER_OUTPUT="\tKernel driver:\t"

                    if IsString "$DRIVER"; then
                        echo -e "$DRIVER_OUTPUT$DRIVER"
                    else
                        echo -e "${DRIVER_OUTPUT}N/A"
                    fi

                    echo
                fi
            done

            return 0
        }

# </functions>