#!/bin/bash sh

#
# Filename:         vfiolib-usage
# Description:      Usage
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source vfiolib-calcs
    source vfiolib-files
    source vfiolib-globals
# </code>

# <code>
    function GetOption
    {
        # NOTE: not all options are being hit.

        while [[ "$1" =~ ^- && "$1" != "--" ]]; do case "$1" in
            "--help" )
                return 1 ;;

            # <remarks> Pre-setup: Parse IOMMU </remarks>
            "-f" | "--file" )
                if [[ "$2" == "" ]] \
                    || [[ -z "$2" ]]; then
                    echo -e "$_OUTPUT_INVALID_OPTION"
                    return 1
                fi

                if [[ "$3" != "" ]]; then
                    GetArgsForExecuteSelection "$3" || return 1
                fi

                _FILENAME_PARSE_IOMMU=$3
                _PARSE_IOMMU_FROM_FILE=true ;;

            "-i" | "--internal" )
                if [[ "$2" != "" ]]; then
                    GetArgsForExecuteSelection "$2" || return 1
                fi

                _PARSE_IOMMU_FROM_CACHE=true ;;

            "-o" | "--online" )
                if [[ "$2" != "" ]]; then
                    GetArgsForExecuteSelection "$2" || return 1
                fi

                _PARSE_IOMMU_FROM_INTERNET=true ;;

            # <remarks> Pre-setup: Essentials </remarks>
            "-c" | "--cpu" )
                _EXECUTE_ALL_ESSENTIAL_SETUPS=false
                _EXECUTE_ISOLCPU_SETUP=true ;;

            "-e" | "--evdev" )
                _EXECUTE_ALL_ESSENTIAL_SETUPS=false
                _EXECUTE_EVDEV_SETUP=true ;;

            "-h" | "--hugepages" )
                _EXECUTE_ALL_ESSENTIAL_SETUPS=false

                if [[ "$2" != "" ]]; then
                    GetHugepageByteSize "$2" || return 1
                fi

                if [[ "$3" != "" ]]; then
                    GetHugepageCount "$3" || return 1
                fi

                IsHostMemorySufficientForHugepages || return 1
                _EXECUTE_HUGEPAGES_SETUP=true ;;

            "--uninstall-essentials" )
                _UNINSTALL_ESSENTIALS=true ;;

            # <remarks> Main setup </remarks>
            "-m" | "--multiboot" )
                _EXECUTE_MULTIBOOT_SETUP=true ;;

            "-s" | "--static" )
                if [[ "$2" != "" ]]; then
                    GetArgsForStaticVFIO "$2" || return 1
                fi

                _EXECUTE_STATIC_SETUP=true
                _ASK_TO_SELECT_TYPE_OF_STATIC_SETUP=false ;;

            "-u" | "--uninstall" )
                _EXECUTE_UNINSTALL_SETUP=true ;;

            # <remarks> Post-setup: Extras </remarks>
            "-H" | "--hooks" )
                _EXECUTE_ALL_EXTRA_SETUPS=false
                _EXECUTE_LIBVIRT_HOOKS=true ;;

            "-l" | "--looking-glass" )
                _EXECUTE_ALL_EXTRA_SETUPS=false
                _EXECUTE_LOOKING_GLASS=true ;;

            "-L" | "--audio-loopback" )
                _EXECUTE_ALL_EXTRA_SETUPS=false
                _EXECUTE_AUDIO_LOOPBACK_SETUP=true ;;

            "-S" | "--scream" )
                _EXECUTE_ALL_EXTRA_SETUPS=false
                _EXECUTE_SCREAM=true ;;

            "-x" | "--auto-xorg" )
                _EXECUTE_ALL_EXTRA_SETUPS=false
                _EXECUTE_AUTO_XORG_SETUP=true ;;

            "-z" | "--zram-swap" )
                _EXECUTE_ALL_EXTRA_SETUPS=false

                if [[ "$2" != "" ]]; then
                    GetZramSwapSize "$2" || GetOverrideArgsForZramSwap "$2" || return 1
                fi

                if [[ "$3" != "" ]]; then
                    GetZramSwapSize "$3" || GetOverrideArgsForZramSwap "$3" || return 1
                fi

                IsHostMemorySufficientForZramSwap || return 1
                _EXECUTE_ZRAM_SWAP=true ;;

            "--uninstall-extras" )
                _UNINSTALL_EXTRAS=true ;;

            # <remarks> Else </remarks>
            "" )
                ;;

            * )
                echo -e "$_OUTPUT_INVALID_OPTION"
                return 1 ;;
        esac; shift; done

        if [[ "$1" == '--' ]]; then
            shift
        fi

        return 0
    }

    function GetArgsForStaticVFIO
    {
        case "$1" in
            "grub" )
                _EXECUTE_STATIC_SETUP_grub=true
                return 0 ;;

            "file" )
                _EXECUTE_STATIC_SETUP_file=true
                return 0 ;;
        esac

        return 1
    }

    function GetArgsForExecuteSelection
    {
        case "$1" in
            "all" )
                _SELECT_ALL_IOMMU=true ;;

            * )
                return 1 ;;
        esac

        return 0
    }

    function GetOverrideArgsForZramSwap
    {
        case "$1" in
            "force" )
                _ZRAM_SWAP_OVERRIDE=true ;;

            * )
                return 1 ;;
        esac

        return 0
    }

    function GetUsage
    {
        IFS=$'\n'

        declare -a _OUTPUT=(
            "Usage:\t\tbash deploy-vfio [OPTION]... [ARGUMENTS]..."
            "Deploy a VFIO setup to a Linux Host that supports Para-virtualization or PCI Passthrough.\n"
            "  --help\tprint this help and exit"

            "\nParse IOMMU groups and reference chosen database for the system's PCI devices.\nOPTIONS:"
            "  -f, --file [filename]\tReference file database."
            "  -i, --internal\tReference local database."
            "  -o, --online\t\tReference online database."

            "\nARGUMENTS:"
            "  [filename]            Reference specific file."
            "  all\t\t\tSelect all IOMMU groups."
            "  no-vga\t\tSelect all IOMMU groups without VGA devices."
            "  [x-y,z]\t\tSelect specific IOMMU groups (comma separated, or ranges)."

            "\n  Example:"
            "    -f somefile.txt     Reference file 'somefile.txt' and begin parse."
            "    no-vga 14\t\tSelect group 14 and all non-VGA groups."
            "    1,14-16\t\tSelect groups 1, 14, 15, and 16."

            "\nPre-setup OPTIONS:"
            "  -c, --cpu\t\t\tAllocate CPU."
            "  -e, --evdev\t\t\tSetup a virtual KVM switch."
            "  -h, --hugepages\t\tCreate static hugepages (pages greater than 4 KiB) to allocate RAM for Guest(s)."
            "  --uninstall-essentials\tUndo changes made by preliminary setup."

            "\nHugepages ARGUMENTS:"
            "  2M, 1G\t\t\tHugepage size (2 MiB or 1 GiB)."
            "  [1-?]\t\t\t\tAmount of Hugepages (maximum amount is total memory subtracted by 4 GiB)."

            "\n  Example:"
            "    1G 16\t\t\t1 GiB hugepage 16\t== 16 GiB allocated to hugepages."
            "    2M 8192\t\t\t2 MiB hugepage 8912\t== 16 GiB allocated to hugepages."

            "\nMain setup OPTIONS:"
            "  -m, --multiboot\t\tCreate multiple GRUB entries for a Multi VGA VFIO setup."
            "  -s, --static\t\t\tCreate a single GRUB entry/Install a Single VGA VFIO setup."
            "  -u, --uninstall\t\tUndo an existing VFIO setup."

            "\n  Example:"
            "    -l -m\t\t\tParse against local database, then deploy a Multi VGA VFIO setup."
            "    -s -o\t\t\tParse against online database, then deploy a Static VFIO setup."
            "\nPost-setup OPTIONS:"
            "  -H, --hooks\t\tInstall recommended libvirt-hooks and services."
            "  -l, --looking-glass\tInstall LookingGlass.\t\t\tStream video (and audio) from Guest to Host over PCI bus using shared-memory device."
            "  -L, --audio-loopback\tInstall the audio loopback service.\tLoopback audio from Guest to Host (over Line-out to Line-in)."
            "  -S, --scream\t\tInstall Scream.\t\t\t\tStream audio from Guest to Host over virtual LAN."
            "  -z, --zram-swap\tCreate compressed (~ 2:1) RAM swap.\tReduce chances of memory exhaustion for Host."
            "  --uninstall-extras\tUndo changes made by post-setup."

            "\nzram-swap ARGUMENTS:"
            "  force\t\t\tForce changes, even if zram-swap is allocated and in use."
            "  [fraction]\t\tSet the fraction of total available memory."

            "\n  Example (assume a Host with 32 GiB of RAM):"
            "    force 1/4\t\tCompress 8 GiB of RAM, to create 16 GiB of swap, with 16 GiB free."
        )

        echo -e "${_OUTPUT[*]}"
        unset IFS
        return 0
    }

    function SetOptions
    {
        if [[ "$@" == "" ]]; then
            return 0
        fi

        GetOption "$@" || return 1
        return 0
    }
# </code>

# <params>
    declare -g _OUTPUT_INVALID_ANSWER="$_PREFIX_ERROR Failed to answer."
    declare -g _OUTPUT_INVALID_OPTION="$_PREFIX_ERROR Invalid option."
    declare -g _FILENAME_PARSE_IOMMU=""

    # <remarks> Toggles </remarks
    declare -g _IS_CONNECTED_TO_INTERNET=false

    # <remarks> Usage toggles </remarks
    declare -g _EXECUTE_ALL_EXTRA_SETUPS=true
    declare -g _EXECUTE_ALL_ESSENTIAL_SETUPS=true
    declare -g _EXECUTE_ISOLCPU_SETUP=false
    declare -g _EXECUTE_AUDIO_LOOPBACK_SETUP=false
    declare -g _EXECUTE_AUTO_XORG_SETUP=false
    declare -g _EXECUTE_EVDEV_SETUP=false
    declare -g _EXECUTE_GRUB_STATIC_SETUP=true
    declare -g _EXECUTE_HUGEPAGES_SETUP=false
    declare -g _EXECUTE_LIBVIRT_HOOKS=false
    declare -g _EXECUTE_LOOKING_GLASS=false
    declare -g _EXECUTE_MULTIBOOT_SETUP=false
    declare -g _EXECUTE_SCREAM=false
    declare -g _EXECUTE_STATIC_SETUP=false
    declare -g _EXECUTE_UNINSTALL_SETUP=false
    declare -g _EXECUTE_ZRAM_SWAP=false
    declare -g _ASK_TO_SELECT_TYPE_OF_STATIC_SETUP=true
    declare -g _PARSE_IOMMU_FROM_FILE=false
    declare -g _PARSE_IOMMU_FROM_CACHE=false
    declare -g _PARSE_IOMMU_FROM_INTERNET=false
    declare -g _SELECT_ALL_IOMMU=false
    declare -g _UNINSTALL_EXTRAS=false
    declare -g _UNINSTALL_ESSENTIALS=false
    declare -g _ZRAM_SWAP_OVERRIDE=false
    declare -g _ZRAM_SWAP_SET_FRACTION=false
# </params>