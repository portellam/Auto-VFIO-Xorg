#!/bin/bash sh

#
# Filename:         vfiolib-usage
# Description:      Usage
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source vfiolib-calcs
    source vfiolib-files
    source vfiolib-globals
# </code>

# <code>
    function GetOption
    {
        while [[ "$1" =~ ^- && "$1" != "--" ]]; do case "$1" in
            "--help" )
                return 1 ;;

            # <remarks> Pre-setup </remarks>
            "-c" | "--cpu" )
                _ASK_TO_EXECUTE_PRE_SETUPS=false
                _EXECUTE_PRE_SETUP_STATIC_ISOLCPU=true ;;

            "-e" | "--evdev" )
                _ASK_TO_EXECUTE_PRE_SETUPS=false
                _EXECUTE_PRE_SETUP_EVDEV=true ;;

            "-h" | "--hugepages" )
                _ASK_TO_EXECUTE_PRE_SETUPS=false

                if [[ ! -z "$2" ]]; then
                    GetHugepageByteSize "$2" || return 1
                fi

                if [[ ! -z "$3" ]]; then
                    GetHugepageCount "$3" || return 1
                fi

                IsHostMemorySufficientForHugepages || return 1
                _EXECUTE_PRE_SETUP_HUGEPAGES=true ;;

            "--uninstall-essentials" )
                _EXECUTE_PRE_SETUP_UNINSTALL=true ;;

            # <remarks> Parse PCI for VFIO setup </remarks>
            "-f" | "--file" )
                _DO_PARSE_DATABASE_FROM_FILE=true
                GetFileForParseSelection "$2" || return 1
                GetArgsForParseSelection "$@" || return 1 ;;

            "-i" | "--internal" )
                _DO_PARSE_DATABASE_FROM_CACHE=true
                GetArgsForParseSelection "$@" || return 1 ;;

            "-o" | "--online" )
                _DO_PARSE_DATABASE_FROM_INTERNET=true
                GetArgsForParseSelection "$@" || return 1 ;;

            # <remarks> VFIO setup </remarks>
            "-m" | "--multiboot" )
                _EXECUTE_VFIO_SETUP_MULTIBOOT_WITH_GRUB=true ;;

            "-s" | "--static" )
                GetArgsForStatic_VFIO "$2" || return 1
                _EXECUTE_VFIO_SETUP_STATIC_WITHOUT_GRUB=true
                _ASK_TO_EXECUTE_VFIO_SETUP_STATIC_WITH_GRUB=false ;;

            "-u" | "--uninstall" )
                _EXECUTE_VFIO_SETUP_UNINSTALL=true ;;

            # <remarks> Post-setup </remarks>
            "--hooks" )
                _ASK_TO_EXECUTE_POST_SETUPS=false
                _EXECUTE_POST_SETUP_STATIC_LIBVIRT_HOOKS=true ;;

            "--audio-loopback" )
                _ASK_TO_EXECUTE_POST_SETUPS=false
                _EXECUTE_POST_SETUP_AUDIO_LOOPBACK=true ;;

            "--auto-xorg" )
                _ASK_TO_EXECUTE_POST_SETUPS=false
                _EXECUTE_POST_SETUP_AUTO_XORG=true
                GetArgsForAutoXorg "$2" "$3" || return 1 ;;

            "--zram-swap" )
                _ASK_TO_EXECUTE_POST_SETUPS=false

                if [[ ! -z "$2" ]]; then
                    Get_zRAM_SwapSize "$2" || GetOverrideArgsForZramSwap "$2" || return 1
                fi

                if [[ ! -z "$3" ]]; then
                    Get_zRAM_SwapSize "$3" || GetOverrideArgsForZramSwap "$3" || return 1
                fi

                IsHostMemorySufficientForZramSwap || return 1
                _EXECUTE_POST_SETUP_ZRAM_SWAP=true ;;

            "--uninstall-extras" )
                _EXECUTE_POST_SETUP_UNINSTALL=true ;;

            # <remarks> Else </remarks>
            "" )
                ;;

            * )
                echo -e "$_OUTPUT_INVALID_OPTION"
                return 1 ;;
        esac; shift; done

        if [[ "$1" == '--' ]]; then
            shift
        fi

        return 0
    }

    function GetArgsForAutoXorg
    {
        if [[ -z "$1" ]]; then
            return 0
        fi

        GetParseOrderForAutoXorg "$1" || GetVendorPreferenceForAutoXorg "$1" || return 1
        GetParseOrderForAutoXorg "$2" || GetVendorPreferenceForAutoXorg "$2" || return 1
        return 0
    }

    function GetVendorPreferenceForAutoXorg
    {
        if "$_HAS_ARG_AUTO_XORG_PREFERRED_VENDOR"; then
            return 1
        fi

        case "$1" in
            "amd" | "intel" | "nvidia" | "other" )
                _ARGS_FOR_AUTO_XORG+="--$1"
                return 0 ;;

            "" )
                return 0 ;;

            * )
                return 1 ;;
        esac
    }

    function GetParseOrderForAutoXorg
    {
        if "$_HAS_ARG_AUTO_XORG_SORT_ORDER"; then
            return 1
        fi

        case "$1" in
            "first" | "last" )
                _ARGS_FOR_AUTO_XORG+=" --$1"
                return 0 ;;

            "" )
                return 0 ;;

            * )
                return 1 ;;
        esac
    }

    function GetArgsForStatic_VFIO
    {
        if [[ -z "$1" ]]; then
            return 0
        fi

        case "$1" in
            "grub" )
                _EXECUTE_VFIO_SETUP_STATIC_WITHOUT_GRUB_grub=true
                return 0 ;;

            "file" )
                _EXECUTE_VFIO_SETUP_STATIC_WITHOUT_GRUB_file=true
                return 0 ;;
        esac

        return 1
    }

    function GetArgsForParseSelection
    {
        for _ARG in "$@"; do
            if "$_HAS_ARG_PARSE_IOMMU_SELECT_ALL"; then
                return 0
            fi

            if [[ ! -z "$_ARG" ]] \
                && ( ! "$_DO_PARSE_DATABASE_FROM_FILE" \
                    || ( "$_DO_PARSE_DATABASE_FROM_FILE" \
                    && [[ "$_ARG" != "$_DATABASE_FILE" ]] )); then
                case "$_ARG" in
                    "all" )
                        AddAll_IOMMU_GroupsToList
                        AddValid_IOMMU_GroupsToList || return 1
                        _HAS_ARG_PARSE_IOMMU_SELECT_ALL=true ;;

                    "no-vga" )
                        AddAll_IOMMU_GroupsToList
                        AddValid_IOMMU_GroupsToList || return 1
                        _HAS_ARG_PARSE_IOMMU_SELECT_ALL_NON_VGA=true ;;

                    * )
                        Add_IOMMU_GroupsToList "$_ARG" || return 1
                        AddValid_IOMMU_GroupsToList || return 1 ;;
                esac
            fi
        done

        return 0
    }

    function GetFileForParseSelection
    {
        if ! "$_DO_PARSE_DATABASE_FROM_FILE"; then
            return 0
        fi

        if "$_DO_PARSE_DATABASE_FROM_FILE" \
            && ( [[ ! -e "$1" ]] \
            || [[ ! -s "$1" ]] ); then
            return 1
        fi

        _DATABASE_FILE="$1"
        return 0
    }

    function GetOverrideArgsForZramSwap
    {
        case "$1" in
            "force" )
                _HAS_ARG_ZRAM_SWAP_OVERRIDE=true ;;

            * )
                return 1 ;;
        esac

        return 0
    }

    function GetUsage
    {
        IFS=$'\n'

        declare -a _OUTPUT=(
            "Usage:\t\tbash deploy-vfio [OPTION]... [ARGUMENTS]..."
            "Deploy a VFIO setup to a Linux Host that supports Para-virtualization or PCI Passthrough.\n"
            "  --help\tprint this help and exit"

            "\nParse IOMMU groups and reference chosen database for the system's PCI devices.\nOPTIONS:"
            "  -f, --file [filename]\tReference file database."
            "  -i, --internal\tReference local database."
            "  -o, --online\t\tReference online database."

            "\nARGUMENTS:"
            "  [filename]            Reference specific file."
            "  all\t\t\tSelect all IOMMU groups."
            "  no-vga\t\tSelect all IOMMU groups without VGA devices."
            "  [x-y,z]\t\tSelect specific IOMMU groups (comma separated, or ranges)."

            "\n  Example:"
            "    -f somefile.txt     Reference file 'somefile.txt' and begin parse."
            "    no-vga 14\t\tSelect group 14 and all non-VGA groups."
            "    1,14-16\t\tSelect groups 1, 14, 15, and 16."

            "\nPre-setup OPTIONS:"
            "  -c, --cpu\t\t\tAllocate CPU."
            "  -e, --evdev\t\t\tSetup a virtual KVM switch."
            "  -h, --hugepages\t\tCreate static hugepages (pages greater than 4 KiB) to allocate RAM for Guest(s)."
            "  --uninstall-essentials\tUndo changes made by preliminary setup."

            "\nHugepages ARGUMENTS:"
            "  2M, 1G\t\t\tHugepage size (2 MiB or 1 GiB)."
            "  [1-?]\t\t\t\tAmount of Hugepages (maximum amount is total memory subtracted by 4 GiB)."

            "\n  Example:"
            "    1G 16\t\t\t1 GiB hugepage 16\t== 16 GiB allocated to hugepages."
            "    2M 8192\t\t\t2 MiB hugepage 8912\t== 16 GiB allocated to hugepages."

            "\nMain setup OPTIONS:"
            "  -m, --multiboot\t\tCreate multiple GRUB entries for a Multi VGA VFIO setup."
            "  -s, --static\t\t\tCreate a single GRUB entry/Install a Single VGA VFIO setup."
            "  -u, --uninstall\t\tUndo an existing VFIO setup."

            "\n  Example:"
            "    -l -m\t\t\tParse against local database, then deploy a Multi VGA VFIO setup."
            "    -s -o\t\t\tParse against online database, then deploy a Static VFIO setup."
            "\nPost-setup OPTIONS:"
            "  --audio-loopback\tInstall the audio loopback service.\tLoopback audio from Guest to Host (over Line-out to Line-in)."
            "  --auto-xorg\t\tInstall auto-Xorg.\t\t\tSystem service to find and set a valid Host boot VGA device for Xorg."
            "  --hooks\t\tInstall recommended Libvirt hooks."

            "\nauto-xorg ARGUMENTS:"
            "  first  [vendor]\tFind the first valid VGA device."
            "  last   [vendor]\tFind the last valid VGA device."
            "  [sort] amd\t\tPrefer AMD or ATI."
            "  [sort] intel\t\tPrefer Intel."
            "  [sort] nvidia\t\tPrefer NVIDIA."
            "  [sort] other\t\tPrefer any other brand."

            "\nzram-swap ARGUMENTS:"
            "  force\t\t\tForce changes, even if zram-swap is allocated and in use."
            "  [fraction]\t\tSet the fraction of total available memory."

            "\n  Example (assume a Host with 32 GiB of RAM):"
            "    force 1/4\t\tCompress 8 GiB of RAM, to create 16 GiB of swap, with 16 GiB free."
        )

        echo -e "${_OUTPUT[*]}"
        unset IFS
        return 0
    }

    function SetOptions
    {
        if [[ -z "$@" ]]; then
            return 0
        fi

        GetOption "$@" || return 1
        return 0
    }
# </code>

# <params>
    declare -g _ARGS_FOR_AUTO_XORG=""
    declare -g _DATABASE_FILE=""

    # <remarks> Statements </remarks
    declare -g _OUTPUT_INVALID_ANSWER="$_PREFIX_ERROR Failed to answer."
    declare -g _OUTPUT_INVALID_OPTION="$_PREFIX_ERROR Invalid option."

    # <remarks> Flags </remarks
    declare -g _ASK_TO_EXECUTE_POST_SETUPS=true
    declare -g _ASK_TO_EXECUTE_PRE_SETUPS=true
    declare -g _ASK_TO_EXECUTE_VFIO_SETUP=true
    declare -g _ASK_TO_EXECUTE_VFIO_SETUP_STATIC_WITH_GRUB=true
    declare -g _DO_PARSE_DATABASE_FROM_CACHE=false
    declare -g _DO_PARSE_DATABASE_FROM_FILE=false
    declare -g _DO_PARSE_DATABASE_FROM_INTERNET=false
    declare -g _EXECUTE_PRE_SETUP_EVDEV=false
    declare -g _EXECUTE_PRE_SETUP_HUGEPAGES=false
    declare -g _EXECUTE_PRE_SETUP_STATIC_ISOLCPU=false
    declare -g _EXECUTE_PRE_SETUP_UNINSTALL=false
    declare -g _EXECUTE_POST_SETUP_AUDIO_LOOPBACK=false
    declare -g _EXECUTE_POST_SETUP_AUTO_XORG=false
    declare -g _EXECUTE_POST_SETUP_STATIC_LIBVIRT_HOOKS=false
    declare -g _EXECUTE_POST_SETUP_ZRAM_SWAP=false
    declare -g _EXECUTE_POST_SETUP_UNINSTALL=false
    declare -g _EXECUTE_VFIO_SETUP_MULTIBOOT_WITH_GRUB=false
    declare -g _EXECUTE_VFIO_SETUP_STATIC_WITH_GRUB=true
    declare -g _EXECUTE_VFIO_SETUP_STATIC_WITHOUT_GRUB=false
    declare -g _EXECUTE_VFIO_SETUP_UNINSTALL=false
    declare -g _HAS_ARG_AUTO_XORG_PREFERRED_VENDOR=false
    declare -g _HAS_ARG_AUTO_XORG_SORT_ORDER=false
    declare -g _HAS_ARG_PARSE_IOMMU_SELECT_ALL=false
    declare -g _HAS_ARG_PARSE_IOMMU_SELECT_ALL_NON_VGA=false
    declare -g _HAS_ARG_ZRAM_SWAP_OVERRIDE=false
    declare -g _HAS_ARG_ZRAM_SWAP_SET_FRACTION=false
    declare -g _HAS_EXECUTED_PRE_SETUP_STATIC_ISOLCPU=false
# </params>