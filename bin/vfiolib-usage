#!/bin/bash sh

#
# Filename:         vfiolib-usage
# Description:      Usage
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source bashlib-all
# </code>

# <code>
    # <summary> Set arguments and options. </summary>
    # <param name="@"> array: the input parameters </param>
    # <returns> the exit code </returns>
    function GetOption
    {
        while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
            "--help" )
                return 1
                ;;

            # <remarks> Pre-setup: Parse IOMMU </remarks>
            "-f" | "--file" )
                GetSelect_IOMMU_Args $2 || return $?
                bool_parse_IOMMU_from_file=true
                ;;

            "-i" | "--internal" )
                GetSelect_IOMMU_Args $2 || return $?
                bool_parse_IOMMU_from_local=true
                ;;

            "-o" | "--online" )
                GetSelect_IOMMU_Args $2 || return $?
                bool_parse_IOMMU_from_internet=true
                ;;

            # <remarks> Pre-setup: Utilities </remarks>
            "-c" | "--cpu" )
                bool_alloc_cpu=true
                ;;

            "-e" | "--evdev" )
                bool_evdev=true
                ;;

            "-h" | "--hugepages" )
                GetHugepageByteSize $2 || GetHugepageCount $2 || return $?
                GetHugepageByteSize $3 || GetHugepageCount $3 || return $?
                bool_hugepages=true
                ;;

            "--uninstall-utils" )
                bool_uninstall_utils=true
                ;;

            "--uninstall-pre-setup" )
                bool_uninstall_utils=true
                ;;

            # <remarks> Main setup </remarks>
            "-m" | "--multiboot" )
                GetArgsForStatic_VFIO $1 || return $?
                GetArgsForStatic_VFIO $2 || return $?
                bool_multiboot_vfio=true
                ;;

            "-s" | "--static" )
                bool_static_vfio=true
                ;;

            "-u" | "--uninstall" )
                bool_uninstall_vfio=true
                ;;

            # <remarks> Post-setup: Extras </remarks>
            "-H" | "--hooks" )
                bool_libvirt_hooks=true
                ;;

            "-l" | "--looking-glass" )
                bool_looking_glass=true
                ;;

            "-L" | "--audio-loopback" )
                bool_audio_loopback=true
                ;;

            "-S" | "--scream" )
                bool_scream=true
                ;;

            "-x" | "--auto-xorg" )
                bool_auto_xorg=true
                ;;

            "-z" | "--zram-swap" )
                GetZramSwapSize $1 || return $?
                GetZramSwapOverride $2
                bool_zram_swap=true
                ;;

            "--uninstall-extras" )
                bool_uninstall_extras=true
                ;;

            # <remarks> Else </remarks>
            "" )
                ;;

            * )
                echo -e "${var_prefix_warn} Invalid input."
                return 1
                ;;
        esac; shift; done

        [ "$1" == '--' ] && shift
        return 0
    }

    # <summary> Set option for given argument. </summary>
    # <param name="1"> string: the option </param>
    # <returns> the exit code </returns>
    function GetArgsForStatic_VFIO
    {
        IsString $1 &> /dev/null || return 0

        case $1 in
            "grub" )
                bool_static_vfio_grub=true
                return 0
                ;;

            "file" )
                bool_static_vfio_file=true
                return 0
                ;;
        esac

        return 1
    }

    # <summary> Set option for given argument. </summary>
    # <param name="1"> string: the option </param>
    # <returns> the exit code </returns>
    function GetHugepageByteSize
    {
        IsString $1 &> /dev/null || return 0

        if [[ $1 == "2M" ]] || [[ $1 == "1G" ]]; then
            bool_hugepage_set_size=true
            declare -g str_huge_page_byte_prefix=$1
            return 0
        fi

        return 1
    }

    # <summary> Set option for given argument. </summary>
    # <param name="1"> int: the option </param>
    # <returns> the exit code </returns>
    function GetHugepageCount
    {
        if IsNum $1 &> /dev/null && [[ $1 -gt 0 ]]; then
            bool_hugepage_set_count=true
            declare -g int_huge_page_count=$1
        fi

        return 1
    }

    # <summary> Set option for given argument. </summary>
    # <param name="1"> string: the option </param>
    # <returns> the exit code </returns>
    function GetSelect_IOMMU_Args
    {
        case $1 in
            "all" )
                bool_select_all_IOMMU=true
                ;;

            * )
                return 1
                ;;
        esac

        return 0
    }

    # <summary> Prints the usage. </summary>
    # <returns> the exit code </returns>
    function GetUsage
    {
        IFS=$'\n'

        declare -a arr_output=(
            "Usage:\t\tbash deploy-vfio.bash [OPTION]... [ARGUMENTS]..."
            "Deploy a VFIO setup to a Linux Host that supports Para-virtualization and PCI Passthrough.\n"
            "  --help\tprint this help and exit"

            "\nParse IOMMU groups and reference chosen database for the system's PCI devices.\nOPTIONS: *"
            "  -f, --file\t\tReference file database."
            "  -i, --internal\tReference local database."
            "  -o, --online\t\tReference online database."

            "\nARGUMENTS: *"
            "  all\t\t\tSelect all IOMMU groups."
            "  no-vga\t\tSelect all IOMMU groups without VGA devices."
            "  [x-y,z]\t\tSelect specific IOMMU groups (comma separated, or ranges)."

            "\n  Example:"
            "    no-vga 14\t\tSelect group 14 and all non-VGA groups."
            "    1,14-16\t\tSelect groups 1, 14, 15, and 16."

            "\nPre-setup OPTIONS: *"
            "  -c, --cpu\t\t\tAllocate CPU."
            "  -e, --evdev\t\t\tSetup a virtual KVM switch."
            "  -h, --hugepages\t\tCreate static hugepages (pages greater than 4 KiB) to allocate RAM for Guest(s)."
            "  --uninstall-utils\t\tUndo changes made by preliminary setup."

            "\nHugepages ARGUMENTS: *"
            "  2M, 1G\t\t\tHugepage size (2 MiB or 1 GiB)."
            "  [1-?]\t\t\t\tAmount of Hugepages (maximum amount is total memory subtracted by 4 GiB)."

            "\n  Example:"
            "    1G 16\t\t\t1 GiB hugepage * 16\t== 16 GiB allocated to hugepages."
            "    2M 8192\t\t\t2 MiB hugepage * 8912\t== 16 GiB allocated to hugepages."

            "\nMain setup OPTIONS: *"
            "  -m, --multiboot\t\tCreate multiple GRUB entries for a Multi VGA VFIO setup."
            "  -s, --static\t\t\tInstall a Single VGA VFIO setup."
            "  -u, --uninstall\t\tUndo an existing VFIO setup."

            "\n  Example:"
            "    -l -m\t\t\tParse against local database, then deploy a Multi VGA VFIO setup."
            "    -s -o -p\t\t\tSetup hugepages, parse against online database, then deploy a Static VFIO setup."

            "\nPost-setup OPTIONS:"
            "  -H, --hooks\t\tInstall recommended libvirt-hooks and services."
            "  -l, --looking-glass\tInstall LookingGlass.\t\t\tStream video (and audio) from Guest to Host over PCI bus using shared-memory device."
            "  -L, --audio-loopback\tInstall the audio loopback service.\tLoopback audio from Guest to Host (over Line-out to Line-in). *"
            "  -S, --scream\t\tInstall Scream.\t\t\t\tStream audio from Guest to Host over virtual LAN."
            "  -z, --zram-swap\tCreate compressed (~ 2:1) RAM swap.\tReduce chances of memory exhaustion for Host."
            "  --uninstall-extras\tUndo changes made by post-setup. *"

            "\nzram-swap ARGUMENTS:"
            "  force\t\t\tForce changes, even if zram-swap is allocated and in use. *"
            "  [fraction]\t\tSet the fraction of total available memory."

            "\n  Example (assume a Host with 32 GiB of RAM):"
            "    force 1/4\t\tCompress 8 GiB of RAM, to create 16 GiB of swap, with 16 GiB free."
            "\n* Options that skip *all* user prompts."
        )

        echo -e "${arr_output[*]}"
        unset IFS
        return 0
    }

    # <summary> Set option for given argument. </summary>
    # <param name="1"> string: the option </param>
    # <returns> the exit code </returns>
    function GetZramSwapOverride
    {
        case $1 in
            "force" )
                bool_zram_swap_override=true
                ;;

            * )
                return 1
                ;;
        esac

        return 0
    }

    # <summary> Set option for given argument. </summary>
    # <param name="1"> string: the option </param>
    # <returns> the exit code </returns>
    function GetZramSwapSize
    {
        IsString $1 &> /dev/null || return 0

        case $1 in
            *"/"* )
                ;;
            * )
                echo -e "${var_prefix_error} Not a fraction."
                return 1
                ;;
        esac

        local var_numerator=$( echo $1 | cut -d '/' -f1 )
        local var_denominator=$( echo $1 | cut -d '/' -f2 )

        if ! IsNum $var_numerator || ! IsNum $var_numerator; then
            return $?
        fi

        if [[ $var_numerator -lt $var_denominator ]] || [[ $var_denominator -gt 1 ]]; then
            bool_zram_swap_set_fraction=true
            declare -g str_zram_swap_fraction=$1
            return 0
        elif [[ $var_denominator -eq 0 ]]; then
            IsNum ""
            return $?
        else
             echo -e "${var_prefix_error} Invalid fraction."
        fi

        return 1
    }

    # <summary> Sets the options. Exit early (Pass) if input is null. Else, exit early (Fail) if input is invalid. </summary>
    # <param name="@"> array: the input parameters </param>
    # <returns> the exit code </returns>
    function SetOptions
    {
        for var_option in $@; do
            IsString $var_option &> /dev/null || return 0
            GetOption $var_option || return $?
        done

        return 0
    }
# </code>

# <params>
    # <remarks> Get script directories </remarks
    GetScriptDir
    declare -g str_files_dir="$( find . -name files | uniq | head -n1 | cut -c2- )/"

    # <remarks> Toggles </remarks
    declare -g bool_is_connected_to_Internet=false

    # <remarks> Usage toggles </remarks
    declare -g bool_alloc_cpu=false
    declare -g bool_audio_loopback=false
    declare -g bool_auto_xorg=false
    declare -g bool_evdev=false
    declare -g bool_hugepages=false
    declare -g bool_hugepage_set_count=false
    declare -g bool_hugepage_set_size=false
    declare -g bool_libvirt_hooks=false
    declare -g bool_looking_glass=false
    declare -g bool_multiboot_vfio=false
    declare -g bool_parse_IOMMU_from_file=false
    declare -g bool_parse_IOMMU_from_local=false
    declare -g bool_parse_IOMMU_from_internet=false
    declare -g bool_scream=false
    declare -g bool_select_all_IOMMU=false
    declare -g bool_static_vfio=false
    declare -g bool_uninstall_extras=false
    declare -g bool_uninstall_utils=false
    declare -g bool_uninstall_vfio=false
    declare -g bool_zram_swap=false
    declare -g bool_zram_swap_override=false
    declare -g bool_zram_swap_set_fraction=false
# </params>