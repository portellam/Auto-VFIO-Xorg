#!/bin/bash sh

#
# Filename:         vfiolib-usage
# Description:      Usage
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source bashlib-all
# </code>

# <code>
    # <summary> Gets the current option </summary>
    function GetOption
    {
        while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
            "-c" | "--cpu" )
                bool_alloc_cpu=true
                ;;

            "-e" | "--evdev" )
                bool_evdev=true
                ;;

            "-f" | "--file" )
                bool_parse_IOMMU_from_file=true
                ;;

            "-h" | "--help" )
                return 1
                ;;

            "-H" | "--hooks" )
                bool_libvirt_hooks=true
                ;;

            "-i" | "--internet" )
                bool_parse_IOMMU_from_internet=true
                ;;

            "-l" | "--looking-glass" )
                bool_looking_glass=true
                ;;

            "-L" | "--loopback" )
                bool_audio_loopback=true
                ;;

            "-m" | "--multiboot" )
                bool_multiboot=true
                ;;

            "-p" | "--hugepages" )
                bool_hugepages=true
                ;;

            "-s" | "--static" )
                bool_static=true
                ;;

            "-S" | "--scream" )
                bool_scream=true
                ;;

            "-S" | "--uninstall" )
                bool_uninstall=true
                ;;

            "-z" | "--zram-swap" )
                bool_zram_swap=true
                ;;

            "" )
                ;;

            * )
                echo -e "${var_prefix_warn} Invalid input."
                return 1
                ;;
        esac; shift; done

        if [[ "$1" == '--' ]]; then shift; fi
        IsString "${var_get_preferred_vendor}" &> /dev/null || SetPreferredBrand
        return 0
    }

    # <summary> Gets the usage. </summary>
    function GetUsage
    {
        IFS=$'\n'

        declare -ar arr_output=(
            "Usage: bash vfiolib-all [OPTION]..."
            "Deploy a PCI Passthrough (VFIO) setup.\n"
            "\t-h, --help\t\tPrint this usage statement"
            "\nParse PCI:"
            "\t-f, --file\t\tReference file database"
            "\t-i, --internet\t\tReference online database"
            "\nSetup:"
            "\t-m, --multiboot\t\tCreate multiple GRUB entries for a Multi VGA VFIO setup"
            "\t-s, --static\t\tInstall a Single VGA VFIO setup"
            "\t-u, --uninstall\t\tUndo an existing VFIO setup"
            "\nExtras:"
            "\t-c, --cpu\t\tAllocate CPU (to guests)"
            "\t-e, --evdev\t\tSetup a virtual KVM (keyboard video mouse) switch"
            "\t-H, --hooks\t\tInstall recommended libvirt-hooks (scripts) and services"
            "\t-l, --looking-glass\tInstall LookingGlass (Guest video and audio capture)"
            "\t-L, --loopback\t\tInstall the audio loopback service"
            "\t-p, --hugepages\t\tAllocate RAM (to guests)"
            "\t-S, --scream\t\tInstall Scream (Guest audio capture)"
            "\t-z, --zram-swap\t\tCreate swap in RAM (zram-swap)"

            "\nExample:"
            "\tbash vfiolib-all -m \t\tParse PCI locally, then deploy a Multiboot VFIO setup."
            "\tbash vfiolib-all -s -i -p\tParse PCI from Internet, to re-deploy a Static VFIO setup, with hugepages."
        )

        echo -e "${arr_output[*]}"
        return 0
    }

    # <summary> Sets the options. Exit early (Pass) if input is null. Else, exit early (Fail) if input is invalid. </summary>
    # <param name="$@"> array: the input parameters </param>
    function SetOptions
    {
        for var_option in $@; do
            IsString $var_option &> /dev/null || return 0
            GetOption $var_option || return $?
        done

        return 0
    }
# </code>

# <params>
    # <remarks> Get script directories </remarks
    GoToScriptDir
    declare -g str_files_dir="$( find . -name files | uniq | head -n1 | cut -c2- )/"

    # <remarks> Toggles </remarks
    declare -g bool_is_connected_to_Internet=false

    # <remarks> Usage toggles </remarks
    declare -g bool_alloc_cpu=false
    declare -g bool_audio_loopback=false
    declare -g bool_evdev=false
    declare -g bool_hugepages=false
    declare -g bool_libvirt_hooks=false
    declare -g bool_looking_glass=false
    declare -g bool_multiboot=false
    declare -g bool_parse_IOMMU_from_file=false
    declare -g bool_parse_IOMMU_from_internet=false
    declare -g bool_scream=false
    declare -g bool_static=false
    declare -g bool_uninstall=false
    declare -g bool_zram_swap=false
# </params>