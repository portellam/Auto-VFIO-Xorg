#!/bin/bash sh

#
# Filename:         bashlib-input
# Description:      User input
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source bashlib-globals
    source bashlib-misc
    source bashlib-vars
# </code>

# <summary> User input </summary>
# <code>
    # <summary> Ask user Yes/No, read input and return exit code given answer. </summary>
    # <param name="1"> string: the output statement </param>
    # <returns> the exit code </returns>
    function ReadInput
    {
        # <params>
        local str_no="N"
        local str_yes="Y"
        local str_output=""
        # </params>

        IsString $1 &> /dev/null && str_output="$1 "
        str_output+="${var_green}[Y/n]:${var_reset_color}"

        for int_count in ${arr_count_tries[@]}; do

            # <remarks> Append output. </remarks>
            echo -en "${str_output} "
            read var_input
            var_input=$( echo $var_input | tr '[:lower:]' '[:upper:]' )

            # <remarks> Check if input is valid. </remarks>
            if IsString $var_input; then
                case $var_input in
                    ""${str_yes}"" )
                        return 0;;
                    "${str_no}" )
                        return 1;;
                esac
            fi

            # <remarks> Input is not valid. </remarks>
            echo -e "${str_output_var_is_not_valid}"
        done

        # <remarks> After given number of attempts, input is set to default. </remarks>
        str_output="Exceeded max attempts. Choice is set to default: ${var_yellow}${str_no}${var_reset_color}"
        echo -e "${str_output}"
        return 1
    }

    # <summary> Ask for a number, within a given range, and return given number. </summary>
    # <param name="1"> string: the output statement </param>
    # <paramref name="2"> int: the answer </paramref>
    # <param name="3"> num: absolute minimum </param>
    # <param name="4"> num: absolute maximum </param>
    # <returns> the answer </returns>
    function ReadInputFromRangeOfTwoNums
    {
        if ( ! IsNum $3 || ! IsNum $4 ) &> /dev/null; then
            SaveExitCode
            echo -e "${str_fail_invalid_extrema}"
            return $int_exit_code
        fi

        IsPointer $2 || return $?

        # <params>
        local str_output=""
        # </params>

        IsString $1 &> /dev/null && str_output="$1 "
        str_output+="${var_green}[${3}-${4}]:${var_reset_color}"

        for int_count in ${arr_count_tries[@]}; do
            echo -en "${str_output} "
            eval 'read $'"$2"

            if IsNum $( eval '$'"$2" ) && [[ $( eval '$'"$2" ) -ge $3 && $( eval '$'"$2" ) -le $4 ]]; then
                return 0
            fi

            echo -e "${str_output_var_is_not_valid}"
        done

        # <remarks> After given number of attempts, input is set to default. </remarks>
        eval $( "$2"'="$3"' ) || return 1
        str_output="Exceeded max attempts. Choice is set to default: ${var_yellow}$( eval '$'"$2" )${var_reset_color}"
        echo -e "${str_output}"
        return 1
    }

    # <summary> Ask user for multiple choice, and return chosen answer. </summary>
    # <param name="1"> string: the output statement </param>
    # <paramref name="2"> string: the answer </paramref>
    # <param name="3" name="4" name="5" name="6" name="7" name="8" name="9"> var: multiple choice </param>
    # <param name="arr_count_tries"> array: the countdown list </param>
    # <returns> the answer </returns>
    function ReadMultipleChoiceIgnoreCase
    {
        # <remarks> Minimum multiple choice are two answers. </remarks>
        if ( ! IsString $3 || ! IsString $4 ) &> /dev/null; then
            SaveExitCode
            echo -e "${str_fail_not_enough_answers}"
            return $int_exit_code
        fi

        IsPointer $2 || return $?

        # <params>
        declare -a arr_list_of_answers=( )
        local str_output=""
        # </params>

        arr_list_of_answers+=( $3 )
        arr_list_of_answers+=( $4 )
        IsString $9 &> /dev/null && arr_list_of_answers+=( $5 )
        IsString $9 &> /dev/null && arr_list_of_answers+=( $6 )
        IsString $9 &> /dev/null && arr_list_of_answers+=( $7 )
        IsString $9 &> /dev/null && arr_list_of_answers+=( $8 )
        IsString $1 &> /dev/null && str_output="$1 "
        str_output+="${var_green}[${arr_list_of_answers[@]}]:${var_reset_color}"

        for int_count in ${arr_count_tries[@]}; do
            echo -en "${str_output} "
            eval 'read $'"$2"

            if IsString $( eval '$'"$2" ); then
                for var_element in ${arr_list_of_answers[@]}; do
                    if [[ $( echo $var_element | tr '[:lower:]' '[:upper:]' ) == $( eval '$'"$2" ) ]]; then
                        eval "$2"'="${var_element}"' || return 1
                        return 0
                    fi
                done
            fi

            echo -e "${str_output_var_is_not_valid}"
        done

        # <remarks> After given number of attempts, input is set to default. </remarks>
        eval $( "$2"'="${arr_list_of_answers[0]}"' ) || return 1
        str_output="Exceeded max attempts. Choice is set to default: ${var_yellow}$( eval '$'"$2" )${var_reset_color}"
        echo -e "${str_output}"
        return 1
    }

    # <summary> Ask user for multiple choice, and return chosen answer. </summary>
    # <param name="1"> string: the output statement </param>
    # <paramref name="2"> string: the answer </paramref>
    # <param name="3" name="4" name="5" name="6" name="7" name="8" name="9"> var: multiple choice </param>
    # <param name="arr_count_tries"> array: the countdown list </param>
    # <returns> the answer </returns>
    function ReadMultipleChoiceMatchCase
    {
        # <remarks> Minimum multiple choice are two answers. </remarks>
        if ( ! IsString $3 || ! IsString $4 ) &> /dev/null; then
            SaveExitCode
            echo -e "${str_fail_not_enough_answers}"
            return $int_exit_code
        fi

        IsPointer $2 || return $?

        # <params>
        declare -a arr_list_of_answers=( )
        local str_output=""
        # </params>

        arr_list_of_answers+=( $3 )
        arr_list_of_answers+=( $4 )
        IsString $9 &> /dev/null && arr_list_of_answers+=( $5 )
        IsString $9 &> /dev/null && arr_list_of_answers+=( $6 )
        IsString $9 &> /dev/null && arr_list_of_answers+=( $7 )
        IsString $9 &> /dev/null && arr_list_of_answers+=( $8 )
        IsString $1 &> /dev/null && str_output="$1 "
        str_output+="${var_green}[${arr_list_of_answers[@]}]:${var_reset_color}"

        for int_count in ${arr_count_tries[@]}; do
            echo -en "${str_output} "
            eval 'read $'"$2"

            if IsString $( eval '$'"$2" ); then
                for var_element in ${arr_list_of_answers[@]}; do
                    if [[ "${var_element}" == $( eval '$'"$2" ) ]]; then
                        eval "$2"'="${var_element}"' || return 1
                        return 0
                    fi
                done
            fi

            echo -e "${str_output_var_is_not_valid}"
        done

        # <remarks> After given number of attempts, input is set to default. </remarks>
        eval $( "$2"'="${arr_list_of_answers[0]}"' ) || return 1
        str_output="Exceeded max attempts. Choice is set to default: ${var_yellow}$( eval '$'"$2" )${var_reset_color}"
        echo -e "${str_output}"
        return 1
    }
# </code>

# <params>
    # <remarks> Output statements </remarks>
    declare -g str_fail_invalid_extrema="${var_prefix_error} Extrema are not valid."
    declare -g str_fail_not_enough_answers="${var_prefix_error} Insufficient multiple choice answers."
# </params>