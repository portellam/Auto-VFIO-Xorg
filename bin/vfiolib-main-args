#!/bin/false

#
# Filename:       vfiolib-main-args
# Description:    Argument logic for main setup.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

# <sources>
  source vfiolib-main-setup
# </sources>

# <functions>
  function DeclareParameters
  {
    if "${MAIN_SETUP_ARE_PARAMS_SET}"; then
      return 0
    fi

    declare -g MAIN_SETUP_ARE_PARAMS_SET=true

    declare -g MAIN_SETUP_ASK_TO_EXECUTE_ALL=true
    declare -g MAIN_SETUP_DATABASE_FILE=""
    declare -g MAIN_SETUP_DO_EXECUTE_MULTIBOOT=false
    declare -g MAIN_SETUP_DO_EXECUTE_STATIC=false
    declare -g MAIN_SETUP_DO_EXECUTE_STATIC_WITH_GRUB=false
    declare -g MAIN_SETUP_DO_EXECUTE_STATIC_WITHOUT_GRUB=false
    declare -g MAIN_SETUP_DO_PARSE_DATABASE_FROM_CACHE=false
    declare -g MAIN_SETUP_DO_PARSE_DATABASE_FROM_FILE=false
    declare -g MAIN_SETUP_DO_PARSE_DATABASE_FROM_INTERNET=false
    declare -g MAIN_SETUP_DO_PARSE_DATABASE_FROM_XML=false
    declare -g MAIN_SETUP_HAS_ARG_PARSE_IOMMU=false
    declare -g MAIN_SETUP_HAS_ARG_PARSE_IOMMU_SELECT_ALL=false
    declare -g MAIN_SETUP_HAS_ARG_PARSE_IOMMU_SELECT_SOME=false
    declare -g MAIN_SETUP_DO_SKIP_ALL=false
  }

  function IsArgumentOfMainSetup
  {
    IsArgumentSkipMainSetup "$@" || return 1
    IsArgumentUninstallMainSetup "$@" || return 1
    IsArgumentParseDatabase "$@" || return 1
    IsArgumentParseIOMMUGroups "$@" || return 1
    IsArgumentDoMultibootSetup "$@" || return 1
    IsArgumentDoStaticSetup "$@" || return 1
  }

  function IsArgumentDoMultibootSetup
  {
    if [[ "${1}" == "-m" ]] \
      || [[ "${1}" == "--multiboot" ]]; then
      shift
      GetArgumentsForMultibootSetup "$@" || return 1
      ShiftInputIfOptionHasArgument "${1}"
      MAIN_SETUP_ASK_TO_EXECUTE_ALL=false
      MAIN_SETUP_DO_EXECUTE_MULTIBOOT=true
    fi
  }

  function GetArgumentsForMultibootSetup
  {
    case "${1}" in
      "default" )
        MAIN_SETUP_DO_EXECUTE_MULTIBOOT_PREFER_DEFAULT=true
        return 0 ;;

      "first" )
        MAIN_SETUP_DO_EXECUTE_MULTIBOOT_PREFER_FIRST=true
        return 0 ;;

      "last" )
        MAIN_SETUP_DO_EXECUTE_MULTIBOOT_PREFER_LAST=true
        return 0 ;;

      * )
        if DoesIOMMUGroupHaveVGADevice "${1}" \
          && SetPreferredIOMMUGroupForMultiboot "${1}"; then
          return 0
        fi ;;
    esac

    if [[ ! -z "${1}" ]]; then
      PrintStatementInvalidArgument "${1}"
    fi

    return 1
  }

  function IsArgumentDoStaticSetup
  {
    if [[ "${1}" == "-s" ]] \
      || [[ "${1}" == "--static" ]]; then
      shift
      GetArgumentsForStaticSetup "$@" || return 1
      ShiftInputIfOptionHasArgument "${1}"
      MAIN_SETUP_ASK_TO_EXECUTE_ALL=false
      MAIN_SETUP_DO_EXECUTE_STATIC=true
    fi
  }

  function GetArgumentsForStaticSetup
  {
    if [[ -z "${1}" ]]; then
      return 0
    fi

    case "${1}" in
      "grub" )
        MAIN_SETUP_DO_EXECUTE_STATIC_WITH_GRUB=true
        return 0 ;;

      "file" )
        MAIN_SETUP_DO_EXECUTE_STATIC_WITHOUT_GRUB=true
        return 0 ;;
    esac

    PrintStatementInvalidArgument "${1}"
    return 1
  }

  # TODO: fix here.
  function IsArgumentParseDatabase
  {
    case "${1}" in
      "-f" | "--file" )
        shift
        MAIN_SETUP_DO_PARSE_DATABASE_FROM_FILE=true
        MAIN_SETUP_DATABASE_FILE="${1}" ;;                      # TODO: validate file input.

      "-i" | "--internal" )
        MAIN_SETUP_DO_PARSE_DATABASE_FROM_CACHE=true ;;

      "-o" | "--online" )
        MAIN_SETUP_DO_PARSE_DATABASE_FROM_INTERNET=true ;;

      "-x" | "--xml" )
        MAIN_SETUP_DO_PARSE_DATABASE_FROM_XML=true ;;

      * )
        return 0 ;;
    esac

    MAIN_SETUP_ASK_TO_EXECUTE_ALL=false
  }

  function IsArgumentParseIOMMUGroups
  {
    case "${1}" in
      "-p" | "--parse" )
        shift
        GetArgumentsForParseSelection "$@" || return 1
        ShiftInputIfOptionHasArgument "${1}"
        MAIN_SETUP_ASK_TO_EXECUTE_ALL=false ;;
    esac
  }

  function GetArgumentsForParseSelection
  {
    if [[ -z "${1}" ]]; then
      IsIOMMUGroupIDValid "${1}"
      return 1
    fi

    local -i count_delim=$( echo "${1}" | grep -o "," | wc -l )
    (( count_delim++ ))

    while [[ "${count_delim}" -gt 0 ]] \
      && ! "${MAIN_SETUP_HAS_ARG_PARSE_IOMMU_SELECT_ALL}"; do
      GetThisArgumentForParseSelection "$@" || return 1
      (( count_delim-- ))
    done

    MAIN_SETUP_HAS_ARG_PARSE_IOMMU=true
  }

  function GetThisArgumentForParseSelection
  {
    local argument=$( echo "${1}" | cut -d ',' -f "${count_delim}" )

    if [[ ! -z "${argument}" ]] \
      && ( ! "${MAIN_SETUP_DO_PARSE_DATABASE_FROM_FILE}" \
        || ( "${MAIN_SETUP_DO_PARSE_DATABASE_FROM_FILE}" \
        && [[ "${argument}" != "${MAIN_SETUP_DATABASE_FILE}" ]] )); then
      case "${argument}" in
        "all" )
          MAIN_SETUP_HAS_ARG_PARSE_IOMMU_SELECT_ALL=true
          AddValidIOMMUGroupsParseList || return 1 ;;

        "no-vga" )
          MAIN_SETUP_HAS_ARG_PARSE_IOMMU_SELECT_ALL_NON_VGA=true
          AddValidIOMMUGroupsParseList || return 1
          MAIN_SETUP_HAS_ARG_PARSE_IOMMU_SELECT_ALL_NON_VGA=false ;;

        * )
          MAIN_SETUP_HAS_ARG_PARSE_IOMMU_SELECT_SOME=true
          AddSomeIOMMUGroupsParseList "${argument}" || return 1 ;;
      esac
    fi
  }

  function IsArgumentSkipMainSetup
  {
    if [[ "${1}" == "--skip-vfio-setup" ]]; then
      MAIN_SETUP_DO_SKIP_ALL=true
      MAIN_SETUP_ASK_TO_EXECUTE_ALL=false
    fi
  }

  function IsArgumentUninstallMainSetup
  {
    if [[ "${1}" == "--uninstall-vfio-setup" ]]; then
      MAIN_SETUP_ASK_TO_EXECUTE_ALL=false
    fi
  }
# </functions>

# <code>
  DeclareParameters
  unset DeclareParameters
# </code