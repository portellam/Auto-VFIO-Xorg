#!/bin/bash sh

#
# Filename:         vfiolib-essentials
# Description:      Recommended pre-installation setups.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source vfiolib-calcs
    source vfiolib-parse
# </code>

# <params>
    declare -gi _HUGEPAGES_ALLOCATED_MEMORY=0

    # <remarks> Flag progress of setups </remarks>
    declare -g _IS_EVDEV_SETUP=false
    declare -g _IS_HUGEPAGES_SETUP=false
# </params>

# <code>
    # <summary>
    # Add user to necessary user groups.
    # </summary>
    function AddUserToGroups
    {
        if ! sudo adduser "$_USER" "input" &> /dev/null \
            || ! sudo adduser "$_USER" "libvirt" &> /dev/null; then
            echo -e "$_PREFIX_ERROR Failed to add user '$_USER' to groups."
            return 1
        fi

        return 0
    }

    # <summary>
    # isolcpus: Allocate host CPU cores (and/or threads), to reduce host overhead, and improve both host and guest performance.
    # </summary
    function AllocateCPUToGuest
    {
        function AskToContinue
        {
            for _TRIES_COUNT in $( seq 0 2 ); do
                read -r -p "Allocate CPU threads to Guest(s)? [Y/n]: " _ANSWER

                case "$_ANSWER" in
                    [Yy]* )
                        return 0 ;;

                    [Nn]* )
                        return 1 ;;

                    * )
                        echo "Please answer \"Y\" or \"N\"." ;;
                esac
            done

            echo -e "$_PREFIX_ERROR Failed to answer."
            return 1
        }

        function GetThreadByCoreAndSMT
        {
            _THREAD=$(( _CORE + ( _SMT_FACTOR * _TOTAL_CORES_COUNT ) ))             # NOTE: VS Code reports a syntax error here. There is none.
        }

        function GetThreadSetsForHostAndGuest
        {
            for _SMT_FACTOR in ${_SMT_FACTOR_LIST[@]}; do
                declare -a _HOST_THREADS_DELIM_LIST=( )
                declare -a _GUEST_THREADS_DELIM_LIST=( )
                local -i _THREAD

                # <remarks> Find thread sets for host. </remarks>
                for _CORE in ${_HOST_CORES_LIST[@]}; do
                    GetThreadByCoreAndSMT
                    _HOST_THREADS_LIST+=( "$_THREAD" )
                    _HOST_THREADS_DELIM_LIST+=( "$_THREAD" )
                done

                # <remarks> Find thread sets for guest(s). </remarks>
                for _CORE in ${_GUEST_CORES_LIST[@]}; do
                    GetThreadByCoreAndSMT
                    _GUEST_THREADS_LIST+=( "$_THREAD" )
                    _GUEST_THREADS_DELIM_LIST+=( "$_THREAD" )
                done

                # <remarks> Save thread sets to delimited list. </remarks>
                local -i _FIRST_THREAD_SET="${_HOST_THREADS_DELIM_LIST[0]}"
                local -i _LAST_THREAD_SET="${_HOST_THREADS_DELIM_LIST[-1]}"
                local _THREAD_SET="$_FIRST_THREAD_SET"

                if [[ "$_FIRST_THREAD_SET" -ne "$_LAST_THREAD_SET" ]]; then
                    local _THREAD_SET="$_FIRST_THREAD_SET-$_LAST_THREAD_SET"
                fi

                _HOST_THREADS_DELIM+="$_THREAD_SET,"

                local -i _FIRST_THREAD_SET="${_GUEST_THREADS_DELIM_LIST[0]}"
                local -i _LAST_THREAD_SET="${_GUEST_THREADS_DELIM_LIST[-1]}"
                local _THREAD_SET="$_FIRST_THREAD_SET"

                if [[ "$_FIRST_THREAD_SET" -ne "$_LAST_THREAD_SET" ]]; then
                    local _THREAD_SET="$_FIRST_THREAD_SET-$_LAST_THREAD_SET"
                fi

                _GUEST_THREADS_DELIM+="$_THREAD_SET,"
            done

            return 0
        }

        function Main
        {
            local -i _CORES_ALLOCATED_TO_HOST=1
            local -i _TOTAL_CORES_COUNT=$( cat /proc/cpuinfo | grep "cpu cores" | uniq | grep -o "[0-9]\+" )
            local -i _TOTAL_THREADS_COUNT=$( cat /proc/cpuinfo | grep "siblings" | uniq | grep -o "[0-9]\+" )

            # <remarks> Set maximum number of cores allocated to host. </remarks>
            if [[ "$_TOTAL_CORES_COUNT" -ge 4 ]]; then
                _CORES_ALLOCATED_TO_HOST=2

            elif [[ "$_TOTAL_CORES_COUNT" -le 3 ]] \
                && [[ "$_TOTAL_CORES_COUNT" -ge 2 ]]; then
                _CORES_ALLOCATED_TO_HOST=1

            else
                echo -e "$PREFIX_ERROR Insufficient CPU cores."
                return 1
            fi

            # <remarks> Get thread sets, for host and guest(s). </remarks>
            local -a _HOST_CORES_LIST=( $( seq 0 $(( "$_CORES_ALLOCATED_TO_HOST" - 1 )) ) )
            local -a _HOST_THREADS_LIST=( )
            local -a _GUEST_CORES_LIST=( $( seq "$_CORES_ALLOCATED_TO_HOST" $(( "$_TOTAL_CORES_COUNT" - 1 )) ) )
            local -a _GUEST_THREADS_LIST=( )
            local -i _SMT_FACTOR=$(( "$_TOTAL_THREADS_COUNT" / "$_TOTAL_CORES_COUNT" ))
            local -a _SMT_FACTOR_LIST=( $( seq 0 $(( "$_SMT_FACTOR" - 1 )) ) )
            local _HOST_THREADS_DELIM _GUEST_THREADS_DELIM
            GetThreadSetsForHostAndGuest

            # <remarks> Truncate last delimiter. </remarks>
            if [[ ${_HOST_THREADS_DELIM: -1} == "," ]]; then
                _HOST_THREADS_DELIM="${_HOST_THREADS_DELIM::-1}"
            fi

            if [[ ${_GUEST_THREADS_DELIM: -1} == "," ]]; then
                _GUEST_THREADS_DELIM="${_GUEST_THREADS_DELIM::-1}"
            fi

            # <remarks>
            # save output to string for cpuset and cpumask
            # example:
            #   host 0-1,8-9
            #   virt 2-7,10-15
            #
            # information
            # cores     bit masks       mask
            # 0-7       0b11111111      FF      # total cores
            # 0,4       0b00010001      11      # host cores
            #
            # 0-11      0b111111111111  FFF     # total cores
            # 0-1,6-7   0b000011000011  C3      # host cores
            #
            # </remarks>

            # <remarks> Find CPU mask. </remarks>
            local -r _GET_HEX_MASK='echo "obase=16; $_THREAD_decimal" | bc'
            local -i _HOST_THREADS_HEX_MASK=0
            local -i _TOTAL_THREADS_HEX_MASK=0

            # <remarks> Add each decimal mask to sum. </remarks>
            for _THREAD in ${_HOST_THREADS_LIST[@]}; do
                local -i _THREAD_decimal=$(( 2 ** $_THREAD ))
                local -i _THREAD_HEX_MASK=$( eval "$_GET_HEX_MASK" )
                _HOST_THREADS_HEX_MASK+="$_THREAD_HEX_MASK"
            done

            # <remarks> Convert hexadecimal mask into hexadecimal. </remarks>
            declare -g _HOST_THREADS_HEX=$( printf '%x\n' "$_HOST_THREADS_HEX_MASK" )
            local -i _TOTAL_THREADS_HEX_MASK=$(( ( 2 ** ${_TOTAL_THREADS_COUNT} ) - 1 ))
            # declare -g _GUEST_THREADS_HEX=$( printf '%x\n' "$_TOTAL_THREADS_HEX_MASK" )

            echo -e "Allocated to Host:\t$_HOST_THREADS_DELIM"
            echo -e "Allocated to Guest:\t$_GUEST_THREADS_DELIM"

            # <remarks> Save changes. </remarks>
            declare -g _LINE_GRUB_CMDLINE_ISOLCPU="isolcpus=$_GUEST_THREADS_DELIM nohz_full=$_GUEST_THREADS_DELIM rcu_nocbs=$_GUEST_THREADS_DELIM"
            return 0
        }

        if ! "$_EXECUTE_ISOLCPU_SETUP"; then
            AskToContinue || return 1
        fi

        Main "$@"
        PrintPassOrFail "Allocating CPU threads..."
        return "$_LAST_EXIT_CODE"
    }

    # <summary>
    # Hugepages: Allocate host memory (RAM) to 'hugepages'.
    # Eliminate the need to defragement memory, reduce host overhead, and improve both host and guest performance.
    # </summary
    function AllocateRAMToGuest
    {
        function AskForHugepageByteSize
        {
            if "$_IS_HUGEPAGES_SIZE_SET"; then
                return 0
            fi

            declare -gu _HUGEPAGES_BYTE_SUFFIX=""

            for _TRIES_COUNT in $( seq 0 2 ); do
                read -r -p "Enter size of Hugepages [2M/1g]: " _HUGEPAGES_BYTE_SUFFIX
                GetHugepageByteSize "$_HUGEPAGES_BYTE_SUFFIX" && return 0
            done

            echo -e "$_OUTPUT_INVALID_ANSWER"
            return 1
        }

        function AskForHugepageCount
        {

            if "$_IS_HUGEPAGES_COUNT_SET"; then
                return 0
            fi

            declare -gi _HUGEPAGES_COUNT=""

            for _TRIES_COUNT in $( seq 0 2 ); do
                read -r -p "Enter count of Hugepages [$_HUGEPAGES_MIN_SIZE-$_HUGEPAGES_MAX_SIZE]: " _HUGEPAGES_COUNT
                GetHugepageCount "$_HUGEPAGES_COUNT" && return 0
            done

            echo -e "$_OUTPUT_INVALID_ANSWER"
            return 1
        }

        function AskToContinue
        {
            for _TRIES_COUNT in $( seq 0 2 ); do
                read -r -p "Setup Hugepages? [Y/n]: " _ANSWER

                case "$_ANSWER" in
                    [Yy]* )
                        return 0 ;;

                    [Nn]* )
                        return 1 ;;

                    * )
                        echo "Please answer \"Y\" or \"N\"." ;;
                esac
            done

            echo -e "$_PREFIX_ERROR Failed to answer."
            return 1
        }

        function Main
        {
            _IS_HUGEPAGES_SETUP=false

            if ! [[ "$_INT_MAX_MEMORY" =~ ^[0-9]+$ ]]; then
                echo $_INT_MAX_MEMORY
                echo -e "$_PREFIX_ERROR Could not parse system memory."
                return 1
            fi

            if ! "$_IS_HUGEPAGES_COUNT_SET" \
                && ! "$_IS_HUGEPAGES_SIZE_SET" ; then
                echo -e "Hugepages is a feature which statically allocates system memory to pagefiles.\nGuest(s) can use Hugepages to a peformance benefit.\nThe greater the Hugepage size, the less fragmentation of memory, and the less latency/overhead of system memory-access.\n${var_yellow}NOTE:${var_reset_color} It is recommended to use a size which is a multiple of an individual memory channel/stick.\n${var_yellow}Example:${var_reset_color} Four (4) channels of 8 GB each, use 1x, 2x, or 3x (8 GB, 16 GB, or 24 GB).\n"
                AskToContinue || return 1
            fi

            AskForHugepageByteSize || return 1
            GetHugepageMinAndMaxSizes || return 1
            AskForHugepageCount || return 1
            GetMemoryAllocatedToHugepages || return 1
            IsHostMemorySufficientForHugepages || return 1
            declare -g _OUTPUT_GRUB_CMDLINE_HUGEPAGES="default_hugepagesz=$_HUGEPAGES_BYTE_SUFFIX hugepagesz=$_HUGEPAGES_BYTE_SUFFIX hugepages=$_HUGEPAGES_COUNT"
            _IS_HUGEPAGES_SETUP=true
            return 0
        }

        Main
        PrintPassOrFail "Allocating RAM to pages..."
        return "$_LAST_EXIT_CODE"
    }

    function ExecuteEssentials
    {
        AddUserToGroups || return 1

        if "$_EXECUTE_ALL_ESSENTIAL_SETUPS"; then
            AllocateCPUToGuest
            AllocateRAMToGuest
            VirtualKVM
            ModifyQEMU || return 1
            return 0
        fi

        if "$_EXECUTE_ISOLCPU_SETUP"; then
            AllocateCPUToGuest
        fi

        if "$_EXECUTE_HUGEPAGES_SETUP"; then
            AllocateRAMToGuest
        fi

        if "$_EXECUTE_EVDEV_SETUP"; then
            VirtualKVM
        fi

        ModifyQEMU || return 1
        return 0
    }

    # <summary>
    # libvirt-qemu: Append necessary changes to QEMU system file, including user groups, Evdev, Hugepages, and NVRAM (for UEFI guest(s)).
    # </summary>
    function ModifyQEMU
    {
        function Main
        {
            local -a _FILE_1_CONTENTS _FILE_1_CONTENTS_EVDEV_CGROUPS _FILE_2_CONTENTS
            local -a _FILE_1_CONTENTS_DEFAULT_CGROUPS=(
                "        \"/dev/null\", \"/dev/full\", \"/dev/zero\","
                "        \"/dev/random\", \"/dev/urandom\","
                "        \"/dev/ptmx\", \"/dev/KVM\","
                "        \"/dev/rtc\", \"/dev/hpet\""
            )
            # <remarks> Format input for Evdev. </remarks>
            if "$_IS_EVDEV_SETUP"; then
                for _DEVICE in ${_EVENT_DEVICES_LIST[@]}; do
                    _FILE_1_CONTENTS_EVDEV_CGROUPS+=( "        \"/dev/input/by-id/$_DEVICE\"," )
                done

                for _DEVICE in ${_INPUT_DEVICES_LIST[@]}; do
                    _FILE_1_CONTENTS_EVDEV_CGROUPS+=( "        \"/dev/input/by-id/$_DEVICE\"," )
                done
            fi

            # <remarks> Preface file contents. </remarks>
            _FILE_1_CONTENTS=( "${_DISCLAIMER_FILE_CONTENTS[@]}" )
            _FILE_2_CONTENTS=( "${_DISCLAIMER_FILE_CONTENTS[@]}" )
            _FILE_1_CONTENTS+=(
                ""
                "### User permissions ###"
            )

            # <remarks> Add user and group for Evdev. </remarks>
            if "$_IS_EVDEV_SETUP" \
                || "$_IS_SCREAM_SETUP"; then
                _FILE_1_CONTENTS+=(
                    "user = \"$_USER\""
                    "group = \"user\""
                )
            else
                _FILE_1_CONTENTS+=(
                    "#user = \"user\""
                    "#group = \"user\""
                )

                false
            fi

            # <remarks> Hugepages </remarks>
            _FILE_1_CONTENTS+=(
                ""
                "### Hugepages ###"
            )

            if "$_IS_HUGEPAGES_SETUP"; then
                _FILE_1_CONTENTS+=(
                    "hugetlbfs_mount = \"/dev/hugepages\""
                )
            else
                _FILE_1_CONTENTS+=(
                    "#hugetlbfs_mount = \"/dev/hugepages\""
                )

                false
            fi

            # <remarks> Add cgroups for Evdev. </remarks>
            _FILE_1_CONTENTS+=(
                ""
                "### Devices ###"
                "cgroup_device_acl = ["
            )

            if $_IS_EVDEV_SETUP; then
                _FILE_1_CONTENTS+=(
                    "${_FILE_1_CONTENTS_EVDEV_CGROUPS[@]}"
                    "${_FILE_1_CONTENTS_DEFAULT_CGROUPS[@]}"
                    "]"
                )

                _FILE_2_CONTENTS+=(
                    ""
                    "# EVDEV"
                    "/dev/input/* rw,"
                    "/dev/input/by-id/* rw,"
                )
            else
                _FILE_1_CONTENTS+=(
                    "${_FILE_1_CONTENTS_DEFAULT_CGROUPS[@]}"
                    "]"
                )

                false
            fi

            # <remarks> Adds NVRAM for EFI kernels in UEFI guest(s). </remarks>
            _FILE_1_CONTENTS+=(
                ""
                "nvram = ["
                "        \"/usr/share/OVMF/OVMF_CODE.fd:/usr/share/OVMF/OVMF_VARS.fd\","
                "        \"/usr/share/OVMF/OVMF_CODE.secboot.fd:/usr/share/OVMF/OVMF_VARS.fd\","
                "        \"/usr/share/AAVMF/AAVMF_CODE.fd:/usr/share/AAVMF/AAVMF_VARS.fd\","
                "        \"/usr/share/AAVMF/AAVMF32_CODE.fd:/usr/share/AAVMF/AAVMF32_VARS.fd\""
                "]"
            )

            # <remarks> Append changes to file(s). </remarks>
            if ! sudo echo -e "${_FILE_1_CONTENTS[*]}" >> "$_QEMU_DEST_PATH"; then
                echo -e "$_PREFIX_ERROR Failed to write to file '$_QEMU_DEST_PATH'."
            fi

            if ! sudo echo -e "${_FILE_2_CONTENTS[*]}" >> "$_APPARMOR_QEMU_DEST_PATH"; then
                echo -e "$_PREFIX_ERROR Failed to write to file '$_APPARMOR_QEMU_DEST_PATH'."
            fi

            return 0
        }

        IFS=$'\n'
        Main
        unset IFS
        PrintPassOrFail "Appending libvirt-qemu..."
        return "$_LAST_EXIT_CODE"
    }

    # <summary>
    # Evdev: Setup a virtual Keyboard-Video-Mouse switch (excluding the Video).
    # Will allow a user to swap between active guest(s) and host, with the use of a pre-defined macro (example: 'L-CTRL' + 'R-CTRL').
    # </summary>
    function VirtualKVM
    {
        function AskToContinue
        {
            for _TRIES_COUNT in $( seq 0 2 ); do
                read -r -p "Setup Evdev? [Y/n]: " _ANSWER

                case "$_ANSWER" in
                    [Yy]* )
                        return 0 ;;

                    [Nn]* )
                        return 1 ;;

                    * )
                        echo "Please answer \"Y\" or \"N\"." ;;
                esac
            done

            echo -e "$_PREFIX_ERROR Failed to answer."
            return 1
        }

        function Main
        {
            declare -ag _EVENT_DEVICES_LIST=( $( ls -l /dev/input/by-id | cut -d "/" -f2 | grep -v "total 0" ) )
            declare -ag _INPUT_DEVICES_LIST=( $( ls /dev/input/by-id ) )

            if [[ "${#_EVENT_DEVICES_LIST[@]}" -eq 0 ]] \
                ||[[ "${#_INPUT_DEVICES_LIST[@]}" -eq 0 ]]; then
                _IS_EVDEV_SETUP=false
                echo -e "$_PREFIX_ERROR Cannot parse input devices (by ID)."
                return 1
            fi

            _IS_EVDEV_SETUP=true
            return 0
        }

        if ! "$_EXECUTE_EVDEV_SETUP"; then
            echo -e "Evdev (Event Devices) is a method of creating a virtual KVM (Keyboard-Video-Mouse) switch between Host and Guest(s).\n${_SET_COLOR_YELLOW}HOW-TO:${_RESET_COLOR} Press 'L-CTRL' and 'R-CTRL' simultaneously.\n"
            AskToContinue || return 1
        fi

        Main
        PrintPassOrFail "Executing Evdev setup..."
        return "$_LAST_EXIT_CODE"
    }
# </code>