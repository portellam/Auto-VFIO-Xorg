#!/bin/bash sh

#
# Filename:         vfiolib-extras
# Description:      Recommended post-installation setups.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source vfiolib-calcs
    source vfiolib-common
    source vfiolib-files
    source vfiolib-parse
# </code>

# <code>
    # <summary>
    # zramswap: Setup a swap partition in host memory.
    # Reduce swapiness to existing host swap partition(s)/file(s), and reduce chances of memory exhaustion as host over-allocates memory.
    # </summary>
    function AllocateRAMToSwap
    {
        function Get
        {
            UpdateOrCloneGitRepo "$_GIT_PATH" "$_FULL_REPO" "$_USER_NAME" "$_EXECUTE_ZRAM_SWAP" || return 1
            return 0
        }

        function Install
        {
            local -r _SCRIPT_NAME="install.sh"

            if ! cd "$_GIT_PATH$_FULL_REPO"; then
                echo -e "$_PREFIX_ERROR Failed to find build directory."
                return 1
            fi

            if [[ -z "$_SCRIPT_NAME" ]]; then
                echo -e "$_PREFIX_ERROR Failed to find script '$_SCRIPT_NAME'."
                return 1
            fi

            if ! sudo bash "$_SCRIPT_NAME"; then
                echo -e "$_PREFIX_ERROR Failed to execute script '$_SCRIPT_NAME'."
                return 1
            fi

            return 0
        }

        function Modify
        {
            local -r _FILE="/etc/default/zram-swap"
            local -r _LINE_TO_MATCH="_zram_fraction="
            local -i _ZRAM_SWAP_AVAILABLE_MEMORY=$(( _AVAILABLE_MEMORY / 2 ))
            local -i _DENOMINATOR=$( printf "%.0f" $( echo "scale=2;$_INT_MAX_MEMORY/$_ZRAM_SWAP_AVAILABLE_MEMORY" | bc ) )

            # <remarks> Round down to nearest even number. </remarks>
            if [[ $( expr $_DENOMINATOR % 2 ) -eq 1 ]]; then
                (( _DENOMINATOR-- ))
            fi

            # <remarks> Is fraction positive non-zero and not equal to one. </remarks>
            if [[ "$_DENOMINATOR" -le 0 ]]; then
                echo -e "$_PREFIX_ERROR Denominator is negative or zero."
            fi

            local _FRACTION="1/$_DENOMINATOR"

            if ! sed -i '/'$_LINE_TO_MATCH'"*"/c\'$_LINE_TO_MATCH'"'$_FRACTION'"' "$_FILE"; then
                echo -e "$_PREFIX_ERROR Failed to write output to zram-swap file."
                return 1
            fi

            if sudo swapon -v | grep zram &> /dev/null\
                && sudo swapon -v | grep zram &> /dev/null\
                && ! sudo swapon -v | grep zram | grep 0B &> /dev/null; then
                echo -e "$_PREFIX_NOTE zram-swap device(s) already in use. Restart system to save changes."
                return 0
            fi

            if sudo swapon -v | grep zram &> /dev/null \
                && ! sudo swapoff /dev/zram* &> /dev/null; then
                echo -e "$_PREFIX_ERROR Failed to disable zram-swap device(s)."
                return 1
            fi

            if ! sudo systemctl daemon-reload &> /dev/null; then
                echo -e "$_PREFIX_ERROR Failed to update systemd."
                return 1
            fi

            if ! sudo systemctl restart zram-swap &> /dev/null; then
                echo -e "$_PREFIX_ERROR Failed to restart zram-swap service."
                return 1
            fi

            if ! sudo swapon -v | grep zram &> /dev/null; then
                echo -e "$_PREFIX_ERROR Failed to enable zram-swap device."
                return 1
            fi

            return 0
        }

        local -r _USER_NAME="foundObjects"
        local -r _REPO_NAME="zram-swap"
        local -r _FULL_REPO="$_USER_NAME/$_REPO_NAME"

        if ! IsHostMemorySufficientForZramSwap \
            || ! Install \
            || ! Modify; then
            false
        fi

        PrintPassOrFail "Allocating RAM to swap..."
        return "$_LAST_EXIT_CODE"
    }

    function ExecuteExtras
    {
        if "$_EXECUTE_ALL_EXTRA_SETUPS"; then
            AllocateRAMToSwap
            SetVideoOutput
            LibvirtHooks
            GuestAudioLoopback
            # NOTE: these functions always fail at build stage.
            # TODO: fix!
            # GuestAudioStream
            # GuestVideoCapture
            return 0
        fi

        if "$_EXECUTE_ZRAM_SWAP"; then
            AllocateRAMToSwap || return 1
        fi

        if "$_EXECUTE_AUTO_XORG_SETUP"; then
            SetVideoOutput || return 1
        fi

        if "$_EXECUTE_LIBVIRT_HOOKS"; then
            LibvirtHooks || return 1
        fi

        if "$_EXECUTE_AUDIO_LOOPBACK_SETUP"; then
            GuestAudioLoopback || return 1
        fi

        # NOTE: these functions always fail at build stage.
        # TODO: fix!
        # if "$_EXECUTE_SCREAM"; then
        #     GuestAudioStream || return 1
        # fi

        # if "$_EXECUTE_LOOKING_GLASS"; then
        #     GuestVideoCapture || return 1
        # fi

        return 0
    }

    # <summary>
    # Install necessary depenencies to setup an audio capture from guest emulated audio device to host audio backend.
    # Installs PulseAudio or ALSA.
    # </summary>
    # <remarks>
    # References:
    #   https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF#Passing_through_other_devices
    # </remarks>
    function GuestAudioCapture
    {
        function Main
        {
            local _DEPENDENCIES=""

            # <remarks> Install JACK and PipeWire. </remarks>
            case "$_PACKAGE_MANAGER" in
                "apt" )
                    _DEPENDENCIES+="pipewire pipewire-jack " ;;

                "pacman" )
                    _DEPENDENCIES+="pipewire pipewire-jack " ;;

                * )
                    echo -e "$_OUTPUT_INVALID_PACKAGE_MANAGER"
                    return 1 ;;
            esac

            # <remarks> Include PulseAudio (and QEMU driver if available). </remarks>
            if IsInstalledCommand "pulseaudio" &> /dev/null; then
                case "$_PACKAGE_MANAGER" in
                    "apt" )
                        _DEPENDENCIES+="pipewire-pulse " ;;

                    "pacman" )
                        _DEPENDENCIES+="pipewire-pulse qemu-audio-pa " ;;

                    * )
                        echo -e "$_OUTPUT_INVALID_PACKAGE_MANAGER"
                        return 1 ;;
                esac

            # <remarks> Fallback to factory driver. </remarks>
            else
                case "$_PACKAGE_MANAGER" in
                    "apt" )
                        _DEPENDENCIES+="pipewire-alsa " ;;

                    "pacman" )
                        _DEPENDENCIES+="pipewire-alsa " ;;

                    * )
                        echo -e "$_OUTPUT_INVALID_PACKAGE_MANAGER"
                        return 1 ;;
                esac
            fi

            IsInstalledPackage "$_DEPENDENCIES" &> /dev/null || InstallPackage "$_DEPENDENCIES" &> /dev/null
            return "$?"
        }

        Main
        PrintPassOrFail "Installing audio drivers..." && _IS_AUDIO_CAPTURE_SETUP=true
        return "$_LAST_EXIT_CODE"
    }

    # <summary>
    # Setup an audio loopback service from physical guest audio device (Line-Out) to physical host audio device (Line-In).
    # Requires physical connection between Line-Out and Line-In, and audio backend with JACK support (requires PulseAudio or ALSA).
    # </summary>
    function GuestAudioLoopback
    {
        function Main
        {
            if ! command -v "pulseaudio" &> /dev/null; then
                echo -e "$_PREFIX_ERROR Required audio backend 'PulseAudio' is missing."
                return 1
            fi

            if ! sudo cp "$_AUDIO_LOOPBACK_SRC_PATH" "$_AUDIO_LOOPBACK_DEST_PATH"; then
                echo -e "$_PREFIX_ERROR Failed to copy file."
                return 1
            fi

            if ! sudo systemctl daemon-reload &> /dev/null; then
                echo -e "$_PREFIX_ERROR Failed to update systemd with new daemon/service."
                return 1
            fi

            if ! sudo systemctl start "$_AUDIO_LOOPBACK_FILENAME"; then
                echo -e "$_PREFIX_ERROR Failed to start audio loopback service."
                return 1
            fi

            if ! sudo systemctl enable "$_AUDIO_LOOPBACK_FILENAME"; then
                echo -e "$_PREFIX_ERROR Failed to enable audio loopback service."
                return 1
            fi

            return 0
        }

        Main
        PrintPassOrFail "Creating audio loopback..."
        return "$_LAST_EXIT_CODE"
    }

    # <summary>
    # Scream: Setup an audio stream from guest to host.
    # Requires virtual network bridge between guest and host, and operating systems Windows 7/8/10/11.
    # </summary>
    # <remarks>
    # References:
    #   https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF#Passing_audio_from_virtual_machine_to_host_via_Scream
    # </remarks>
    function GuestAudioStream
    {
        function Build
        {
            if [[ -z "build" ]] \
                && ! mkdir build; then
                echo -e "$_PREFIX_ERROR Failed to create build directory."
                return 1
            fi

            if ! cd build; then
                echo -e "$_PREFIX_ERROR Failed to find build directory."
                return 1
            fi

            if ! cmake .. \
                && ! make; then
                echo -e "$_PREFIX_ERROR Failed to build client."
                return 1
            fi

            return 0
        }

        function Get
        {
            local _USER_NAME="duncanthrax"
            local _REPO_NAME="scream"
            local _FULL_REPO="$_USER_NAME/$_REPO_NAME"
            local _DEPENDENCIES=""

            # <remarks> Set dependencies for successful build. </remarks>
            case "$_PACKAGE_MANAGER" in
                "apt" | "yum" )
                    _DEPENDENCIES="cmake " ;;

                * )
                    return 1
                    ;;
            esac

            # <remarks> Set dependencies for available audio backend. </remarks>
            if command -v "pulseaudio" &> /dev/null; then
                case "$_PACKAGE_MANAGER" in
                    "apt" )
                        _DEPENDENCIES+="libpulse-dev " ;;

                    "yum" )
                        _DEPENDENCIES+="pulseaudio-libs-devel " ;;

                   * )
                        return 1 ;;
                esac

            elif command -v "pipewire-alsa" &> /dev/null; then
                case "$_PACKAGE_MANAGER" in
                    "apt" )
                        _DEPENDENCIES+="ibasound2-dev " ;;

                    "yum" )
                        _DEPENDENCIES+="alsa-lib-devel " ;;

                    * )
                        return 1 ;;
                esac

            else
                return 1
            fi

            # <remarks> Get dependencies. </remarks>
            if ! IsInstalledPackage "$_DEPENDENCIES" &> /dev/null; then
                InstallPackage "$_DEPENDENCIES" &> /dev/null || return 1
            fi

            UpdateOrCloneGitRepo "$_GIT_PATH" "$_FULL_REPO" "$_USER_NAME" "$_EXECUTE_SCREAM" || return 1
            cd "$_GIT_PATH$_FULL_REPO" || return 1
            return 0
        }

        function Install
        {
            if command -v "pulseaudio" &> /dev/null; then
                if ! sudo cp "$_SCREAM_PULSEAUDIO_SRC_PATH" "$_SCREAM_PULSEAUDIO_DEST_PATH"; then
                    echo -e "$_PREFIX_ERROR Failed to copy file."
                    return 1
                fi

                if ! sudo systemctl daemon-reload &> /dev/null; then
                    echo -e "$_PREFIX_ERROR Failed to update systemd with new daemon/service."
                    return 1
                fi

                if ! sudo systemctl start $_SCREAM_PULSEAUDIO_FILENAME; then
                    echo -e "$_PREFIX_ERROR Failed to start Scream shared memory service."
                    return 1
                fi

                if ! sudo systemctl enable $_SCREAM_PULSEAUDIO_FILENAME; then
                    echo -e "$_PREFIX_ERROR Failed to enable Scream shared memory service."
                    return 1
                fi

                return 0
            fi

            if command -v "pipewire" &> /dev/null; then
                if ! sudo cp "$_SCREAM_PIPEWIRE_SRC_PATH" "$_SCREAM_PIPEWIRE_DEST_PATH"; then
                    echo -e "$_PREFIX_ERROR Failed to copy file."
                    return 1
                fi

                if ! sudo systemctl daemon-reload &> /dev/null; then
                    echo -e "$_PREFIX_ERROR Failed to update systemd with new daemon/service."
                    return 1
                fi

                if ! sudo systemctl start $_SCREAM_PIPEWIRE_FILENAME; then
                    echo -e "$_PREFIX_ERROR Failed to start Scream shared memory service."
                    return 1
                fi

                if ! sudo systemctl enable $_SCREAM_PIPEWIRE_FILENAME; then
                    echo -e "$_PREFIX_ERROR Failed to enable Scream shared memory service."
                    return 1
                fi

                return 0
            fi

            echo -e "$_PREFIX_ERROR Missing required audio backends (Pipewire, PulseAudio)."
            return 1
        }

        function Modify
        {
            local _LINE="/dev/shm/scream-ivshmem rw,"

            local -a _FILE_CONTENTS+=(
                ""
                "# Scream"
                "$_LINE"
            )

            if ! sudo touch /dev/shm/scream-ivshmem &> /dev/null; then
                echo -e "$_PREFIX_ERROR Failed create shared memory file."
                return 1
            fi

            if ! sudo chmod 666 /dev/shm/scream-ivshmem &> /dev/null; then
                echo -e "$_PREFIX_ERROR Failed to set file permissions."
                return 1
            fi

            if ! grep -E -q "$_LINE" "$_APPARMOR_QEMU_DEST_PATH" \
                && ! sudo echo -e "${_FILE_CONTENTS[*]}" >> "$_APPARMOR_QEMU_DEST_PATH"; then
                echo -e "$_PREFIX_ERROR Failed to write to file '$_APPARMOR_QEMU_DEST_PATH'."
            fi

            return 0
        }

        if ! GuestAudioCapture; then
            local _OUTPUT="Installing Scream...\t"
            false
        else
            local _OUTPUT="Updating Scream..."
            Get
            PrintPassOrFail "$_OUTPUT"

            local _OUTPUT="Building Scream..."

            if Build; then
                PrintPassOrFail "$_OUTPUT"
                local _OUTPUT="Installing Scream...\t"
                Install && Modify
            fi
        fi

        PrintPassOrFail "$_OUTPUT" && _IS_SCREAM_SETUP=true
        return "$_LAST_EXIT_CODE"
    }

    # <summary>
    # LookingGlass: Setup direct-memory-access of video framebuffer (and audio?) from guest to host.
    # Requires operating systems Windows 7/8/10/11.
    # </summary>
    # <remarks>
    # References:
    #   https://looking-glass.io/docs/B6/install/#client-install
    # </remarks>
    function GuestVideoCapture
    {
        function Get
        {
            local _USER_NAME="gnif"
            local _REPO_NAME="LookingGlass"
            local _FULL_REPO="$_USER_NAME/$_REPO_NAME"
            local _DEPENDENCIES=""

            case "$_PACKAGE_MANAGER" in
                "apt" )
                    _DEPENDENCIES="cmake gcc g++ clang libegl-dev libgl-dev libgles-dev libfontconfig-dev libgmp-dev libspice-protocol-dev make nettle-dev pkg-config"
                    ;;

                * )
                    echo -e "$_OUTPUT_INVALID_PACKAGE_MANAGER"
                    return 1 ;;
            esac

            if ! IsInstalledPackage "$_DEPENDENCIES" &> /dev/null; then
                InstallPackage "$_DEPENDENCIES" &> /dev/null || return 1
            fi

            UpdateOrCloneGitRepo "$_GIT_PATH" "$_FULL_REPO" "$_USER_NAME" || return 1
            cd "$_GIT_PATH$_FULL_REPO" || return 1
            return 0
        }

        function Install
        {
            # <remarks> Build client </remarks>
            if [[ -z "client/build" ]] \
                && ! mkdir client/build; then
                echo -e "$_PREFIX_ERROR Failed to create build directory."
                return 1
            fi

            if ! cd client/build; then
                echo -e "$_PREFIX_ERROR Failed to find build directory."
                return 1
            fi

            if ! cmake ../ \
                && ! git submodule update --init --recursive \
                && ! cmake ../; then
                echo -e "$_PREFIX_ERROR Failed cmake"
                return 1
            fi

            if ! make; then
                echo -e "$_PREFIX_ERROR Failed make."
                return 1
            fi

            # <remarks> Conclude build as root or user. </remarks>
            if [[ $( whoami ) != "root" ]]; then
                if ! make install; then
                    echo -e "$_PREFIX_ERROR Failed to build."
                    return 1
                fi
            else
                if ! cmake -DCMAKE_INSTALL_PREFIX=~/.local .. \
                    && make install; then
                    echo -e "$_PREFIX_ERROR Failed to build."
                    return 1
                fi
            fi

            return 0
        }

        function Modify
        {
            local _LINE="/{dev,run}/shm/lookingglass rw,"

            local -a _FILE_CONTENTS+=(
                ""
                "# Looking Glass"
                "$_LINE"
            )

            if ! sudo touch /dev/shm/lookingglass &> /dev/null; then
                echo -e "$_PREFIX_ERROR Failed create shared memory file."
                return 1
            fi

            if ! sudo chmod 666 /dev/shm/lookingglass &> /dev/null; then
                echo -e "$_PREFIX_ERROR Failed to set file permissions."
                return 1
            fi

            if ! grep -E -q "$_LINE" "$_APPARMOR_QEMU_DEST_PATH" \
                && ! sudo echo -e "${_FILE_CONTENTS[*]}" >> "$_APPARMOR_QEMU_DEST_PATH"; then
                echo -e "$_PREFIX_ERROR Failed to write to file '$_APPARMOR_QEMU_DEST_PATH'."
            fi

            return 0
        }

        Get
        PrintPassOrFail "Updating LookingGlass..."
        Install && Modify
        PrintPassOrFail "Installing LookingGlass..."
        return "$_LAST_EXIT_CODE"
    }

    # <summary>
    # libvirt-hooks: Setup useful Quality-of-life improvements in the form of services and scripts (hooks) for QEMU guest(s).
    # </summary>
    function LibvirtHooks
    {
        function Main
        {
            if ! sudo cp "$_LIBVIRT_HOOK_NOSLEEP_SRC_PATH" "$_LIBVIRT_HOOK_NOSLEEP_DEST_PATH"; then
                echo -e "$_PREFIX_ERROR Failed to copy file."
                return 1
            fi

            if ! sudo systemctl daemon-reload &> /dev/null; then
                echo -e "$_PREFIX_ERROR Failed to update systemd with new daemon/service."
                return 1
            fi

            return 0
        }

        Main
        PrintPassOrFail "Installing libvirt-hooks..."
        return "$_LAST_EXIT_CODE"
    }

    # <summary>
    # auto-Xorg: System service to find and set a valid Host boot VGA device for Xorg.
    # </summary>
    # <remarks>
    # References:
    #   https://github.com/portellam/auto-Xorg
    # </remarks>
    function SetVideoOutput
    {
        function Get
        {
            UpdateOrCloneGitRepo "$_GIT_PATH" "$_FULL_REPO" "$_USER_NAME" "$_EXECUTE_AUTO_XORG_SETUP" || return 1
            return 0
        }

        function Install
        {
            local -r _SCRIPT_NAME="installer.bash"

            if ! cd "$_GIT_PATH$_FULL_REPO"; then
                echo -e "$_PREFIX_ERROR Failed to find build directory."
                return 1
            fi

            if [[ -z "$_SCRIPT_NAME" ]]; then
                echo -e "$_PREFIX_ERROR Failed to find script '$_SCRIPT_NAME'."
                return 1
            fi

            # TODO: add input vars here!
            if ! sudo bash "$_SCRIPT_NAME"; then
                echo -e "$_PREFIX_ERROR Failed to execute script '$_SCRIPT_NAME'."
                return 1
            fi

            return 0
        }

        local -r _USER_NAME="portellam"
        local -r _REPO_NAME="auto-Xorg"
        local -r _FULL_REPO="$_USER_NAME/$_REPO_NAME"
        Get
        Install &> /dev/null
        PrintPassOrFail "Allocating RAM to swap..."
        return "$_LAST_EXIT_CODE"
    }
# </code>

# <params>
    declare -g _GIT_PATH="$HOME/source/"
    sudo mkdir -p "$_GIT_PATH" &> /dev/null

    # <remarks> Flags </remarks>
    declare -g _IS_AUDIO_CAPTURE_SETUP=false
    declare -g _IS_SCREAM_SETUP=false
# </params>