#!/bin/bash sh

#
# Filename:         vfiolib-extras
# Description:      Recommended pre- and post-installation setups.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# TODO:
# -write to abstractions file
#   -Evdev
#   -Hugepages?
#   -LookingGlass
#

# <remarks> Using </remarks>
# <code>
    source bashlib-all
    source vfiolib-iommu
# </code>

# <code>
    # <summary> Add user to necessary user groups. </summary>
    # <returns> exit code </returns>
    function AddUserToGroups
    {
        function AddUserToGroups_Main
        {
            # <remarks> Add user(s) to groups. </remarks>
            adduser "${str_username}" "input" || return 1
            adduser "${str_username}" "libvirt" || return 1
            return 0
        }

        # <params>
        local readonly str_output="Adding user to groups..."
        # </params>

        echo
        echo -e "${str_output}"
        AddUserToGroups_Main
        PrintPassOrFail "${str_output}"
        return "${int_exit_code}"
    }

    # <summary> isolcpus: Ask user to allocate host CPU cores (and/or threads), to reduce host overhead, and improve both host and virtual machine performance. </summary
    # <returns> exit code </returns>
    function Allocate_CPU
    {
        function Allocate_CPU_Main
        {
            # <params>
            local readonly var_get_all_cores='seq 0 $(( ${int_total_cores} - 1 ))'
            local readonly var_get_total_threads='cat /proc/cpuinfo | grep "siblings" | uniq | grep -o "[0-9]\+"'
            local readonly var_get_total_cores='cat /proc/cpuinfo | grep "cpu cores" | uniq | grep -o "[0-9]\+"'
            declare -ir int_total_cores=$( eval "${var_get_total_cores}" )
            declare -ir int_total_threads=$( eval "${var_get_total_threads}" )
            # </params>

            # <summary> Set maximum number of cores allocated to host machine. </summary>
                # <params>
                declare -ar arr_all_cores=( $( eval "${var_get_all_cores}" ) )
                declare -i int_host_cores=1
                # </params>

                # <remarks> quad-core or greater CPU </remarks>
                if [[ "${int_total_cores}" -ge 4 ]]; then
                    readonly int_host_cores=2

                # <remarks> double-core/triple-core CPU </remarks>
                elif [[ "${int_total_cores}" -le 3 && "${int_total_cores}" -ge 2 ]]; then
                    readonly int_host_cores

                # <remarks> If single-core CPU, fail. </remarks>
                else
                    readonly int_host_cores
                    false
                    PrintPassOrFail "${str_output}"
                    return "${int_exit_code}"
                fi

            # <summary> Get thread sets, for host and virtual machines. </summary>
                # <params>
                local readonly var_get_host_cores='seq 0 $(( ${int_host_cores} - 1 ))'
                local readonly var_get_SMT_factors='seq 0 $(( ${int_SMT_factor} - 1 ))'
                local readonly var_get_thread='$(( int_core + ( int_SMT_factor * int_total_cores ) ))'
                local readonly var_get_virt_cores='seq ${int_host_cores} $(( ${int_total_cores} - 1 ))'

                declare -ar arr_host_cores=( $( eval "${var_get_host_cores}" ) )
                declare -a arr_host_threads=()
                declare -ar arr_virt_cores=( $( eval "${var_get_virt_cores}" ) )
                declare -a arr_virt_threads=()
                declare -i int_SMT_factor=$(( "${int_total_threads}" / "${int_total_cores}" ))
                declare -a arr_SMT_factors=( $( eval "${var_get_SMT_factors}" ) )

                declare -g str_host_thread_sets
                declare -g str_virt_thread_sets
                # </params>

                function GetThreadByCoreAnd_SMT
                {
                    int_thread=$(( int_core + ( int_SMT_factor * int_total_cores ) ))
                }

                for int_SMT_factor in "${arr_SMT_factors[@]}"; do
                    # <remarks> Reset params </remarks>
                    declare -a arr_host_threads_sets=()
                    declare -a arr_virt_threads_sets=()
                    declare -i int_thread

                    # <remarks> Find thread sets for host machine. </remarks>
                    for int_core in "${arr_host_cores[@]}"; do
                        GetThreadByCoreAnd_SMT
                        arr_host_threads+=( "${int_thread}" )
                        arr_host_threads_sets+=( "${int_thread}" )
                    done

                    # <remarks> Find thread sets for virtual machines. </remarks>
                    for int_core in "${arr_virt_cores[@]}"; do
                        GetThreadByCoreAnd_SMT
                        arr_virt_threads+=( "${int_thread}" )
                        arr_virt_threads_sets+=( "${int_thread}" )
                    done

                    # <remarks> Save thread sets to delimited list. </remarks>
                    declare -i int_set_first_thread="${arr_host_threads_sets[0]}"
                    declare -i int_set_last_thread="${arr_host_threads_sets[-1]}"
                    local str_thread_set="${int_set_first_thread}"

                    if [[ "${int_set_first_thread}" -ne "${int_set_last_thread}" ]]; then
                        local str_thread_set="${int_set_first_thread}-${int_set_last_thread}"
                    fi

                    str_host_thread_sets+="${str_thread_set},"

                    declare -i int_set_first_thread="${arr_virt_threads_sets[0]}"
                    declare -i int_set_last_thread="${arr_virt_threads_sets[-1]}"
                    local str_thread_set="${int_set_first_thread}"

                    if [[ "${int_set_first_thread}" -ne "${int_set_last_thread}" ]]; then
                        local str_thread_set="${int_set_first_thread}-${int_set_last_thread}"
                    fi

                    str_virt_thread_sets+="${str_thread_set},"
                done

                # <remarks> Truncate last delimiter. </remarks>
                if [[ ${str_host_thread_sets: -1} == "," ]]; then
                    str_host_thread_sets=${str_host_thread_sets::-1}
                fi

                # <remarks> Ditto. </remarks>
                if [[ ${str_virt_thread_sets: -1} == "," ]]; then
                    str_virt_thread_sets=${str_virt_thread_sets::-1}
                fi

                # <remarks> Save output </remarks>
                readonly str_host_thread_sets str_virt_thread_sets

            # <summary> Find CPU mask. </summary>
                # <remarks>
                # save output to string for cpuset and cpumask
                # example:
                #   host 0-1,8-9
                #   virt 2-7,10-15
                #
                # information
                # cores     bit masks       mask
                # 0-7       0b11111111      FF      # total cores
                # 0,4       0b00010001      11      # host cores
                #
                # 0-11      0b111111111111  FFF     # total cores
                # 0-1,6-7   0b000011000011  C3      # host cores
                #
                # </remarks>

                # <params>
                local readonly var_get_hexadecimal_mask_from_decimal='echo "obase=16; ${int_thread_decimal}" | bc'
                declare -i int_host_threads_hexadecimal_mask=0
                declare -i int_total_threads_hexadecimal_mask=0
                # </params>

                # <remarks> Add each decimal mask to sum. </remarks>
                for int_thread in "${arr_host_threads[@]}"; do
                    declare -i int_thread_decimal=$(( 2 ** ${int_thread} ))
                    declare -i int_thread_hexadecimal_mask=$( eval "${var_get_hexadecimal_mask_from_decimal}" )
                    int_host_threads_hexadecimal_mask+="${int_thread_hexadecimal_mask}"
                done

                for int_thread in "${arr_total[@]}"; do
                    declare -i int_thread_decimal=$(( 2 ** ${int_thread} ))
                    declare -i int_thread_hexadecimal_mask=$( eval "${var_get_hexadecimal_mask_from_decimal}" )
                    int_host_threads_hexadecimal_mask+="${int_thread_hexadecimal_mask}"
                done

                # <remarks> Save changes, convert hexadecimal mask into hexadecimal. </remarks>
                readonly int_host_threads_hexadecimal_mask
                declare -g str_host_threads_hexadecimal=$( printf '%x\n' $int_host_threads_hexadecimal_mask )
                declare -ir int_total_threads_hexadecimal_mask=$(( ( 2 ** ${int_total_threads} ) - 1 ))
                declare -g str_total_threads_hexadecimal=$( printf '%x\n' $int_total_threads_hexadecimal_mask )

            declare -a arr_output=(
                "Allocated to Host\t${str_host_thread_sets}"
                "Allocated to guest:\t${str_virt_thread_sets}"
            )

            PrintArray "arr_output"
            echo

            # <remarks> Save changes. </remarks>
            declare -g str_GRUB_Allocate_CPU="isolcpus=${str_virt_thread_sets} nohz_full=${str_virt_thread_sets} rcu_nocbs=${str_virt_thread_sets}"
            return 0
        }

        # <params>
        local readonly str_output="Allocating CPU threads..."
        # </params>

        echo
        echo -e "${str_output}"
        Allocate_CPU_Main
        PrintPassOrFail "${str_output}"
        return "${int_exit_code}"
    }

    # <summary> Hugepages: Ask user to allocate host memory (RAM) to 'hugepages', to eliminate the need to defragement memory, to reduce host overhead, and to improve both host and virtual machine performance. </summary
    function Allocate_RAM
    {
        function Allocate_RAM_Main
        {
            # <params>
            declare -ar arr_choices=(
                "2M"
                "1G"
            )

            declare -gi int_huge_page_count=0
            declare -gi int_huge_page_kbit_size=0
            declare -gi int_huge_page_max_kbit_size=0
            declare -gi int_huge_page_min_kbit_size=4194304
            declare -gi int_huge_page_max=0
            declare -gi int_huge_page_min=0
            declare -g str_huge_page_byte_prefix=""
            declare -g str_hugepages_QEMU=""

            local readonly str_output1="Hugepages is a feature which statically allocates system memory to pagefiles.\n\tVirtual machines can use Hugepages to a peformance benefit.\n\tThe greater the Hugepage size, the less fragmentation of memory, and the less latency/overhead of system memory-access.\n\t${var_yellow}NOTE:${var_reset_color} It is recommended to use a size which is a multiple of an individual memory channel/stick.\n\t${var_yellow}Example:${var_reset_color} Four (4) channels of 8 GB each, use 1x, 2x, or 3x (8 GB, 16 GB, or 24 GB).\n"
            local readonly str_output2="Setup Hugepages?"
            local readonly str_output3="Enter size of Hugepages (bytes):"
            local readonly var_get_host_max_mem='cat /proc/meminfo | grep MemTotal | cut -d ":" -f 2 | cut -d "k" -f 1'
            # </params>

            if ! IsNum "${int_max_mem}" &> /dev/null; then
                local readonly str_output_could_not_parse_memory="${var_prefix_error} Could not parse system memory."
                echo -e "${str_output_could_not_parse_memory}"
            fi

            # <remarks> Ask user to proceed. </remarks>
            echo -e "${str_output1}"
            ReadInput "${str_output2}" || return "${int_code_skipped_operation}"
            var_input=""
            ReadMultipleChoiceIgnoreCase "${str_output3}" "${arr_choices[@]}" || return $?
            # echo "${var_input}"
            str_huge_page_byte_prefix="${var_input}"
            int_huge_page_max_kbit_size=$( eval "${var_get_host_max_mem}" )

            # <remarks> Validate hugepage size and byte-size. </remarks>
            case "${str_huge_page_byte_prefix}" in
                "${arr_choices[0]}" )
                    readonly int_huge_page_kbit_size=2048
                    readonly int_huge_page_min=2
                    ;;
                "${arr_choices[1]}" )
                    readonly int_huge_page_kbit_size=1048576
                    readonly int_huge_page_min=1
                    ;;
                * )
                    return 1
                    ;;
            esac

            # <remarks> Get values. </remarks>
            int_huge_page_max=$(( $int_huge_page_max_kbit_size - $int_huge_page_min_kbit_size ))
            readonly int_huge_page_max=$(( $int_huge_page_max / $int_huge_page_kbit_size ))
            local readonly str_output4="Enter number of Hugepages (num * ${str_huge_page_byte_prefix})"

            # <remarks> Ask user for preferred amount. </remarks>
            ReadInputFromRangeOfTwoNums "${str_output4}" "${int_huge_page_min}" "${int_huge_page_max}" || return $?
            readonly int_huge_page_count="${var_input}"

            # <remarks> Save changes. </remarks>
            declare -g int_alloc_mem_hugepages=$(( $int_huge_page_count * $int_huge_page_kbit_size ))
            declare -g str_GRUB_hugepages="default_hugepagesz=${str_huge_page_byte_prefix} hugepagesz=${str_huge_page_byte_prefix} hugepages=${int_huge_page_count}"
            bool_is_setup_hugepages=true
            return 0
        }

        # <params>
        local readonly str_output="Executing Hugepages setup..."
        # </params>

        echo
        echo -e "${str_output}"
        Allocate_RAM_Main
        PrintPassOrFail "${str_output}"
        return "${int_exit_code}"
    }

    # <summary> Ask user to setup audio loopback from the host's Line-in to active audio output. Useful for virtual machines with sound-cards (example: Creative SoundBlaster). </summary>
    # <returns> exit code </returns>
    function HostAudioLineIn
    {
        return 0
    }

    # # <summary> libvirt-hooks: ??? </summary>
    # # <returns> exit code </returns>
    # function LibvirtHooks
    # {
    #     return 0
    # }

    # <summary> libvirt-qemu: Append necessary changes to QEMU system file, including user groups, Evdev, Hugepages, and NVRAM (for UEFI VMs). </summary>
    # <returns> exit code </returns>
    function Modify_QEMU
    {
        function Modify_QEMU_Main
        {
            # <params>
            declare -a arr_file1_evdev_cgroups=()
            declare -ar arr_file1_default_cgroups=(
                "        \"/dev/null\", \"/dev/full\", \"/dev/zero\","
                "        \"/dev/random\", \"/dev/urandom\","
                "        \"/dev/ptmx\", \"/dev/kvm\","
                "        \"/dev/rtc\", \"/dev/hpet\""
            )

            local readonly str_daemon1="libvirtd"
            local readonly str_daemon1_packages="qemu"
            local readonly str_file1="/etc/libvirt/qemu.conf"
            local readonly str_file2="/etc/apparmor.d/local/abstractions/libvirt-qemu"
            # </params>

            # <remarks> Backup system file and grab clean file from repository. </remarks>
            GoToScriptDir || return $?
            cd "${str_files_dir}" || return $?
            IsFileOriginal "${str_file1}" "libvirt-daemon-system" || return $?

            # <remarks> Get Event devices. </remarks>
            if "${bool_is_setup_evdev}"; then
                for str_event_device in "${arr_event_devices[@]}"; do
                    arr_file1_evdev_cgroups+=( "        \"/dev/input/by-id/${str_event_device}\"," )
                done

                for str_event_device in "${arr_input_devices[@]}"; do
                    arr_file1_evdev_cgroups+=( "        \"/dev/input/by-id/${str_event_device}\"," )
                done
            fi

            # <remarks> Save changes. </remarks>
            readonly arr_file1_evdev_cgroups

            # <remarks> Begin append. </remarks>
            declare -a arr_file1=(
                ""
                ""
                "#"
                "# Generated by '${str_full_repo_name}'"
                "#"
                "# WARNING: Any modifications to this file will be modified by '${str_repo_name}'"
                "#"
                "# Run 'systemctl restart ${str_daemon1}.service' to update."
                "#"
            )

            declare -a arr_file2=()

            # <remarks> Adds or omits specific user to use Evdev. </remarks>
            local readonly str_output4="Adding user..."

            if IsString "${str_username}" &> /dev/null; then
                arr_file1+=(
                    ""
                    "### User permissions ###"
                    "user = \"${str_username}\""
                    "group = \"user\""
                )
            else
                arr_file1+=(
                    ""
                    "### User permissions ###"
                    "#user = \"user\""
                    "#group = \"user\""
                )

                ( return "${int_code_skipped_operation}" )
            fi

            PrintPassOrFail "${str_output4}"

            # <remarks> Adds or omits validation for Hugepages. </remarks>
            local readonly str_output5="Adding Hugepages..."

            if "${bool_is_setup_hugepages}"; then
                arr_file1+=(
                    ""
                    "### Hugepages ###"
                    "hugetlbfs_mount = \"/dev/hugepages\""
                )
            else
                arr_file1+=(
                    ""
                    "### Hugepages ###"
                    "#hugetlbfs_mount = \"/dev/hugepages\""
                )

                ( return "${int_code_skipped_operation}" )
            fi

            PrintPassOrFail "${str_output5}"

            # <remarks> Adds or omits Event devices. </remarks>
            local readonly str_output6="Adding Evdev..."

            if "${bool_is_setup_evdev}"; then
                arr_file1+=(
                    ""
                    "### Devices ###"
                    "cgroup_device_acl = ["
                    "${arr_file1_evdev_cgroups[@]}"
                    "${arr_file1_default_cgroups[@]}"
                    "]"
                )

                arr_file2+=(
                    ""
                    "# EVDEV"
                    "/dev/input/* rw,"
                    "/dev/input/by-id/* rw,"
                )
            else
                arr_file1+=(
                    ""
                    "### Devices ###"
                    "cgroup_device_acl = ["
                    "${arr_file1_default_cgroups[@]}"
                    "]"
                )

                ( return "${int_code_skipped_operation}" )
            fi

            PrintPassOrFail "${str_output6}"

            # <remarks> Adds NVRAM for EFI kernels in UEFI virtual machines. </remarks>
            arr_file1+=(
                ""
                "nvram = ["
                "        \"/usr/share/OVMF/OVMF_CODE.fd:/usr/share/OVMF/OVMF_VARS.fd\","
                "        \"/usr/share/OVMF/OVMF_CODE.secboot.fd:/usr/share/OVMF/OVMF_VARS.fd\","
                "        \"/usr/share/AAVMF/AAVMF_CODE.fd:/usr/share/AAVMF/AAVMF_VARS.fd\","
                "        \"/usr/share/AAVMF/AAVMF32_CODE.fd:/usr/share/AAVMF/AAVMF32_VARS.fd\""
                "]"
            )

            # <remarks> Save changes. </remarks>
            readonly arr_file1 arr_file2
            # WriteFile "arr_file1" "${str_file1}" || return $?
            OverwriteFile "arr_file1" "${str_file1}" || return $?
            WriteFile "arr_file2" "${str_file2}" || return $?

            # <remarks> Check if daemon exists and restart it. </remarks>
            IsInstalledPackage "${str_daemon1_packages}" || return $?
            IsActiveDaemon "${str_daemon1}" &> /dev/null || ( sudo systemctl enable "${str_daemon1}" || return 1 )

            local readonly var_restart_daemon='sudo systemctl restart "${str_daemon1}"'
            StopEvalAfterThriceFail "${var_restart_daemon}" || return $?
            return 0
        }

        # <params>
        local readonly str_output="Appending changes to libvirt-qemu..."
        # </params>

        echo
        echo -e "${str_output}"
        Modify_QEMU_Main
        PrintPassOrFail "${str_output}"
        return "${int_exit_code}"
    }

    # <summary> zramswap: Ask user to setup a swap partition in host memory, to reduce swapiness to existing host swap partition(s)/file(s), and reduce chances of memory exhaustion as host over-allocates memory. </summary>
    # <returns> exit code </returns>
    function RAM_Swapfile
    {
        function RAM_Swapfile_Install
        {
            # <params>
            local readonly str_user_name1="foundObjects"
            local readonly str_repo_name1="zram-swap"
            local readonly str_full_repo1="${str_user_name1}/${str_repo_name1}"
            local readonly str_script_name1="install.sh"
            # </params>

            GoToScriptDir
            UpdateOrCloneGitRepo "${str_repos_dir}" "${str_full_repo1}" "${str_user_name1}"
            cd "${str_repos_dir}${str_full_repo1}" || return $?
            IsFile "${str_script_name1}" || return $?
            sudo bash "${str_script_name1}" || return 1
            return 0
        }

        function RAM_Swapfile_Modify
        {
            # <params>
            local readonly str_file1="/etc/default/zram-swap"
            local readonly str_match_line1="_zram_fraction="
            local readonly var_command='cat "${str_file1}"'
            local readonly var_find_zram_swap='sudo swapon -v | grep zram'
            local readonly var_disable_zram_swap='sudo swapoff /dev/zram*'
            local readonly var_enable_all_swap='sudo swapon -a'
            local readonly var_restart_daemon='sudo systemctl restart zram-swap'
            declare -a arr_file_contents=( $( eval "${var_command}" ) )
            # </params>

            # <remarks> Replace matching line with comment of line </remarks>
            for int_key in "${!arr_file_contents[@]}"; do
                if [[ "${arr_file_contents[$int_key]}" == *"${str_match_line1}"* ]]; then
                    arr_file_contents[$int_key]="#${arr_file_contents[$int_key]}"
                fi
            done

            if ! IsNum "${int_max_mem}" &> /dev/null; then
                local readonly str_output_could_not_parse_memory="${var_prefix_error} Could not parse system memory."
                echo -e "${str_output_could_not_parse_memory}"
                return 1
            fi

            if IsNum "${int_alloc_mem_hugepages}" &> /dev/null; then
                declare -ir int_usable_mem=$(( ( int_max_mem - int_alloc_mem_hugepages ) / 2 ))
            else
                declare -ir int_usable_mem=$(( int_max_mem / 2 ))
            fi

            declare -i int_denominator=$( printf "%.0f" $( echo "scale=2;${int_max_mem}/${int_usable_mem}" | bc ) )

            # <remarks> Round down to nearest even number. </remarks>
            if [[ $( expr $int_denominator % 2 ) -eq 1 ]]; then
                (( int_denominator-- ))
            fi

            readonly int_denominator

            # <remarks> Is fraction positive non-zero and not equal to one. </remarks>
            if [[ "${int_denominator}" -gt 1 ]]; then
                local readonly str_fraction="1/${int_denominator}"

                arr_file_contents+=(
                    ""
                    "#"
                    "# Generated by '${str_full_repo_name}'"
                    "#"
                    "# WARNING: Any modifications to this file will be modified by '${str_repo_name}'"
                    "${str_match_line1}\"${str_fraction}\""
                )
            fi

            OverwriteFile "arr_file_contents" "${str_file1}" || return $?
            eval "${var_find_zram_swap}" && eval "${var_disable_zram_swap}"
            eval "${var_restart_daemon}" || return $?
            eval "${var_enable_all_swap}" || return $?
            return 0
        }

        # <params>
        local readonly str_output1="Setup zram-swap?"
        local readonly str_output2="Installing zram-swap..."
        # </params>

        echo
        ReadInput "${str_output1}" || return $?
        echo -e "${str_output2}"

        if ! RAM_Swapfile_Install || ! RAM_Swapfile_Modify; then
            false
        fi

        PrintPassOrFail "${str_output2}"
        return "${int_exit_code}"
    }

    # <summary> Evdev: Ask user to setup a virtual Keyboard-Video-Mouse switch (excluding the Video). Will allow a user to swap between active virtual machines and host, with the use of a pre-defined macro (example: 'L-CTRL' + 'R-CTRL'). </summary>
    # <returns> exit code </returns>
    function Virtual_KVM
    {
        function Virtual_KVM_Main
        {
            # <params>
            declare -ga arr_event_devices=()
            declare -ga arr_input_devices=()

            local readonly str_output1="Evdev (Event Devices) is a method of creating a virtual KVM (Keyboard-Video-Mouse) switch between host and VM's.\n\tHOW-TO: Press 'L-CTRL' and 'R-CTRL' simultaneously.\n"
            local readonly str_output2="Setup Evdev?"
            local readonly str_fail="${var_prefix_error} Cannot parse input devices (by ID)."

            local readonly var_get_event_devices='readonly arr_event_devices=( $( ls -l /dev/input/by-id | cut -d "/" -f2 | grep -v "total 0" ) )'
            local readonly var_get_input_devices='readonly arr_input_devices=( $( ls /dev/input/by-id ) )'
            # </params>

            # <remarks> Ask user to proceed. </remarks>
            echo -e "${str_output1}"
            ReadInput "${str_output2}" || return "${int_code_skipped_operation}"

            # <remarks> Get all devices for Evdev. </remarks>
            eval "${var_get_event_devices}" &> /dev/null
            eval "${var_get_input_devices}" &> /dev/null

            # <remarks> Early-exit. </remarks>
            if ! IsArray "arr_event_devices" &> /dev/null && ! IsArray "arr_input_devices" &> /dev/null; then
                echo -e "${str_fail}"
                return 1
            fi

            bool_is_setup_evdev=true
            return 0
        }

        # <params>
        local readonly str_output="Executing Evdev setup..."
        # </params>

        echo
        echo -e "${str_output}"
        Virtual_KVM_Main
        PrintPassOrFail "${str_output}"
        return "${int_exit_code}"
    }

    # <summary> LookingGlass: Ask user to setup direct-memory-access of video framebuffer from virtual machine to host. NOTE: Only supported for Win 7/10/11 virtual machines. </summary>
    # <returns> exit code </returns>
    function VirtualVideoCapture
    {
        # TODO:
        # -add disclaimer for end user in both README and output
        # -point to LookingGlass website

        function VirtualVideoCapture_Main
        {
            # <remarks> reference: https://looking-glass.io/docs/B6/install/#client-install </remarks>

            # <params>
            local readonly str_user_name1="gnif"
            local readonly str_repo_name1="LookingGlass"
            local readonly str_full_repo1="${str_user_name1}/${str_repo_name1}"
            local readonly str_dependencies="cmake gcc g++ clang libegl-dev libgl-dev libgles-dev libfontconfig-dev libgmp-dev libspice-protocol-dev make nettle-dev pkg-config"
            # </params>

            # <remarks> Install dependencies. </remarks>
            if [[ "${str_package_manager}" == "apt" ]]; then
                InstallPackage "${str_dependencies}" || return $?
            fi

            # <remarks> Get repo </remarks>
            GoToScriptDir
            UpdateOrCloneGitRepo "${str_repos_dir}" "${str_full_repo1}" "${str_user_name1}"
            cd "${str_repos_dir}${str_full_repo1}" || return $?

            # <remarks> Build client </remarks>
            mkdir client/build || return 1
            cd client/build || return 1
            cmake ../ || return 1
            make || return 1

            # <remarks> Conclude build as root or user. </remarks>
            if $bool_is_user_root; then
                make install || return 1
            else
                cmake -DCMAKE_INSTALL_PREFIX=~/.local .. && make install
            fi

            return 0
        }

        # <params>
        local readonly str_output="Executing LookingGlass setup..."
        # </params>

        echo
        echo -e "${str_output}"
        VirtualVideoCapture_Main
        PrintPassOrFail "${str_output}"
        return "${int_exit_code}"
    }

    # <summary> Scream: Ask user to setup audio loopback from virtual machine to host. NOTE: Only supported for Win 7/8/10/11 virtual machines. </summary>
    # # <returns> exit code </returns>
    # function VirtualAudioCapture
    # {
    #     return 0
    # }
# </code>

# <params>
    declare -g str_files_dir="files"

    # <remarks> Evaluations </remarks>
    declare -g var_get_first_valid_user='getent passwd {1000..60000} | cut -d ":" -f 1' &> /dev/null
    declare -g str_username=$( eval "${var_get_first_valid_user}" ) &> /dev/null

    # <remarks> Flag progress of setups </remarks>
    declare -g bool_is_setup_evdev=false
    declare -g bool_is_setup_hugepages=false

    # <remarks> Memory </remarks>
    declare -g str_max_mem=$( cat /proc/meminfo | grep MemTotal | cut -d ":" -f 2 | cut -d "k" -f 1 )
    declare -gi int_max_mem=${str_max_mem## }
# </params>