#!/bin/false

#
# Filename:       deploy-vfio_logic_post-setup
# Description:    Recommended post-installation setups.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

# <sets>
  set -o nounset
  set -o pipefail
# </sets>

# <sources>
  source deploy-vfio_logic_common
# </sources>

# <functions>
  function declare_parameters
  {
    if [[ "${POST_SETUP_ARE_PARAMS_SET}" == true ]]; then
      return 0
    fi

    declare -g POST_SETUP_ARE_PARAMS_SET=true

    declare -g POST_SETUP_ASK_TO_EXECUTE_ALL=true
    declare -g POST_SETUP_DO_EXECUTE_AUDIO_LOOPBACK=false
    declare -g POST_SETUP_DO_EXECUTE_AUTO_XORG=false
    declare -g POST_SETUP_DO_EXECUTE_LIBVIRT_HOOKS=false
    declare -g POST_SETUP_DO_EXECUTE_LOOKING_GLASS=false
    declare -g POST_SETUP_DO_EXECUTE_SCREAM=false
    declare -g POST_SETUP_DO_EXECUTE_ZRAM_SWAP=false
    declare -g POST_SETUP_DO_SKIP_ALL=false
    declare -g POST_SETUP_HAS_ARG_AUTO_XORG_PREFERRED_VENDOR=false
    declare -g POST_SETUP_HAS_ARG_AUTO_XORG_SORT_ORDER=false
    declare -g POST_SETUP_HAS_ARG_ZRAM_SWAP_FORCE=false
    declare -g POST_SETUP_HAS_ARG_ZRAM_SWAP_SET_FRACTION=false

    declare -g POST_SETUP_ARGS_FOR_AUTO_XORG=""
    declare -g POST_SETUP_ARGS_FOR_ZRAM_SWAP_FRACTION=""
  }

  function do_post_setup
  {
    do_skip_post_setup || return 0
    execute_libvirt_hooks_setup || return 1
    execute_zram_swap_setup || return 1
    execute_auto_xorg_setup || return 1
    execute_looking_glass_setup || return 1
    execute_scream_setup || return 1
    execute_audio_loopback_setup || return 1
  }

  function do_skip_post_setup
  {
    if ! "${POST_SETUP_DO_SKIP_ALL}"; then
      execute_or_skip_prompt "Skip post-setup?" && POST_SETUP_DO_SKIP_ALL=true
    fi

    if "${POST_SETUP_DO_SKIP_ALL}"; then
      print_prefix_note "Skipping VFIO setup."
      return 1
    fi
  }

  # <summary>Execution</summary>
    # <summary>Audio loopback</summary>
      function execute_audio_loopback_setup
      {
        if ! "${POST_SETUP_DO_EXECUTE_ZRAM_SWAP}"; then
          return 0
        fi

        local -r user_name="portellam"
        local -r repo_name="audio-loopback"

        execute_audio_loopback_setup_prompt || return 1

        local -r full_repo="${user_name}/${repo_name}"
        local -r script_name="installer.sh"

        if "${POST_SETUP_DO_EXECUTE_ZRAM_SWAP}"; then
          update_or_clone_git_repo "${full_repo}" "${user_name}"
        fi

        if ! execute_audio_loopback_setup_install \
          || ! execute_audio_loopback_setup_undo; then
          return 1
        fi
      }

      function execute_audio_loopback_setup_install
      {
        if ! cd "${BIN_PATH}${full_repo}"; then
            print_prefix_error "Failed to find build directory."
            return 1
        fi

        if [[ ! -e "${script_name}" ]]; then
            print_prefix_error "Failed to find script '${script_name}'."
            return 1
        fi

        if ! sudo bash "${script_name}" --install &> /dev/null; then
            print_prefix_error "Failed to execute script '${script_name}'."
            return 1
        fi
      }

      function execute_audio_loopback_setup_prompt
      {
        if "${POST_SETUP_DO_EXECUTE_AUDIO_LOOPBACK}"; then
          return 0
        fi

        echo
        execute_or_skip_prompt "Install ${SET_COLOR_YELLOW}${repo_name}${RESET_COLOR}?"
      }

      function execute_audio_loopback_setup_undo
      {
        if "${POST_SETUP_DO_EXECUTE_AUDIO_LOOPBACK}"; then
          return 0
        fi

        execute_or_skip_prompt "Uninstall ${SET_COLOR_YELLOW}${repo_name}${RESET_COLOR}?" || return 255
        execute_zram_swap_setup_uninstall
      }

      function execute_audio_loopback_setup_uninstall
      {
        if ! sudo bash "${script_name}" --uninstall &> /dev/null; then
            print_prefix_error "Failed to execute script '${script_name}'."
            return 1
        fi
      }

    # <summary>auto-xorg</summary>
      function execute_auto_xorg_setup
      {
        if ! "${POST_SETUP_DO_EXECUTE_ZRAM_SWAP}"; then
          return 0
        fi

        local -r user_name="portellam"
        local -r repo_name="auto-xorg"

        execute_auto_xorg_setup_prompt || return 1

        local -r full_repo="${user_name}/${repo_name}"
        local -r script_name="installer.sh"

        if "${POST_SETUP_DO_EXECUTE_AUTO_XORG}"; then
          update_or_clone_git_repo "${full_repo}" "${user_name}"
        fi

        if ! get_usage_auto_xorg_prompt \
          || ! execute_auto_xorg_setup_install \
          || ! execute_auto_xorg_setup_undo; then
          return 1
        fi
      }

      function execute_auto_xorg_setup_install
      {
        if ! cd "${BIN_PATH}${full_repo}"; then
            print_prefix_error "Failed to find build directory."
            return 1
        fi

        if [[ ! -e "${script_name}" ]]; then
            print_prefix_error "Failed to find script '${script_name}'."
            return 1
        fi

        if ! sudo bash "${script_name}" --install "${POST_SETUP_ARGS_FOR_AUTO_XORG}" &> /dev/null; then
            print_prefix_error "Failed to execute script '${script_name}'."
            return 1
        fi
      }

      function execute_auto_xorg_setup_prompt
      {
        if "${POST_SETUP_DO_EXECUTE_AUTO_XORG}"; then
          return 0
        fi

        echo
        execute_or_skip_prompt "Install ${SET_COLOR_YELLOW}${repo_name}${RESET_COLOR}?"
      }

      function get_usage_auto_xorg_prompt
      {
        execute_or_skip_prompt "Set arguments for ${SET_COLOR_YELLOW}${repo_name}${RESET_COLOR}?" || return 0

        if ! sudo bash "${script_name}" --help &> /dev/null; then
            print_prefix_error "Failed to execute script '${script_name}'."
            return 1
        fi

        for counter in $( seq 0 2 ); do
          local argument1 argument2
          read -r -p "Enter arguments: " argument1 argument2

          get_argument_enum_for_auto_xorg "${argument1}" "${argument2}" || continue
          return 0
        done

        return 1
      }

      function execute_auto_xorg_setup_undo
      {
        if "${POST_SETUP_DO_EXECUTE_AUTO_XORG}"; then
          return 0
        fi

        execute_or_skip_prompt "Uninstall ${SET_COLOR_YELLOW}${repo_name}${RESET_COLOR}?" || return 255
        execute_zram_swap_setup_uninstall
      }

      function execute_auto_xorg_setup_uninstall
      {
        if ! sudo bash "${script_name}" --uninstall &> /dev/null; then
            print_prefix_error "Failed to execute script '${script_name}'."
            return 1
        fi
      }

    # <summary>libvirt-hooks</summary>
      function execute_libvirt_hooks_setup
      {
        if ! "${POST_SETUP_DO_EXECUTE_ZRAM_SWAP}"; then
          return 0
        fi

        local -r user_name="portellam"
        local -r repo_name="libvirt-hooks"

        execute_libvirt_hooks_setup_prompt || return 1

        local -r full_repo="${user_name}/${repo_name}"
        local -r script_name="libvirt-hooks.sh"

        if "${POST_SETUP_DO_EXECUTE_LIBVIRT_HOOKS}"; then
          update_or_clone_git_repo "${full_repo}" "${user_name}" || return 1
        fi

        if ! execute_libvirt_hooks_setup_install \
          || ! execute_libvirt_hooks_setup_undo; then
          return 1
        fi
      }

      function execute_libvirt_hooks_setup_install
      {
        if ! cd "${BIN_PATH}${full_repo}"; then
            print_prefix_error "Failed to find build directory."
            return 1
        fi

        if [[ ! -e "${script_name}" ]]; then
            print_prefix_error "Failed to find script '${script_name}'."
            return 1
        fi

        if ! sudo bash "${script_name}" --install &> /dev/null; then
            print_prefix_error "Failed to execute script '${script_name}'."
            return 1
        fi
      }

      function execute_libvirt_hooks_setup_prompt
      {
        if "${POST_SETUP_DO_EXECUTE_LIBVIRT_HOOKS}"; then
          return 0
        fi

        echo
        execute_or_skip_prompt "Install ${SET_COLOR_YELLOW}${repo_name}${RESET_COLOR}?"
      }

      function execute_libvirt_hooks_setup_undo
      {
        if "${POST_SETUP_DO_EXECUTE_LIBVIRT_HOOKS}"; then
          return 0
        fi

        execute_or_skip_prompt "Uninstall ${SET_COLOR_YELLOW}${repo_name}${RESET_COLOR}?" || return 255
        execute_zram_swap_setup_uninstall
      }

      function execute_libvirt_hooks_setup_uninstall
      {
        if ! sudo bash "${script_name}" --uninstall &> /dev/null; then
            print_prefix_error "Failed to execute script '${script_name}'."
            return 1
        fi
      }

    # <summary>zram-swap</summary>
    function execute_zram_swap_setup
    {
      if ! "${POST_SETUP_DO_EXECUTE_ZRAM_SWAP}"; then
        return 0
      fi

      execute_zram_swap_setup_main
      execute_zram_swap_undo
    }

    function execute_zram_swap_undo
    {
      if "${POST_SETUP_DO_EXECUTE_ZRAM_SWAP}"; then
        return 0
      fi

      execute_or_skip_prompt "Uninstall ${SET_COLOR_YELLOW}${repo_name}${RESET_COLOR}?" || return 255
      execute_zram_swap_setup_uninstall
    }

    function execute_zram_swap_setup_install
    {
      if ! cd "${BIN_PATH}${full_repo}"; then
          print_prefix_error "Failed to find build directory."
          return 1
      fi

      if [[ ! -e "${script_name}" ]]; then
          print_prefix_error "Failed to find script '${script_name}'."
          return 1
      fi

      if ! sudo bash "${script_name}" --install &> /dev/null; then
          print_prefix_error "Failed to execute script '${script_name}'."
          return 1
      fi
    }

    function execute_zram_swap_setup_main
    {
      local -r user_name="foundObjects"
      local -r repo_name="zram-swap"

      execute_zram_swap_setup_prompt || return 1

      local -r full_repo="${user_name}/${repo_name}"
      local -r script_name="install.sh"

      if "${POST_SETUP_DO_EXECUTE_ZRAM_SWAP}"; then
        update_or_clone_git_repo "${full_repo}" "${user_name}"
      fi

      if ! execute_zram_swap_setup_install \
        || ! execute_zram_swap_undo; then
        return 1
      fi

      if "${POST_SETUP_DO_EXECUTE_ZRAM_SWAP}"; then
        execute_zram_swap_setup_modify
      fi
    }

    function execute_zram_swap_setup_modify
    {
      local -r file="/etc/default/zram-swap"
      local line_to_match="_zram_fraction="
      local fraction="${POST_SETUP_ARGS_FOR_ZRAM_SWAP_FRACTION}"

      if ! "${POST_SETUP_HAS_ARG_ZRAM_SWAP_DEFAULTS}" \
        && ! "${POST_SETUP_HAS_ARG_ZRAM_SWAP_SET_FRACTION}"; then
        get_zram_swap_value_prompt "fraction" || return 1
      fi

      if "${POST_SETUP_HAS_ARG_ZRAM_SWAP_DEFAULTS}" \
        && ! "${POST_SETUP_HAS_ARG_ZRAM_SWAP_SET_FRACTION}"; then
        local -ir zram_swap_available_memory=$(( AVAILABLE_MEMORY / 2 ))
        local -i denominator=$( printf "%.0f" $( echo "scale=2;${MAX_MEMORY}/${zram_swap_available_memory}" | bc ) )

        if [[ $( expr ${denominator} % 2 ) -eq 1 ]]; then
          (( denominator-- ))
        fi

        if [[ "${denominator}" -le 0 ]]; then
          print_prefix_error "Denominator is negative or zero."
        fi

        fraction="1/${denominator}"
      fi

      if ! sed -i '/'${line_to_match}'"*"/c\'${line_to_match}'"'${fraction}'"' "${file}"; then
        print_prefix_error "Failed to write output to zram-swap file."
        return 1
      fi

      if ! "${POST_SETUP_HAS_ARG_ZRAM_SWAP_FORCE}" \
        && sudo swapon -v | grep zram &> /dev/null \
        && sudo swapon -v | grep zram &> /dev/null \
        && ! sudo swapon -v | grep zram | grep 0B &> /dev/null; then
        print_prefix_error "zram-swap device(s) already in use. Restart system to save changes."
        return 0
      fi

      if sudo swapon -v | grep zram &> /dev/null \
        && ! sudo swapoff /dev/zram* &> /dev/null; then
        print_prefix_error "Failed to disable zram-swap device(s)."
        return 1
      fi

      if ! sudo systemctl daemon-reload &> /dev/null; then
        print_prefix_error "Failed to update systemd."
        return 1
      fi

      if ! sudo systemctl restart zram-swap &> /dev/null; then
        print_prefix_error "Failed to restart zram-swap service."
        return 1
      fi

      if ! sudo swapon -v | grep zram &> /dev/null; then
        print_prefix_error "Failed to enable zram-swap device."
        return 1
      fi
    }

    function execute_zram_swap_setup_prompt
    {
      if "${POST_SETUP_DO_EXECUTE_ZRAM_SWAP}"; then
        return 0
      fi

      echo
      execute_or_skip_prompt "Install ${SET_COLOR_YELLOW}${repo_name}${RESET_COLOR}?"
    }

    function execute_zram_swap_setup_uninstall
    {
      if ! sudo bash "${script_name}" --uninstall &> /dev/null; then
          print_prefix_error "Failed to execute script '${script_name}'."
          return 1
      fi
    }

    function get_zram_swap_value_prompt
    {
      local -n reference="${1}"

      for counter in $( seq 0 2 ); do
        read -r -p "Set fraction of total memory for zram-swap to use (to calculate default, enter 'default'): " answer

        if get_zram_swap_size "${answer}"; then
          reference="${answer}"
          return 0
        fi
      done

      return 1
    }

    function get_zram_swap_size
    {
      is_host_memory_sufficient_for_hugepages || return 1

      case "${1}" in
        *"/"* )
          local -i numerator=$( echo ${1} | cut -d '/' -f1 )
          local -i denominator=$( echo ${1} | cut -d '/' -f2 ) ;;

        "default" )
          POST_SETUP_HAS_ARG_ZRAM_SWAP_DEFAULTS=true
          return 0 ;;

        * )
          print_prefix_error "Not a fraction."
          return 1 ;;
      esac

      if ! is_int "${numerator}" \
        || ! is_int "${DENOMINATOR}"; then
        print_prefix_error "Values are not numbers."
        return 1
      fi

      if [[ "${numerator}" -lt "${denominator}" ]] \
        || [[ "${denominator}" -gt 1 ]]; then
        declare -g POST_SETUP_ARGS_FOR_ZRAM_SWAP_FRACTION="${1}"
        POST_SETUP_HAS_ARG_ZRAM_SWAP_SET_FRACTION=true
      return 0

      elif [[ "${denominator}" -eq 0 ]]; then
        return 1

      else
        echo -e "${PREFIX_ERROR} Invalid fraction."
      fi

      return 1
    }

    function is_host_memory_sufficient_for_zram_swap
    {
    	if ! get_free_memory; then
    		print_prefix_error "Insufficient Host memory for zram-swap."
    		return 1
    	fi
    }
# </functions>

# <code>
  declare_parameters
  unset declare_parameters
# </code