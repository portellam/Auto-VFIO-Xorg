#!/bin/bash sh

#
# Filename:         vfiolib-backups
# Description:      Gets and sets necessary backups of system files.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <summary> Using </summary>
# <code>
    source bashlib-all
    source vfiolib-all
# </code>

# <summary> Functions </summary>
# <code>
    function GetBackups
    {
        if [ -z "$_APPARMOR_QEMU_BACKUP" ] \
            || [ -z "$_APPARMOR_QEMU_BACKUP" ] \
            || [ -z "$_CUSTOM_GRUB_FILE_BACKUP" ]; then
            return 1
        fi

        if [ -z "$_GRUB_FILE_BACKUP_1" ]; then
            GetBackups_GRUB || return 1
        fi

        if [ -z "$_QEMU_FILE_BACKUP" ]; then
            GetBackups_QEMU || return 1
        fi

        _GET_BACKUP_FILES=true
        return 0
    }

    function GetBackups_GRUB
    {
        if [[ -e "$_GRUB_FILE_PATH_1" ]]; then
            return 0
        fi

        if [[ -z "$_GRUB_FILE_PATH_2" && -z "$_GRUB_FILE_BACKUP_1" ]]; then
            echo -e "Could not find GRUB source file."
            return 1
        fi

        if [[ -z "$_GRUB_FILE_PATH_BACKUP" ]]; then
            cp "$_GRUB_FILE_PATH_2 $_GRUB_FILE_BACKUP_1" && return 0
            echo -e "Failed to backup GRUB source file."
            return 1
        fi

        return 0
    }

    function GetBackups_QEMU
    {
        return 1    # TODO: fix this function

        if [[ -e "$_QEMU_FILE_PATH" ]]; then
            return 0
        fi

        if [[ -z "$_QEMU_FILE_BACKUP" ]]; then
            echo -e "Could not find QEMU source file was not found. Attempting to download."

            if ! wget "$_QEMU_FILE_URL" > "$_QEMU_FILE_BACKUP"; then        # Note: double check this syntax
                echo -e "Failed to backup QEMU source file."
                return 1
            fi
        fi

        cp $_QEMU_FILE_BACKUP $_QEMU_FILE_PATH && return 0
        echo -e "Failed to restore QEMU backup file."
        return 1
    }

    function SetBackups
    {
        if ! "$_GET_BACKUP_FILES"; then
            echo -e "Could not find backup file(s)."
            return 1
        fi

        SetBackups_GRUB || return 1
        SetBackups_QEMU || return 1
        _SET_BACKUP_FILES=true
        return 0
    }

    function SetBackups_GRUB
    {
        if [ ! "$_GET_BACKUP_FILES" ]; then
            return 1
        fi

        if ! cp "$_GRUB_FILE_BACKUP_1" "$_GRUB_FILE_BACKUP_2"; then
            echo -e "Failed to copy GRUB backup file."
            return 1
        fi

        # <remarks> Overwrite target lines, lines that need to be set to defaults. </remarks>
        local -r str_line_grub_distributor="GRUB_DISTRIBUTOR=\`lsb_release -i -s 2> /dev/null || echo "$( lsb_release -i -s )"\`"
        local -r str_line_grub_cmdline_default="GRUB_CMDLINE_LINUX_DEFAULT=\"quiet\""
        local -r str_line_grub_cmdline="GRUB_CMDLINE_LINUX=\"\""
        sed -i 's/GRUB_DISTRIBUTOR=*/$str_line_grub_distributor' "$_GRUB_FILE_BACKUP_2"
        sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT=*/$str_line_grub_cmdline_default' "$_GRUB_FILE_BACKUP_2"
        sed -i 's/GRUB_CMDLINE_LINUX=*/$str_line_grub_cmdline_default' "$_GRUB_FILE_BACKUP_2"

        if [ ! -z $( grep "$str_line_grub_distributor" "$_GRUB_FILE_BACKUP_2" ) ] \
            || [ ! -z $( grep "$str_line_grub_distributor" "$_GRUB_FILE_BACKUP_2" ) ] \
            || [ ! -z $( grep "$str_line_grub_distributor" "$_GRUB_FILE_BACKUP_2" ) ]; then
            echo -e "Failed to overwrite target lines of GRUB backup file."
            return 1
        fi

        # <remarks> Note: this must be the second file (that is the overwritten copy) </remarks>
        if ! cp "$_GRUB_FILE_BACKUP_2" "$_GRUB_FILE_PATH_1"; then
            echo -e "Failed to restore GRUB backup file."
            return 1
        fi

        return 0
    }

    function SetBackups_QEMU
    {
        [ ! $_GET_BACKUP_FILES ] && return 1
        return 1
    }
# </code>

# <summary> Globals </summary>
# <params>
    # <remarks> Feature flags </remarks>
    declare -g _GET_BACKUP_FILES=false
    declare -g _SET_BACKUP_FILES=false

    # <remarks> Files </remarks>
    declare -gr _BACKUPS_PATH="backups/"

    declare -gr _APPARMOR_QEMU_BACKUP="libvirt-qemu"
    declare -gr _APPARMOR_QEMU_FILE_PATH="/etc/apparmor.d/local/abstractions/libvirt-qemu"
    declare -gr _APPARMOR_QEMU_FILE_URL=""

    declare -gr _CUSTOM_GRUB_FILE_BACKUP="custom"
    declare -gr _CUSTOM_GRUB_FILE_PATH="/etc/grub.d/proxifiedScripts/custom"
    # local CUSTOM_GRUB_FILE_URL=""

    declare -gr _GRUB_FILE_BACKUP_1="grub"
    declare -gr _GRUB_FILE_BACKUP_2="grub.new"
    declare -gr _GRUB_FILE_PATH_1="/etc/default/grub"
    declare -gr _GRUB_FILE_PATH_2="/usr/share/grub/default/grub"
    # local GRUB_FILE_URL=""

    declare -gr _QEMU_FILE_BACKUP="qemu.conf"
    declare -gr _QEMU_FILE_PATH="/etc/libvirt/qemu.conf"
    declare -gr _QEMU_FILE_URL="https://github.com/libvirt/libvirt/blob/master/src/qemu/qemu.conf.in"
# </params>

# <summary> Main </summary>
# <code>
    # SetBackups                # shall I run this here?
# </code>
