#!/bin/false

#
# Filename:       deploy-vfio_logic_database
# Description:    Parse and select IOMMU groups.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

# <sets>
  set -o nounset
  set -o pipefail
# </sets>

# <sources>
  source deploy-vfio_logic_common
# </sources>

# <functions>
  function declare_parameters
  {
    if [[ "${DATABASE_ARE_PARAMS_SET}" == true ]]; then
      return 0
    fi

    declare -g DATABASE_ARE_PARAMS_SET=true

    declare -g DATABASE_DO_PARSE_DATABASE=false
    declare -g DATABASE_DO_PARSE_DATABASE_FROM_XML=false
    declare -g DATABASE_XML_FILE_IS_SPECIFIED=false
    declare -g DATABASE_HAS_ARG_PARSE_IOMMU=false
    declare -g DATABASE_HAS_ARG_PARSE_IOMMU_SELECT_ALL=false
    declare -g DATABASE_HAS_ARG_PARSE_IOMMU_SELECT_SOME=false

    declare -gr GET_DEVICES_FOR_IOMMU_GROUP='ls /sys/kernel/iommu_groups/${iommu_group_id}/devices/'

    declare -gA DEVICE_DRIVER_XML_LIST
    declare -ga IOMMU_GROUP_ID_LIST=( $( ls /sys/kernel/iommu_groups/ | sort -n ) )
    declare -ga IOMMU_GROUPS_FOR_HOST_LIST=( )
    declare -ga IOMMU_GROUPS_FOR_VFIO_LIST=( )
    declare -ga IOMMU_GROUPS_WITH_VGA_FOR_HOST_LIST=( )
    declare -ga IOMMU_GROUPS_WITH_VGA_FOR_VFIO_LIST=( )

    declare -gr DEFAULT_XML_FILE="${BACKUPS_PATH}/parse.xml"        # TODO: declare backups path. NOTE: unused param.
    declare -g XML_FILE="${DEFAULT_XML_FILE}"
  }

  function do_parse_database
  {
    do_parse_database_prompt || return 0
    is_unparsed_list_valid || return 1
    parse_from_xml_prompt && specify_xml_file || return 1

    if ! is_XML_valid; then
      does_host_not_have_existing_VFIO_setup || return 1
      export_IOMMU_groups_to_XML || return 1
      specify_IOMMU_group_list
    fi

    if ! does_host_not_have_existing_VFIO_setup; then
      does_XML_not_have_existing_VFIO_setup || return 1
      import_IOMMU_groups_from_XML
    fi

    specify_IOMMU_group_list
  }

  function do_parse_database_prompt
  {
    if "${DATABASE_DO_PARSE_DATABASE}"; then
      return 0
    fi

    execute_or_skip_prompt "Parse database for IOMMU groups?" || return 1
    DATABASE_DO_PARSE_DATABASE=true
  }

  function is_unparsed_list_valid
  {
    local -r output="Invalid IOMMU groups."

    if ! is_enum "IOMMU_GROUP_ID_LIST"; then
      print_prefix_error "${output}"
      return 1
    fi

    for value in ${IOMMU_GROUP_ID_LIST[@]}; do
      if ! is_int "${value}"; then
        print_prefix_error "${output}"
        return 1
      fi
    done
  }

  # <summary>Getters</summary>
    function get_device_class
    {
      if [[ ! -z "${2}" ]] \
        || [[ ! -z "${1}" ]]; then
        return 1
      fi

      local device="${1}"
      local -n reference="${2}"
      reference="$( lspci -ms ${device} | cut -d '"' -f 2 )"
    }

    function get_device_driver
    {
      if [[ ! -z "${2}" ]] \
        || [[ ! -z "${1}" ]]; then
        return 1
      fi

      local device="${1}"
      local -n reference="${2}"

      if "${DATABASE_DO_PARSE_DATABASE_FROM_XML}"; then
        reference="${DEVICE_DRIVER_XML_LIST["${device}"]}"
      else
        reference="$( lspci -ks "${device}" | grep -i "driver" | cut -d " " -f 5 )"
      fi
    }

    function get_device_hardware_ID
    {
      if [[ ! -z "${2}" ]] \
        || [[ ! -z "${1}" ]]; then
        return 1
      fi

      local device="${1}"
      local -n reference="${2}"

      reference="$( lspci -ns ${device} | cut -d " " -f 3 )"
    }

    function get_device_name
    {
      if [[ ! -z "${2}" ]] \
        || [[ ! -z "${1}" ]]; then
        return 1
      fi

      local device="${1}"
      local -n reference="${2}"

      reference="$( lspci -ms ${device}  | cut -d '"' -f 6 )"
    }

    function get_device_vendor
    {
      if [[ ! -z "${2}" ]] \
        || [[ ! -z "${1}" ]]; then
        return 1
      fi

      local device="${1}"
      local -n reference="${2}"

      reference="$( lspci -ms ${device} | cut -d '"' -f 4 )"
    }

  # <summary>Host validation</summary>
    function does_host_not_have_existing_VFIO_setup
    {
      for iommu_group_id in ${IOMMU_GROUP_ID_LIST[@]}; do
        if ! is_IOMMU_group_not_binded_to_VFIO "${iommu_group_id}"; then
          print_prefix_error "Detected existing VFIO setup."
          return 1
        fi
      done

      DOES_HOST_HAVE_VFIO=false
    }

    function does_XML_not_have_existing_VFIO_setup
    {
      if eval "${GET_PARSE_FROM_XML}" | grep -E "vfio" &> /dev/null; then
        print_prefix_error "Detected VFIO drivers in XML file."
        return 1
      fi

      DOES_XML_HAVE_VFIO=false
    }

  # <summary>IOMMU Groups validation</summary>
    function add_some_iommu_groups_to_parsed_list
    {
      local regex_for_range_of_nums='^[0-9]+[-][0-9]+$'
      local -ar iommu_groups_temp_list

      if echo "${1}" | grep -E -q "${regex_for_range_of_nums}"; then
        local -i range_start=$( echo "${1}" | cut -d '-' -f 1 )
        local -i range_stop=$( echo "${1}" | cut -d '-' -f 2 )
        is_IOMMU_group_id_valid "${range_start}" || return 1
        is_IOMMU_group_id_valid "${range_stop}" || return 1
        iommu_groups_temp_list+=( $( seq "${range_start}" "${range_stop}" ) )

      elif is_int "${1}"; then
        is_IOMMU_group_id_valid "${1}" || return 1
        iommu_groups_temp_list+=( "${1}" )

      else
        print_prefix_error "Invalid IOMMU group ID(s)."
        return 1
      fi

      IFS=$'\n'
      iommu_groups_temp_list=( $( sort -hu <<<"${iommu_groups_temp_list[*]}" ) )
      unset IFS

      for iommu_group_id in ${iommu_groups_temp_list[@]}; do
        if does_IOMMU_group_have_external_devices "${iommu_group_id}"; then
          IOMMU_GROUPS_FOR_VFIO_LIST+=( "${iommu_group_id}" )

          if does_IOMMU_group_have_VGA_device "${iommu_group_id}"; then
            IOMMU_GROUPS_WITH_VGA_FOR_VFIO_LIST+=( "${iommu_group_id}" )
          fi

          break
        fi
      done

      for iommu_group_id in ${IOMMU_GROUP_ID_LIST[@]}; do
        local is_in_vfio_list=false

        for this_iommu_group_id in ${IOMMU_GROUPS_FOR_VFIO_LIST[@]}; do
          if [[ "${this_iommu_group_id}" -eq "${iommu_group_id}" ]]; then
            IS_IN_VFIO_LIST=true
            break
          fi
        done

        if "${is_in_vfio_list}"; then
          continue
        fi

        if does_IOMMU_group_have_VGA_device "${iommu_group_id}"; then
          IOMMU_GROUPS_WITH_VGA_FOR_HOST_LIST+=( "${iommu_group_id}" )
        else
          IOMMU_GROUPS_FOR_HOST_LIST+=( "${iommu_group_id}" )
        fi
      done

      return 0
    }

    function AddValidIOMMUGroupsToParsedList
    {
      for iommu_group_id in ${IOMMU_GROUP_ID_LIST[@]}; do
        local -a device_list=( $( eval "${GET_IOMMU_GROUP_DEVICE_LIST}" ) )

        if ! does_IOMMU_group_have_external_devices "${iommu_group_id}"; then
          if does_IOMMU_group_have_VGA_device "${iommu_group_id}"; then
            IOMMU_GROUPS_FOR_HOST_LIST+=( "${iommu_group_id}" )
          fi

          IOMMU_GROUPS_WITH_VGA_FOR_HOST_LIST+=( "${iommu_group_id}" )
          break
        fi

        IOMMU_GROUPS_FOR_VFIO_LIST+=( "${iommu_group_id}" )

        if does_IOMMU_group_have_VGA_device "${iommu_group_id}"; then
          IOMMU_GROUPS_WITH_VGA_FOR_VFIO_LIST+=( "${iommu_group_id}" )
        fi
      done
    }

    function does_IOMMU_group_have_external_devices
    {
      is_int "${1}" || return 1
      local -ir iommu_group_id="${1}"
      local -ar device_list="$( eval "${GET_DEVICES_FOR_IOMMU_GROUP}" )"

      for device in ${device_list[@]}; do
        is_device_external "${device}" && return 0
      done

      return 1
    }

    function does_IOMMU_group_have_VGA_device
    {
      is_int "${1}" || return 1
      local -ir iommu_group_id="${1}"
      local -ar device_list="$( eval "${GET_DEVICES_FOR_IOMMU_GROUP}" )"

      for device in ${device_list[@]}; do
        is_device_VGA "${device}" && return 0
      done

      print_prefix_error "Please enter valid IOMMU group ID which contains one or more VGA devices."
      return 1
    }

    function does_list_have_VGA_device
    {
      local -n reference="${1}"

      if [[ "${#reference[@]}" -eq 0 ]]; then
        return 1
      fi

      for iommu_group_id in ${reference[@]}; do
        does_IOMMU_group_have_VGA_device "${iommu_group_id}" &> /dev/null && return 0
      done

      return 1
    }

    function is_IOMMU_group_not_binded_to_VFIO
    {
      is_int "${1}" || return 1
      local -ir iommu_group_id="${1}"
      local -ar device_list="$( eval "${GET_DEVICES_FOR_IOMMU_GROUP}" )"

      for device in ${device_list[@]}; do
        is_device_not_binded_to_VFIO "${device}" || return 1
      done
    }

    function is_IOMMU_group_id_valid
    {
      local -ir minimum_iommu_group_id=0
      local -ir maximum_iommu_group_id="${IOMMU_GROUP_ID_LIST[-1]}"

      if ! is_int "${1}" \
        || [[ "${1}" -le "${minimum_iommu_group_id}" ]] \
        || [[ "${1}" -ge "${maximum_iommu_group_id}" ]] ; then
        print_prefix_error "Please enter valid IOMMU group ID(s), between ${minimum_iommu_group_id} and ${maximum_iommu_group_id}."
        return 1
      fi
    }

    function is_valid_enum_of_IOMMU_groups
    {
      is_enum "${1}" || return 1
      local -n reference="${1}"

      for value in ${reference[@]}; do
        is_int "${value}" || return 1
      done
    }

  # <summary>Device validation</summary>
    function is_device_driver_not_excluded
    {
      if [[ ! -z "${1}" ]]; then
        return 1
      fi

      local driver="${1}"
      local excluded_driver="snd_hda_intel"

      case "${driver}" in
        *"${excluded_driver}"* )
          return 1 ;;
      esac
    }

    function is_device_driver_not_VFIO
    {
      if [[ ! -z "${1}" ]]; then
        return 1
      fi

      local driver="${1}"
      local matched_driver="vfio-pci"

      case "${driver}" in
        *"${matched_driver}"* )
          return 1 ;;
      esac
    }

    function is_device_external
    {
      if [[ ! -z "${1}" ]]; then
        return 1
      fi

      local device="${1}"
      local regex_get_domain_id='^[0-9A-F][1-9A-F]$'
      local -u domain_id=$( echo "${device}" | cut -d ':' -f 2 )
      echo "${domain_id}" | grep -E -q "${regex_get_domain_id}"
    }

    function is_device_for_PCI_STUB
    {
      if [[ ! -z "${1}" ]]; then
        return 1
      fi

      local device="${1}"
      local -l class="$( lspci -ms ${device} | cut -d '"' -f 2 )"

      case "${class}" in
        *"usb"* )
          return 0 ;;
      esac

      return 1
    }

    function is_device_not_binded_to_VFIO
    {
      if [[ ! -z "${1}" ]]; then
        return 1
      fi

      local device="${1}"
      local driver=""
      set_device_driver "${device}" "driver"
      is_device_driver_not_VFIO "${driver}"
      return "${?}"
    }

    function is_device_not_excluded
    {
      if [[ ! -z "${1}" ]]; then
        return 1
      fi

      local device="${1}"
      local driver=""
      set_device_driver "${device}" "driver"
      is_device_driver_not_excluded "${driver}"
      return "${?}"
    }

    function is_device_not_external
    {
      if [[ ! -z "${1}" ]]; then
        return 1
      fi

      local device="${1}"
      local driver=""
      set_device_driver "${device}" "driver"
      is_device_external "${device}"
      return "${?}"
    }

    function is_device_VGA
    {
      if [[ ! -z "${1}" ]]; then
        return 1
      fi

      local device="${1}"
      local -l class="$( lspci -ms ${device} | cut -d '"' -f 2 )"

      case "${class}" in
        *"vga"* | *"graphic"* | *"display"* )
          return 0 ;;
      esac

      return 1
    }

  # <summary>IOMMU Groups presentation</summary>
    function print_this_IOMMU_group
    {
      is_int "${1}" || return 1
      local -ir iommu_group_id="${1}"
      local -ar device_list="$( eval "${GET_DEVICES_FOR_IOMMU_GROUP}" )"

      for device in ${device_list[@]}; do
        if is_device_external "${device}"; then
          local class driver hwid name vendor

          set_device_class "${device}" "class"
          set_device_driver "${device}" "driver"
          set_device_hardware_ID "${device}" "hwid"
          set_device_name "${device}" "name"
          set_device_vendor "${device}" "vendor"

          echo -e "\tSlot ID:\t${device}"
          echo -e "\tVendor name:\t${vendor}"
          echo -e "\tDevice name:\t${name}"
          echo -e "\tClass/Type:\t${class}"
          echo -e "\tHardware ID:\t${hwid}"
          local drive_output="\tDriver:\t\t"

          if [[ ! -z "${driver}" ]]; then
            echo -e "${drive_output}${driver}"
          else
            echo -e "${drive_output}N/A"
          fi

          echo
        fi
      done
    }

    function specify_IOMMU_group_list
    {
      local -n reference="IOMMU_GROUP_ID_LIST"
      echo

      for iommu_group_id in ${reference[@]}; do
        specify_this_IOMMU_group "${iommu_group_id}"
      done
    }

    function specify_this_IOMMU_group
    {
      is_int "${1}" || return 1
      local -ir iommu_group_id="${1}"

      if ! does_IOMMU_group_have_external_devices "${1}"; then
        IOMMU_GROUPS_FOR_HOST_LIST+=( "${iommu_group_id}" )
        return 1
      fi

      if ! specify_this_IOMMU_group_prompt "${1}" \
        || ! print_this_IOMMU_group "${1}"; then
        return 1
      fi
    }

    function specify_this_IOMMU_group_prompt
    {
      is_int "${1}" || return 1
      local -ir iommu_group_id="${1}"

      if execute_or_skip_prompt "Select IOMMU group ${SET_COLOR_YELLOW}${iommu_group_id}${RESET_COLOR}?"; then
        IOMMU_GROUPS_FOR_VFIO_LIST+=( "${iommu_group_id}" )

        if does_IOMMU_group_have_VGA_device "${iommu_group_id}" &> /dev/null; then
          IOMMU_GROUPS_WITH_VGA_FOR_VFIO_LIST+=( "${iommu_group_id}" )
        fi

        echo
        return 0
      fi

      if does_IOMMU_group_have_VGA_device "${iommu_group_id}" &> /dev/null; then
        IOMMU_GROUPS_WITH_VGA_FOR_HOST_LIST+=( "${iommu_group_id}" )
        echo
        return 0
      fi

      IOMMU_GROUPS_FOR_HOST_LIST+=( "${iommu_group_id}" )
      echo
    }

  # <summary>XML</summary>
    function export_IOMMU_groups_to_XML
    {
      local -a output=( )
      local -a iommu_output=( )

      for iommu_group_id in $( ls -1v /sys/kernel/iommu_groups/ | sort -h ); do
        local -a device_output=( )
        local line_iommu_id="id=\"${iommu_group_id}\""

        for device in $( eval "${GET_DEVICES_FOR_IOMMU_GROUP}" ); do
          local device_driver=$( lspci -ks ${device} | grep -i "driver" | cut -d " " -f 5 )
          local line_device_id="dev_id=\"${device}\""
          local line_device_driver="driver=\"${device_driver}\""
          local line_device="${line_device_id} ${line_device_driver}"

          # <note>Currently unused XML data. The minimum data necessary is the device ID and device driver.</note>
          # local device_class="$( lspci -ms ${device} | cut -d \" -f 2 )"
          # local device_hwid=$( lspci -ns ${device} | cut -d " " -f 3 )
          # local device_name="$( lspci -ms ${device} | cut -d \" -f 6 )"
          # local device_vendor="$( lspci -ms ${device} | cut -d \" -f 4 )"
          # local line_device_class="class=\"${device_class}\""
          # local line_device_hwid="hw_id=\"${device_hwid}\""
          # local line_device_name="name=\"${device_name}\""
          # local line_device_vendor="vendor=\"${device_vendor}\""
          # local line_device="${line_device_id} ${line_device_hwid} ${line_device_driver} ${line_device_class} ${line_device_vendor} ${line_device_name}"

          local line_iommu="<iommu ${line_iommu_id} ${line_device}/>"

          device_output+=(
            "\t${line_iommu}"
          )
        done

        iommu_output+=(
          "${device_output[@]}"
        )
      done

      output=(
        "<xml>"
        "${iommu_output[@]}"
        "</xml>"
      )

      IFS=$'\n'

      if ! sudo echo -e "${output[*]}" > "${XML_FILE}"; then
        print_prefix_error "Failed to write to file '${FILE}'."
        unset IFS
        return 1
      fi

      unset IFS
    }

    function import_IOMMU_groups_from_XML
    {
      IFS=$'\n'
      local -a input=( $( eval "${GET_PARSE_FROM_XML}" ) )
      unset IFS

      for line in "${input[@]}"; do
        local driver=$( echo "${line}" | cut -d '"' -f 6 )
        local device=$( echo "${line}" | cut -d '"' -f 4 )
        DEVICE_DRIVER_XML_LIST["${device}"]="${driver}"
      done

      if ! is_enum "DEVICE_DRIVER_XML_LIST"; then
        print_prefix_error "XML file is empty."
        return 1
      fi
    }

    function is_XML_valid
    {
      if ! xmllint "${XML_FILE}" &> /dev/null; then
        if ! "${DATABASE_DO_PARSE_DATABASE_FROM_XML}"; then
          return 1
        fi

        print_prefix_error "XML file '${XML_FILE}' is invalid."
        return 1
      fi
    }

    function parse_from_xml_prompt
    {
      if "${DATABASE_DO_PARSE_DATABASE_FROM_XML}"; then
        return 0
      fi

      execute_or_skip_prompt "Cross-reference database with XML file?" || return 1
      DATABASE_DO_PARSE_DATABASE_FROM_XML=true
    }

    function specify_xml_file
    {
      if "${DATABASE_XML_FILE_IS_SPECIFIED}"; then
        return 0
      fi

      local -r output="Enter XML filename: "

      for counter in $( seq 0 2 ); do
          read -r -p "${output}" answer

          if ! "${DO_PARSE_DATABASE_FROM_FILE}" \
            && [[ -z "${answer}" ]]; then
            DATABASE_FILE="${DEFAULT_DATABASE_FILE}"
            break
          fi

          is_file "${answer}" || continue
          is_file_not_empty "${answer}" || continue
          set_xml_file "${answer}"
          return 0
        done

      return 1
    }

    function set_xml_file
    {
      XML_FILE="${1}"
      DATABASE_XML_FILE_IS_SPECIFIED=true
    }

    function set_XML_to_default
    {
      XML_FILE="${DEFAULT_XML_FILE}"
    }
# </functions>

# <code>
  declare_parameters
  unset declare_parameters
# </code