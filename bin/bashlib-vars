#!/bin/bash sh

#
# Filename:         bashlib-vars
# Description:      Data-type and variable validation
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source bashlib-globals
# </code>

# <code>
    # <summary> Check if two given files are the same. If true, pass. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    # <paramref name="2"> string: the name of the array </paramref>
    # <returns> the exit code </returns>
    function AreEqualArrays
    {
        declare -an arr_are_equal_arrays_reference_2=$2
        declare -an arr_are_equal_arrays_reference_1=$1
        IsArray "arr_are_equal_arrays_reference_2" || return $?
        IsArray "arr_are_equal_arrays_reference_1" || return $?

        for int_key in ${!arr_are_equal_arrays_reference_1[@]}; do
            if [[ "${arr_are_equal_arrays_reference_1[$int_key]}" != "${arr_are_equal_arrays_reference_2[$int_key]}" ]]; then
                return 1
            fi
        done

        return 0
    }

    # <summary> Find line in array. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    # <param name="2"> string: the line </param>
    # <returns> the exit code </returns>
    function FindLineInArray
    {
        IsString $2 || return $?
        declare -an arr_find_line_in_array_reference=$1
        IsArray "arr_find_line_in_array_reference" || return $?

        for var_element in ${arr_find_line_in_array_reference[@]}; do
            if [[ "${var_element}" == $2 ]]; then
                return 0
            fi
        done

        return 1
    }

    # <summary> Check if the array is empty. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    # <returns> the exit code </returns>
    function IsArray
    {
        function Main
        {
            IsString $1 || return $?
            declare -an arr_is_array_reference=$1

            if [[ ${#arr_is_array_reference[@]} -eq 0 ]]; then
                echo -e "${str_fail_array_is_empty}"
                return $int_code_var_is_empty
            fi

            for var_element in ${arr_is_array_reference[@]}; do
                IsString "${var_element}" &> /dev/null && return 0
            done

            echo -e "${str_fail_array_is_empty}"
            return 1
        }

        IFS=$'\n'
        Main $@
        SaveExitCode
        unset IFS
        return $int_exit_code
    }

    # <summary> Check if the variable is not empty. If true, pass. </summary>
    # <param name="1"> var: the variable </param>
    # <returns> the exit code </returns>
    function IsString
    {
        if [[ -z $1 ]]; then
            echo -e "${var_prefix_error} Empty string."
            return $int_code_var_is_empty
        fi

        return 0
    }

    # <summary> Check if the value is a valid bool. </summary>
    # <param name="1"> var: the boolean </param>
    # <returns> the exit code </returns>
    function IsBool
    {
        IsString $1 || return $?

        case $1 in
            "true" | "false" )
                return 0
                ;;

            * )
                echo -e "${var_prefix_error} Not a boolean."
                return $int_code_var_is_not_bool
                ;;
        esac
    }

    # <summary> Check if the value is a valid number. If true, pass.</summary>
    # <param name="1"> var: the number </param>
    # <returns> the exit code </returns>
    function IsNum
    {
        IsString $1 || return $?

        if ! [[ $1 =~ $str_regex_numbers ]]; then
            echo -e "${var_prefix_error} NaN."
            return $int_code_var_is_NAN
        fi

        return 0
    }

    # <summary> Check if the value is a reference. If true, pass.</summary>
    # <paramref name="1"> var: the name of the variable </param>
    # <returns> the exit code </returns>
    function IsReference
    {
        IsString $1 || return $?
        declare -n var_reference=$1

        if ! IsString $var_reference &> /dev/null; then
            echo -e "${var_prefix_error} Null reference."
            return $int_code_var_is_not_a_reference
        fi

        return 0
    }

    # <summary> Check if the variable is writable. If true, pass. </summary>
    # <paramref name="1"> string: the name of a variable </paramref>
    # <returns> the exit code </returns>
    function IsVarWritable
    {
        IsString $1 || return $?

        if ! eval "unset $1 2> /dev/null"; then
            echo -e "${var_prefix_error} Readonly variable."
            return 1
        fi

        return 0
    }

    # <summary> Output an array. Declare inherited params before calling this function. </summary>
    # <paramref name="1"> string: name of the array </paramref>
    # <param name="2"> bool: True, enable text color. False, no change. </param>
    # <returns> the exit code </returns>
    function PrintArray
    {
        function Main
        {
            declare -an arr_print_array_reference=$1
            IsArray "arr_print_array_reference" || return $?
            local bool_toggle_color=false
            IsBool $2 && bool_toggle_color=$2

            if $bool_toggle_color; then
                echo -e "${var_yellow}${arr_print_array_reference[*]}${var_reset_color}" || return $?
            else
                echo "${arr_print_array_reference[*]}" || return $?
            fi

            return 0
        }

        IFS=$'\n'
        Main $@
        SaveExitCode
        unset IFS
        return $int_exit_code
    }

    # <summary> Replace line in an array. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    # <param name="2"> string: the line to find </param>
    # <param name="3"> string: the new line </param>
    # <returns> the exit code </returns>
    function ReplaceLineInArray
    {
        function Main
        {
            IsString $3 || return $?
            declare -an arr_replace_line_in_array_reference=$1
            IsArray "arr_replace_line_in_array_reference" || IsVarWritable "arr_replace_line_in_array_reference" || return $?
            declare -a arr_replace_line_in_array_new="${arr_replace_line_in_array_reference[*]}"
            FindLineInArray "arr_replace_line_in_array_new" $2 || return $?

            for int_key in ${!arr_replace_line_in_array_new[@]}; do
                local var_element="${arr_replace_line_in_array_new[$int_key]}"

                case "${var_element}" in
                    $2* )
                        arr_replace_line_in_array_new[$int_key]=$3
                        ;;
                esac
            done

            IsArray "arr_replace_line_in_array_new" || return $?
            arr_replace_line_in_array_reference="${arr_replace_line_in_array_new[*]}" || return 1
            return 0
        }

        IFS=$'\n'
        Main $@
        SaveExitCode
        unset IFS
        return $int_exit_code
    }

    # <summary> Sort an array. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    # <param name="2"> bool: True, reverse sort order. False, no change. </param>
    # <returns> the exit code </returns>
    function SortArray
    {
        function Main
        {
            declare -an arr_sort_array_reference=$1
            IsArray "arr_sort_array_reference" || IsVarWritable "arr_sort_array_reference" || return $?
            declare -a arr_sort_array_new=( )
            local bool_is_reverse_sort=false
            IsBool $2 &> /dev/null && bool_is_reverse_sort=$2

            if $bool_is_reverse_sort; then
                arr_sort_array_new=$( sort -r <<< "${arr_sort_array_reference[*]}" ) || return $?
            else
                arr_sort_array_new=$( sort <<< "${arr_sort_array_reference[*]}" ) || return $?
            fi

            IsArray "arr_sort_array_new" || return $?
            arr_sort_array_reference="${arr_sort_array_new[*]}" || return 1
            return 0
        }

        IFS=$'\n'
        Main $@
        SaveExitCode
        unset IFS
        return $int_exit_code
    }

    # <summary> Clear empty elements from array. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    # <returns> the exit code </returns>
    function TrimArray
    {
        function Main
        {
            declare -an arr_trim_array_reference=$1
            IsArray "arr_trim_array_reference" || IsVarWritable "arr_trim_array_reference" || return $?
            declare -a arr_trim_array_new="${arr_trim_array_reference[*]}"
            IsArray "arr_trim_array_new" || return $?

            for int_key in ${!arr_trim_array_new[@]}; do
                local var_element="${arr_trim_array_new[$int_key]}"

                if IsString "${var_element}" &> /dev/null; then
                    arr_trim_array_new[$int_key]=( "${var_element}" ) || return 1
                fi
            done

            IsArray "arr_trim_array_new" || return $?
            arr_trim_array_reference="${arr_trim_array_new[*]}" || return 1
            return 0
        }

        IFS=$'\n'
        Main $@
        SaveExitCode
        unset IFS
        return $int_exit_code
    }
# </code>

# <params>
    # <remarks> Constants </remarks>
    declare -g str_regex_numbers='^[0-9]+$'

    # <remarks> Output statement </remarks>
    declare -g str_fail_array_is_empty="${var_prefix_error} Empty array."
# </params>
