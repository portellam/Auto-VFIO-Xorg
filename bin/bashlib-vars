#!/bin/bash sh

#
# Filename:         bashlib-vars
# Description:      Data-type and variable validation
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source bashlib-globals
# </code>

# <code>
    # <summary> Check if two given files are the same. If true, pass. </summary>
    # <paramref name="1"> string: name of the array </paramref>
    # <paramref name="2"> string: name of the array </paramref>
    function AreEqualArrays
    {
        IsArray $2 || return $?
        IsArray $1 || return $?
        eval 'declare -a arr1=( ${'$1'[@]} )' || return 1
        eval 'declare -a arr2=( ${'$1'[@]} )' || return 1

        for int_key in "${!arr1[@]}"; do
            if [[ "${arr1[$int_key]}" == "${arr2[$int_key]}" ]]; then
                return 1
            fi
        done

        return 0
    }

    # <summary> Find line in array. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    # <param name="2"> string: the line </param>
    function FindLineInArray
    {
        IsString $2 || return $?
        IsArray $1 || return $?
        eval 'declare -a arr=( ${'$1'[@]} )' || return 1

        for var_element in "${arr[@]}"; do
            if [[ "${var_element}" == $2 ]]; then
                return 0
            fi
        done

        return 1
    }

    # <summary> Check if the array is empty. </summary>
    # <paramref name="1"> string: name of the array </paramref>
    function IsArray
    {
        IsString $1 || return $?

        # <params>
        declare -a arr=( $( eval 'echo "${'$1'[@]}"' ) )
        # </params>

        for var_element in "${arr[@]}"; do
            IsString "${var_element}" &> /dev/null && return $?
        done

        if [[ "${#arr[@]}" -eq 0 ]]; then
            echo -e "${var_prefix_error} Empty array."
            return "${int_code_var_is_empty}"
        fi

        return 0
    }

    # <summary> Check if the variable is not empty. If true, pass. </summary>
    # <param name="1"> var: the variable </param>
    function IsString
    {
        if [[ ${#1} -eq 0 || "${1}" == "" ]]; then
            echo -e "${var_prefix_error} Empty string."
            return "${int_code_var_is_empty}"
        fi

        return 0
    }

    # <summary> Check if the value is a valid bool. </summary>
    # <param name="1"> var: the boolean </param>
    function IsBool
    {
        IsString $1 || return $?

        case $1 in
            "true" | "false" )
                return 0
                ;;

            * )
                echo -e "${var_prefix_error} Not a boolean."
                return "${int_code_var_is_not_bool}"
                ;;
        esac
    }

    # <summary> Check if the value is a valid number. If true, pass.</summary>
    # <param name="1"> var: the number </param>
    function IsNum
    {
        IsString $1 || return $?

        if ! [[ $1 =~ $str_regex_numbers ]]; then
            echo -e "${var_prefix_error} NaN."
            return "${int_code_var_is_NAN}"
        fi

        return 0
    }

    # <summary> Check if the variable is writable. If true, pass. </summary>
    # <paramref name="1"> string: the name of a variable </param>
    function IsVarWritable
    {
        IsString $1 || return $?

        if ! eval "unset ${1} 2> /dev/null"; then
            echo -e "${var_prefix_error} Readonly variable."
            return 1
        fi

        return 0
    }

    # <summary> Output an array. Declare inherited params before calling this function. </summary>
    # <paramref name="1"> string: name of the array </paramref>
    function PrintArray
    {
        IsString $1 || return $?
        IFS=$'\n'
        IsArray "$1" &> /dev/null || return $?
        echo
        eval 'echo -e "${var_yellow}${'$1'[*]}${var_reset_color}"' || return 1
        unset IFS
        return 0
    }

    # <summary> Replace line in an array. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    # <param name="2"> string: the line </param>
    # <param name="3"> string: the new line </param>
    function ReplaceLineInArray
    {
        IsString $3 || return $?
        FindLineInArray $1 $2 || return $?
        eval 'declare arr=( ${!'$1'[@]} )' || return 1

        for int_key in "${!arr[@]}"; do
            local var_line="${arr[$int_key]}"

            case "${var_line}" in
                $2* )
                    arr[$int_key]="$3"
                    ;;
            esac
        done

        eval "$1"'=( "${arr[@]}" )' || return 1
        return 0
    }

    # <summary> Sort an array. </summary>
    # <paramref name="1"> string: name of the array </paramref>
    # <param name="2"> bool: True, sort in order. False, sort in reverse order. </param>
    function SortArray
    {
        IsString $1 || return $?

        # <params>
        local bool_sort_in_order=true
        # </params>

        IsBool $2 &> /dev/null && bool_sort_in_order=$2
        IFS=$'\n'
        eval 'declare -a arr=( "${'"$1"'[@]}" )' || return $?
        eval "$1"'=()' || return $?

        if $bool_sort_in_order; then
            eval 'arr_sort=( $( sort <<< "${'"$1"'[*]}" ) )' || return $?
        else
            eval 'arr_sort=( $( sort -r <<< "${'"$1"'[*]}" ) )' || return $?
        fi

        eval "$1"'=( "${arr[@]}" )' || return $?
        unset IFS
        return 0
    }

    # <summary> Clear empty elements from array. </summary>
    # <paramref name="1"> string: name of the array </paramref>
    function TrimArray
    {
        IsString $1 || return $?
        IFS=$'\n'
        eval 'declare -a ar=( "${'$1'[@]}" )' || return $?
        eval "$1"'=()' || return $?

        for var_element in "${arr[@]}"; do
            if IsString "${var_element}" &> /dev/null; then
                eval "$1"'+=( "${var_element}" )'
            fi
        done

        unset IFS
        return 0
    }
# </code>

# <params>
    # <summary> Constants </summary>
    declare -g str_regex_numbers='^[0-9]+$'
# </params>
