#!/bin/bash sh

#
# Filename:         bashlib-vars
# Description:      Data-type and variable validation
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source bashlib-globals
# </code>

# <code>
    # <summary> Check if two given files are the same. If true, pass. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    # <paramref name="2"> string: the name of the array </paramref>
    function AreEqualArrays
    {
        IsArray $2 || return $?
        IsArray $1 || return $?

        for int_key in $( eval '"${'$1'[@]}"' ); do
            if [[ $( eval '"${'$1'[$int_key]}"' ) != $( eval '"${'$2'[$int_key]}"' ) ]]; then
                return 1
            fi
        done

        return 0
    }

    # <summary> Find line in array. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    # <param name="2"> string: the line </param>
    function FindLineInArray
    {
        IsString $2 || return $?
        IsArray $1 || return $?

        for var_element in $( eval '"${'$1'[@]}"' ); do
            if [[ "${var_element}" == $2 ]]; then
                return 0
            fi
        done

        return 1
    }

    # <summary> Check if the array is empty. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    function IsArray
    {
        function Main
        {
            IsString $1 || return $?

            if [[ $( eval '"${#'$1'[@]}"' ) -eq 0 ]]; then
                echo -e "${str_fail_array_is_empty}"
                return $int_code_var_is_empty
            fi

            for var_element in $( eval '"${'$1'[@]}"' ); do
                IsString "${var_element}" &> /dev/null && return 0
            done

            echo -e "${str_fail_array_is_empty}"
            return 1
        }

        IFS=$'\n'
        Main $@
        SaveExitCode
        unset IFS
        return $int_exit_code
    }

    # <summary> Check if the array is writable. If true, pass. </summary>
    # <paramref name="1"> string: the name of a array </param>
    function IsArrayWritable
    {
        IsArray $1 || return $?

        if ! eval 'unset '$1' 2> /dev/null'; then
            echo -e "${var_prefix_error} Readonly array."
            return $int_code_var_is_readonly
        fi

        return 0
    }

    # <summary> Check if the variable is not empty. If true, pass. </summary>
    # <param name="1"> var: the variable </param>
    function IsString
    {
        if [[ -z $1 ]]; then
            echo -e "${var_prefix_error} Empty string."
            return $int_code_var_is_empty
        fi

        return 0
    }

    # <summary> Check if the value is a valid bool. </summary>
    # <param name="1"> var: the boolean </param>
    function IsBool
    {
        IsString $1 || return $?

        case $1 in
            "true" | "false" )
                return 0
                ;;

            * )
                echo -e "${var_prefix_error} Not a boolean."
                return $int_code_var_is_not_bool
                ;;
        esac
    }

    # <summary> Check if the value is a valid number. If true, pass.</summary>
    # <param name="1"> var: the number </param>
    function IsNum
    {
        IsString $1 || return $?

        if ! [[ $1 =~ $str_regex_numbers ]]; then
            echo -e "${var_prefix_error} NaN."
            return $int_code_var_is_NAN
        fi

        return 0
    }

    # <summary> Check if the value is a pointer. If true, pass.</summary>
    # <paramref name="1"> var: the name of the variable </param>
    function IsPointer
    {
        IsString $1 || return $?

        if ! IsString $( eval '$'"$1" ) &> /dev/null; then
            echo -e "${var_prefix_error} Not a pointer."
            return $int_code_var_is_pointer
        fi

        return 0
    }

    # <summary> Check if the variable is writable. If true, pass. </summary>
    # <paramref name="1"> string: the name of a variable </param>
    function IsVarWritable
    {
        IsString $1 || return $?

        if ! eval "unset $1 2> /dev/null"; then
            echo -e "${var_prefix_error} Readonly variable."
            return 1
        fi

        return 0
    }

    # <summary> Output an array. Declare inherited params before calling this function. </summary>
    # <paramref name="1"> string: name of the array </paramref>
    # <param name="2"> bool: True, enable text color. False, no change. </param>
    function PrintArray
    {
        function Main
        {
            IsArray $1 || return $?
            local bool_toggle_color=false
            IsBool $2 && bool_toggle_color=$2

            if $bool_toggle_color; then
                eval 'echo -e "${var_yellow}${'$1'[*]}${var_reset_color}"' || return $?
            else
                eval 'echo -e "${'$1'[*]}"' || return $?
            fi

            return 0
        }

        IFS=$'\n'
        Main $@
        SaveExitCode
        unset IFS
        return $int_exit_code
    }

    # <summary> Replace line in an array. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    # <param name="2"> string: the line to find </param>
    # <param name="3"> string: the new line </param>
    function ReplaceLineInArray
    {
        function Main
        {
            IsString $3 || return $?
            IsArrayWritable $1 || return $?
            FindLineInArray $1 $2 || return $?

            for int_key in $( eval '${!'$1'[*]}' ); do
                # case $( eval '"{'$1'[$int_key]}"' ) in
                #     $2* )
                #         eval "$1"'[$int_key]=$3'
                #         ;;
                # esac

                if [[ $( eval '"{'$1'[$int_key]}"' ) ~= $2* ]]; then
                    eval "$1"'[$int_key]=$3' || return $?
                fi
            done

            return 0
        }

        IFS=$'\n'
        Main $@
        SaveExitCode
        unset IFS
        return $int_exit_code
    }

    # <summary> Sort an array. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    # <param name="2"> bool: True, reverse sort order. False, no change. </param>
    function SortArray
    {
        function Main
        {
            IsArrayWritable $1 || return $?

            # <params>
            local bool_is_reverse_sort=false
            # </params>

            IsBool $2 &> /dev/null && bool_is_reverse_sort=$2

            if $bool_is_reverse_sort; then
                eval "$1"'=( $( sort -r <<< "${'"$1"'[*]}" ) )' || return $?
            else
                eval "$1"'=$( sort <<< "${'"$1"'[*]}" )' || return $?
            fi

            return 0
        }

        IFS=$'\n'
        Main $@
        SaveExitCode
        unset IFS
        return $int_exit_code
    }

    # <summary> Clear empty elements from array. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    function TrimArray
    {
        function Main
        {
            IsArray $1 || return $?

            # <params>
            declare -a arr_trim_array=( )
            # </params>

            for int_key in $( eval '${!'$1'[*]}' ); do
                if IsString "${var_element}" &> /dev/null; then
                    arr_trim_array+=( "${var_element}" )
                fi
            done

            if IsArray "arr_trim_array" &> /dev/null; then
                eval "$1"'=( "${arr_trim_array[*]}" )' || return $?
            else
                eval "$1"'=( )' || return $?
            fi

            return 0
        }

        IFS=$'\n'
        Main $@
        SaveExitCode
        unset IFS
        return $int_exit_code
    }
# </code>

# <params>
    # <remarks> Constants </remarks>
    declare -g str_regex_numbers='^[0-9]+$'

    # <remarks> Output statement </remarks>
    declare -g str_fail_array_is_empty="${var_prefix_error} Empty array."
# </params>
