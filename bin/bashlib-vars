#!/bin/bash sh

#
# Filename:         bashlib-vars
# Description:      Data-type and variable validation
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source bashlib-globals
# </code>

# <code>
    # <summary> Check if two given files are the same. If true, pass. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    # <paramref name="2"> string: the name of the array </paramref>
    # <returns> the exit code </returns>
    function AreEqualArrays
    {
        IsArray $2 || return $?
        IsArray $1 || return $?

        for int_key in $( eval 'echo "${!'$1'[@]}"' ); do
            if [[ $( eval 'echo "${'$1'[$int_key]}"' ) != $( eval 'echo "${'$2'[$int_key]}"' ) ]]; then
                return 1
            fi
        done

        return 0
    }

    # <summary> Find line in array. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    # <param name="2"> string: the line </param>
    # <returns> the exit code </returns>
    function FindLineInArray
    {
        IsString $2 || return $?
        IsArray $1 || return $?
        eval 'declare -a arr=( ${'${1}'[@]} )' || return 1

        for var_element in $( eval 'echo "${'$1'[@]}"' ); do
            if [[ $var_element == $2 ]]; then
                return 0
            fi
        done

        return 1
    }

    # <summary> Check if the array is empty. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    # <returns> the exit code </returns>
    function IsArray
    {
        IsString $1 || return $?

        if [[ $( eval 'echo "${#'$1'[@]}"' ) -eq 0 ]]; then
            echo -e $str_fail_array_is_empty
            return $int_code_var_is_empty
        fi

        for var_element in $( eval 'echo "${'$1'[@]}"' ); do
            IsString $var_element &> /dev/null && return 0
        done

        echo -e $str_fail_array_is_empty
        return 1
    }

    # <summary> Check if the variable is not empty. If true, pass. </summary>
    # <param name="1"> var: the variable </param>
    # <returns> the exit code </returns>
    function IsString
    {
        if [[ -z $1 ]]; then
            echo -e "${var_prefix_error} Empty string."
            return $int_code_var_is_empty
        fi

        return 0
    }

    # <summary> Check if the value is a valid bool. </summary>
    # <param name="1"> var: the boolean </param>
    # <returns> the exit code </returns>
    function IsBool
    {
        IsString $1 || return $?

        case $1 in
            "true" | "false" )
                return 0
                ;;

            * )
                echo -e "${var_prefix_error} Not a boolean."
                return $int_code_var_is_not_bool
                ;;
        esac
    }

    # <summary> Check if the value is a valid number. If true, pass.</summary>
    # <param name="1"> var: the number </param>
    # <returns> the exit code </returns>
    function IsNum
    {
        IsString $1 || return $?

        if ! [[ $1 =~ $str_regex_numbers ]]; then
            echo -e "${var_prefix_error} NaN."
            return $int_code_var_is_NAN
        fi

        return 0
    }

    # <summary> Check if the variable is a reference. If true, pass.</summary>
    # <paramref name="1"> var: the name of the variable </param>
    # <returns> the exit code </returns>
    function IsReference
    {
        IsString $1 || return $?
        declare -n var_ref=$1

        if ! IsString $var_ref &> /dev/null; then
            echo -e "${var_prefix_error} Null reference."
            return $int_code_var_is_not_a_reference
        fi

        return 0
    }

    # <summary> Check if the variable is writable. If true, pass. </summary>
    # <paramref name="1"> string: the name of a variable </paramref>
    # <returns> the exit code </returns>
    function IsVarWritable
    {
        IsString $1 || return $?

        if ! eval "unset $1 2> /dev/null"; then
            echo -e "${var_prefix_error} Readonly variable."
            return 1
        fi

        return 0
    }

    # <summary> Output an array. Declare inherited params before calling this function. </summary>
    # <paramref name="1"> string: name of the array </paramref>
    # <param name="2"> bool: True, enable text color. False, no change. </param>
    # <returns> the exit code </returns>
    function PrintArray
    {
        IsArray $1 || return $?

        if IsBool $2 &> /dev/null && $2; then
            ( IFS=$'\n'; eval 'echo -e "${var_yellow}${'$1'[*]}${var_reset_color}"' ) || return 1
        else
            ( IFS=$'\n'; eval 'echo -e "${'$1'[*]}"' ) || return 1
        fi

        return 0
    }

    # <summary> Replace line in an array. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    # <param name="2"> string: the line to find </param>
    # <param name="3"> string: the new line </param>
    # <returns> the exit code </returns>
    function ReplaceLineInArray
    {
        IsString $3 || return $?
        IsArray $1 || IsVarWritable $1 || return $?
        FindLineInArray $1 $2 || return $?

        for int_key in $( eval 'echo "${!'$1'[@]}"' ); do
            case $( eval 'echo "${'$1'[$int_key]}"' ) in
                $2* )
                    eval $1'[$int_key]=$3'
                    ;;
            esac
        done

        IsArray $1 || return $?
        return 0
    }

    # <summary> Sort an array. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    # <param name="2"> bool: True, reverse sort order. False, no change. </param>
    # <returns> the exit code </returns>
    function SortArray
    {
        IsArray $1 || IsVarWritable $1 || return $?

        if IsBool $2 &> /dev/null && $2; then
            IFS=$'\n'; eval "$1"'=( $( sort -r <<< "${'$1'[*]}" ) )' || return $?
        else
            IFS=$'\n'; eval "$1"'=( $( sort <<< "${'$1'[*]}" ) )' || return $?
        fi

        IsArray $1 || return $?
        return 0
    }

    # <summary> Clear empty elements from array. </summary>
    # <paramref name="1"> string: the name of the array </paramref>
    # <returns> the exit code </returns>
    function TrimArray
    {
        IsArray $1 || IsVarWritable $1 || return $?
        echo hello
        declare -a arr=( )
        IFS=$'\n'

        for var_element in $( eval 'echo "${'$1'[@]}"' ); do
            if IsString "$var_element" &> /dev/null; then
                echo $var_element
                arr+=( $var_element ) || return 1
            fi
        done

        eval "declare -a $1"'=( )' || return $?

        for var_element in ${arr[@]}; do
            eval "$1"'=$var_element' || return $?
        done

        PrintArray $1
        IsArray $1 || return $?
        unset IFS
        return 0
    }
# </code>

# <params>
    # <remarks> Constants </remarks>
    declare -g str_regex_numbers='^[0-9]+$'

    # <remarks> Output statement </remarks>
    declare -g str_fail_array_is_empty="${var_prefix_error} Empty array."
# </params>
