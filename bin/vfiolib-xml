#!/bin/bash sh

#
# Filename:         vfiolib-xml
# Description:      Read/write XML.
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source vfiolib-common
    source vfiolib-globals
    source vfiolib-parse
# </code>

# <params>
    declare -g _XML_FILE="$_BACKUPS_PATH/deploy-vfio-test.xml"
# </params>

# <code>
    function Are_XML_LibrariesInstalled
    {
        if ! command -v "xmllint" &> /dev/null \
            || command -v "xmlstarlet" &> /dev/null; then
            echo -e "$_PREFIX_ERROR Required libraries are not installed."
            return 1
        fi

        return 0
    }

    function ParseAndPrintTo_XML
    {
        local -a _OUTPUT=( )
        local -a _IOMMU_OUTPUT=( )

        for _IOMMU_ID in $( ls -1v /sys/kernel/iommu_groups/ | sort -h ); do
            local -a _DEVICE_OUTPUT=( )
            local _LINE_IOMMU_ID="id=\"$_IOMMU_ID\""

            for _DEVICE_ID in $( ls /sys/kernel/iommu_groups/$_IOMMU_ID/devices ); do
                local -u _DEVICE_BUS_ID=${_DEVICE_ID:5}
                local _DEVICE_CLASS="$( lspci -ms $_DEVICE_ID | cut -d \" -f 2 )"
                local _DEVICE_DRIVER=$( lspci -ks $_DEVICE_ID | grep -i "driver" | cut -d " " -f 5 )
                local _DEVICE_HWID=$( lspci -ns $_DEVICE_ID | cut -d " " -f 3 )
                local _DEVICE_NAME="$( lspci -ms $_DEVICE_ID | cut -d \" -f 6 )"
                local _DEVICE_VENDOR="$( lspci -ms $_DEVICE_ID | cut -d \" -f 4 )"

                if [[ -z "$_DEVICE_DRIVER" ]]; then
                    _DEVICE_DRIVER="N/A"
                fi

                local _LINE_DEVICE_ID="dev_id=\"$_DEVICE_BUS_ID\""
                local _LINE_DEVICE_CLASS="class=\"$_DEVICE_CLASS\""
                local _LINE_DEVICE_DRIVER="driver=\"$_DEVICE_DRIVER\""
                local _LINE_DEVICE_HWID="hw_id=\"$_DEVICE_HWID\""
                local _LINE_DEVICE_NAME="name=\"$_DEVICE_NAME\""
                local _LINE_DEVICE_VENDOR="vendor=\"$_DEVICE_VENDOR\""
                local _LINE_DEVICE="$_LINE_DEVICE_ID $_LINE_DEVICE_HWID $_LINE_DEVICE_DRIVER $_LINE_DEVICE_CLASS $_LINE_DEVICE_VENDOR $_LINE_DEVICE_NAME"
                local _LINE_IOMMU="<iommu $_LINE_IOMMU_ID $_LINE_DEVICE/>"

                _DEVICE_OUTPUT+=(
                    "\t$_LINE_IOMMU"
                )
            done

            _IOMMU_OUTPUT+=(
                "${_DEVICE_OUTPUT[@]}"
            )
        done

        _OUTPUT=(
            "<xml>"
            "${_IOMMU_OUTPUT[@]}"
            "</xml>"
        )

        IFS=$'\n'

        if ! sudo echo -e "${_OUTPUT[*]}" > "$_XML_FILE"; then
            echo -e "$_PREFIX_ERROR Failed to write to file '$_FILE'."
        fi

        unset IFS
        return 0
    }

    function ReadAndParseFrom_XML
    {
        _XML_IOMMU_GROUP_ID_LIST="$( xmlstarlet select --template --value-of /xml/iommu/id -nl "$_XML_FILE" )"
        # _XML_IOMMU_GROUP_ID_LIST="$( xmlstarlet select --template --value-of /xml/iommu/id -nl "$_XML_FILE" )"
    }

    ParseAndPrintTo_XML
# </code>